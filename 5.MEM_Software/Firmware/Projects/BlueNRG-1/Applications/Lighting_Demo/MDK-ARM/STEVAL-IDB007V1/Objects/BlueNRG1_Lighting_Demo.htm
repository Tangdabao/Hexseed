<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BlueNRG1_Lighting_Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BlueNRG1_Lighting_Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Jan 08 21:03:25 2019
<BR><P>
<H3>Maximum Stack Usage =       1964 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MobleConfigModel_ProcessDeviceCompositionDataGet &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[12f]">ATT_fill_error_resp</a>
 <LI><a href="#[136]">Accu_Handles_Requiring_Auth</a>
 <LI><a href="#[137]">Accu_UuidTypes_Requiring_Auth</a>
 <LI><a href="#[16f]">Acl_Init</a>
 <LI><a href="#[139]">Acl_Rcv_Pkt_Handler</a>
 <LI><a href="#[13c]">Acl_Transmit_Data</a>
 <LI><a href="#[142]">Acl_Tx_Cmpl_Pkt_Handler</a>
 <LI><a href="#[157]">Att_Check_Perms</a>
 <LI><a href="#[15a]">Att_Send_Read_Blob_Req_Pdu</a>
 <LI><a href="#[15b]">Att_Send_Read_By_Typ_Req_Pdu</a>
 <LI><a href="#[15e]">BTLE_StackTick</a>
 <LI><a href="#[147]">BlueNRG_Stack_Initialization</a>
 <LI><a href="#[17d]">Blue_Init_Global</a>
 <LI><a href="#[17e]">Blue_Set_Radio_Config_Data</a>
 <LI><a href="#[265]">Build_Notif_Or_Ind</a>
 <LI><a href="#[266]">CheckSecForSignedWrite</a>
 <LI><a href="#[2d0]">Check_Encry_Key_Size</a>
 <LI><a href="#[267]">Check_For_Service_Change</a>
 <LI><a href="#[159]">Check_Permission</a>
 <LI><a href="#[161]">Controller_Process_Q</a>
 <LI><a href="#[272]">Data_Len_Update_Offline_Processing_ucfg</a>
 <LI><a href="#[584]">Data_Length_Update_Control_ISR_ucfg</a>
 <LI><a href="#[595]">Delay_With_NOP_Cycles</a>
 <LI><a href="#[273]">Disconnection_Offline_Processing</a>
 <LI><a href="#[177]">Dynamic_allocator</a>
 <LI><a href="#[178]">Dynamic_allocator_noRet</a>
 <LI><a href="#[162]">Events_Process_Q</a>
 <LI><a href="#[175]">Events_Process_init</a>
 <LI><a href="#[280]">Exchg_Mtu_Resp</a>
 <LI><a href="#[281]">Exec_Write_Resp</a>
 <LI><a href="#[26b]">Find_Attr_Index</a>
 <LI><a href="#[28a]">Find_By_Type_Val_Resp</a>
 <LI><a href="#[26a]">Find_Gatt_Client</a>
 <LI><a href="#[28d]">Find_Info_Resp</a>
 <LI><a href="#[2c7]">Find_Timed_Out_Connection</a>
 <LI><a href="#[28e]">Flash_Write_Flagged</a>
 <LI><a href="#[28f]">GAP_Connection_Complete_Handler</a>
 <LI><a href="#[291]">GAP_Delete_ADType</a>
 <LI><a href="#[294]">GAP_DiscProcTimeoutcb</a>
 <LI><a href="#[297]">GAP_Init</a>
 <LI><a href="#[172]">GAP_Init_Context</a>
 <LI><a href="#[29f]">GAP_Internal_Evt_Handler</a>
 <LI><a href="#[2a0]">GAP_LL_Event_Handler_ISR</a>
 <LI><a href="#[2a2]">GAP_LimDiscTimeoutcb</a>
 <LI><a href="#[2a6]">GAP_Notify_Add_Charac</a>
 <LI><a href="#[2a9]">GAP_Privacy1v2</a>
 <LI><a href="#[2b1]">GAP_PrivateAddrTimercb</a>
 <LI><a href="#[165]">GAP_Process_Q</a>
 <LI><a href="#[2b5]">GAP_Set_Discoverable_Mode</a>
 <LI><a href="#[2b7]">GAP_Set_Non_Discoverable_Mode</a>
 <LI><a href="#[2b8]">GAP_Start_Observation_Procedure</a>
 <LI><a href="#[2ec]">GAP_Started_Gatt_Proc</a>
 <LI><a href="#[2ba]">GAP_Terminate_Gap_Procedure</a>
 <LI><a href="#[2bc]">GAP_check_and_set_role</a>
 <LI><a href="#[2bd]">GAP_discover_peer_name</a>
 <LI><a href="#[29b]">GAP_enable_controller_privacy_ucfg</a>
 <LI><a href="#[2bf]">GATT_Connection_Complete_Handler</a>
 <LI><a href="#[2a7]">GATT_Num_Charac_Present</a>
 <LI><a href="#[2c3]">GATT_Send_Packet</a>
 <LI><a href="#[2c6]">GATT_TimeOut_Handler</a>
 <LI><a href="#[59c]">GapIsPrivacySupported</a>
 <LI><a href="#[2cc]">Gatt_Add_Charac_Desc</a>
 <LI><a href="#[29d]">Gatt_Add_Characteristic</a>
 <LI><a href="#[2cf]">Gatt_Add_Descriptor</a>
 <LI><a href="#[29c]">Gatt_Add_Service</a>
 <LI><a href="#[4bc]">Gatt_Find_Srv_From_Handle</a>
 <LI><a href="#[134]">Gatt_Find_Srv_Owner_Of_Handle</a>
 <LI><a href="#[2e1]">Gatt_Find_Timed_Out_Connection_Index</a>
 <LI><a href="#[166]">Gatt_Process_Q</a>
 <LI><a href="#[2be]">Gatt_Read_Charac_By_Uuid</a>
 <LI><a href="#[2cd]">Gatt_Server_Db_Check</a>
 <LI><a href="#[2e3]">Gatt_Server_Init</a>
 <LI><a href="#[2e5]">Gatt_Server_L2C_Handler</a>
 <LI><a href="#[2e9]">Gatt_Server_L2C_Handler_ISR</a>
 <LI><a href="#[29e]">Gatt_Update_Charac_Value</a>
 <LI><a href="#[2f4]">Gatt_Update_Charac_Value_Ext</a>
 <LI><a href="#[269]">Gatt_fetch_handle</a>
 <LI><a href="#[135]">Gatt_search_handle</a>
 <LI><a href="#[2c2]">Gatt_search_service_handle</a>
 <LI><a href="#[2ad]">Generate_Non_Resolvable_Private_Address</a>
 <LI><a href="#[2c1]">Get_GAP_Handle</a>
 <LI><a href="#[299]">Get_StaticRandAddr</a>
 <LI><a href="#[316]">HAL_Flash_Store_Data</a>
 <LI><a href="#[317]">HAL_Generate_Random_Bytes_To</a>
 <LI><a href="#[318]">HAL_Read_ConfigData</a>
 <LI><a href="#[50b]">HAL_Set_TX_Power_Level</a>
 <LI><a href="#[4fc]">HAL_VTimerAcc_sysT32_ms</a>
 <LI><a href="#[25d]">HAL_VTimerDiff_ms_sysT32</a>
 <LI><a href="#[25c]">HAL_VTimerGetCurrentTime_sysT32</a>
 <LI><a href="#[4f8]">HAL_VTimerTimeoutCallback</a>
 <LI><a href="#[173]">HCI_Init</a>
 <LI><a href="#[2f6]">Hal_Get_Random_Number</a>
 <LI><a href="#[31a]">Hal_Get_Random_Number32</a>
 <LI><a href="#[298]">IDD_Initialize_Device_IDs</a>
 <LI><a href="#[26c]">Ind_Service_Change_Charac</a>
 <LI><a href="#[341]">Is_Address_Initialized</a>
 <LI><a href="#[4b6]">Is_Flash_Write_On_Going</a>
 <LI><a href="#[326]">L2C_Build_Command_Reject_Pdu</a>
 <LI><a href="#[328]">L2C_Build_Connect_Update_Req</a>
 <LI><a href="#[329]">L2C_Connection_Complete_Handler</a>
 <LI><a href="#[32c]">L2C_Connection_Complete_Signal_Handler</a>
 <LI><a href="#[334]">L2C_Get_PDU_Len</a>
 <LI><a href="#[170]">L2C_Init</a>
 <LI><a href="#[336]">L2C_Rcv_Event_Handler</a>
 <LI><a href="#[337]">L2C_Rcv_Event_Handler_ISR</a>
 <LI><a href="#[2c4]">L2C_Send_Data</a>
 <LI><a href="#[33b]">L2C_SigChan_Req_TimeOut_Handler</a>
 <LI><a href="#[32e]">L2C_Signal_Channel_Handler</a>
 <LI><a href="#[32b]">L2C_Signal_Channel_Handler_ISR</a>
 <LI><a href="#[2aa]">LL_Allow_Address_Setting</a>
 <LI><a href="#[33e]">LL_Cancel_Connection_Req</a>
 <LI><a href="#[340]">LL_Check_And_Set_Addresses</a>
 <LI><a href="#[2bb]">LL_Create_Connection_Cancel</a>
 <LI><a href="#[58d]">LL_Data_Length_Change_Event_ucfg</a>
 <LI><a href="#[347]">LL_Disconnect_Link</a>
 <LI><a href="#[2a3]">LL_Enable_Disable_Adv</a>
 <LI><a href="#[295]">LL_Enable_Disable_Scan</a>
 <LI><a href="#[350]">LL_Encrypt_Plain_Data_ucfg</a>
 <LI><a href="#[33d]">LL_Get_Address</a>
 <LI><a href="#[2ab]">LL_Get_AdvAddress</a>
 <LI><a href="#[292]">LL_Get_Adv_Data</a>
 <LI><a href="#[353]">LL_Get_Adv_Tx_Power_Level</a>
 <LI><a href="#[355]">LL_Get_LTK</a>
 <LI><a href="#[356]">LL_Get_Random_data</a>
 <LI><a href="#[2ac]">LL_Get_ScanAddress</a>
 <LI><a href="#[16d]">LL_Init</a>
 <LI><a href="#[357]">LL_LE_Clear_White_List</a>
 <LI><a href="#[13d]">LL_Send_ACL_Data</a>
 <LI><a href="#[277]">LL_Send_Disconnection_Req</a>
 <LI><a href="#[58e]">LL_Send_Length_Resp_ucfg</a>
 <LI><a href="#[293]">LL_Set_Adv_Data</a>
 <LI><a href="#[34a]">LL_Set_Adv_PDU_Format</a>
 <LI><a href="#[359]">LL_Set_Adv_Params</a>
 <LI><a href="#[349]">LL_Set_Advertising_Buffers</a>
 <LI><a href="#[345]">LL_Set_OwnAddress</a>
 <LI><a href="#[2b9]">LL_Set_Scan_Params</a>
 <LI><a href="#[33f]">LL_Sleep_Req</a>
 <LI><a href="#[35b]">LL_Start_Encryption</a>
 <LI><a href="#[35d]">LL_Update_Advertising_Buffers</a>
 <LI><a href="#[35e]">LL_Update_Scanning_Initiating_Buffers</a>
 <LI><a href="#[35f]">LL_receive_data</a>
 <LI><a href="#[537]">LL_update_proc</a>
 <LI><a href="#[2ce]">List_Circular_Get_Size</a>
 <LI><a href="#[2d2]">List_Circular_Insert_Tail</a>
 <LI><a href="#[37c]">List_Circular_Node_Present</a>
 <LI><a href="#[4fe]">List_Circular_Remove_Head</a>
 <LI><a href="#[2d1]">List_Circular_Remove_Node</a>
 <LI><a href="#[332]">Mem_Buff_Append</a>
 <LI><a href="#[37f]">Mem_Buff_Block_Copy</a>
 <LI><a href="#[381]">Mem_Buff_Block_Write</a>
 <LI><a href="#[382]">Mem_Buff_Clone</a>
 <LI><a href="#[383]">Mem_Buff_Cmp</a>
 <LI><a href="#[384]">Mem_Buff_Compact</a>
 <LI><a href="#[499]">Mem_Buff_Get</a>
 <LI><a href="#[496]">Mem_Buff_Get_Chain_Count</a>
 <LI><a href="#[49e]">Mem_Buff_Get_Chain_Size</a>
 <LI><a href="#[49b]">Mem_Buff_Init</a>
 <LI><a href="#[385]">Mem_Buff_Read</a>
 <LI><a href="#[49c]">Mem_Buff_Release</a>
 <LI><a href="#[49f]">Mem_Buff_Resize</a>
 <LI><a href="#[386]">Mem_Buff_Write</a>
 <LI><a href="#[271]">PKA_Offline_Processing_ucfg</a>
 <LI><a href="#[495]">PM_Clone_Pckt</a>
 <LI><a href="#[333]">PM_Compact</a>
 <LI><a href="#[284]">PM_Copy_Pckt_Data</a>
 <LI><a href="#[49a]">PM_Eng_Config</a>
 <LI><a href="#[331]">PM_Extract_Pdu_MBuff</a>
 <LI><a href="#[2de]">PM_Get_Available_Buffer</a>
 <LI><a href="#[497]">PM_Get_Mem_Buff_Count</a>
 <LI><a href="#[2df]">PM_Get_Pckt</a>
 <LI><a href="#[16e]">PM_Init</a>
 <LI><a href="#[28c]">PM_Pckt_Cmp</a>
 <LI><a href="#[286]">PM_Release_Acl_Pckt</a>
 <LI><a href="#[49d]">PM_Resize_Pckt_Pdu_Size</a>
 <LI><a href="#[132]">PM_Write_Pckt_Data</a>
 <LI><a href="#[342]">PRIVWHIT_u8SearchAddrInList</a>
 <LI><a href="#[4a0]">PRIVWHIT_vInit_Struct</a>
 <LI><a href="#[581]">PRIV_SearchAddrInWhiteList</a>
 <LI><a href="#[508]">PRIV_controller_privacy_csr_ucfg</a>
 <LI><a href="#[580]">PRIV_u32ProcessAdvPacket_ucfg</a>
 <LI><a href="#[270]">PRIV_u8OfflineProcessing_ucfg</a>
 <LI><a href="#[343]">PRIV_vGeneratePrivateAddress_ucfg</a>
 <LI><a href="#[58c]">PRIV_vGenerate_hci_le_direct_advertising_report_event_ucfg</a>
 <LI><a href="#[589]">PRIV_vGenerate_hci_le_enhanced_connection_complete_event_ucfg</a>
 <LI><a href="#[4aa]">Prepare_Write_Resp</a>
 <LI><a href="#[2db]">Process_Peer_Client_Data</a>
 <LI><a href="#[2d9]">Process_Peer_Server_Data</a>
 <LI><a href="#[17c]">RAL_Isr</a>
 <LI><a href="#[4ae]">Read_Blob_Resp</a>
 <LI><a href="#[4b0]">Read_By_Grp_Type_Resp</a>
 <LI><a href="#[4ac]">Read_By_Type_Resp</a>
 <LI><a href="#[4af]">Read_Multi_Resp</a>
 <LI><a href="#[4ad]">Read_Resp</a>
 <LI><a href="#[4be]">Reclassify_All_Channels</a>
 <LI><a href="#[4c0]">SDB_Add_Record</a>
 <LI><a href="#[4c6]">SDB_Find_Matching_LTK</a>
 <LI><a href="#[4ca]">SDB_Find_Record</a>
 <LI><a href="#[2a8]">SDB_Get_Number_Of_Valid_Records</a>
 <LI><a href="#[2eb]">SDB_flash_write_client_data</a>
 <LI><a href="#[4c8]">SDB_get_security_data_record</a>
 <LI><a href="#[268]">SDB_read_peer_bonded_data</a>
 <LI><a href="#[4c9]">SMA_Diversify</a>
 <LI><a href="#[4ce]">SMA_Generate_CSRK</a>
 <LI><a href="#[4cf]">SMA_Generate_IRK</a>
 <LI><a href="#[4d0]">SMA_LP_s1_Generate_STK</a>
 <LI><a href="#[4c7]">SMA_generate_EDIV_recovery_DIV</a>
 <LI><a href="#[2d8]">SMP_Check_Is_Device_Bonded</a>
 <LI><a href="#[2d7]">SMP_Forget_Device_by_ConnHandle</a>
 <LI><a href="#[171]">SMP_Init</a>
 <LI><a href="#[4d2]">SMP_MI_PairingRequest_Send</a>
 <LI><a href="#[167]">SMP_Process_Q</a>
 <LI><a href="#[4df]">SMP_Repeated_Attacks_Timer_cb</a>
 <LI><a href="#[4e0]">SMP_Timer_cb</a>
 <LI><a href="#[4e2]">SMP_Validate_Signed_Packet</a>
 <LI><a href="#[26e]">SM_Check_Encryption_KeySize</a>
 <LI><a href="#[2ae]">SM_Generate_Resolvable_Private_Address</a>
 <LI><a href="#[26d]">SM_Get_Link_Status</a>
 <LI><a href="#[158]">SM_Get_Remote_Device_Info</a>
 <LI><a href="#[338]">SM_L2CAP_Encryption_changed_Handler_ISR</a>
 <LI><a href="#[32f]">SM_L2CAP_Handler</a>
 <LI><a href="#[32a]">SM_L2CAP_Handler_ISR</a>
 <LI><a href="#[4cb]">SM_Resolve_Private_Address</a>
 <LI><a href="#[4f1]">Select_Next_Notification_Client</a>
 <LI><a href="#[2e8]">Send_Notif_Or_Ind</a>
 <LI><a href="#[4fb]">Set_Host_Timer_value</a>
 <LI><a href="#[2e7]">Start_Gatt_Timer</a>
 <LI><a href="#[2e6]">Stop_Gatt_Timer</a>
 <LI><a href="#[4b5]">Timer_ExpiryCallback</a>
 <LI><a href="#[16c]">Timer_Init</a>
 <LI><a href="#[15f]">Timer_ProcessQ</a>
 <LI><a href="#[2b0]">Timer_StartOneShot</a>
 <LI><a href="#[4fd]">Timer_StartOneShot_sysTime32</a>
 <LI><a href="#[2af]">Timer_StopOneShot</a>
 <LI><a href="#[319]">Timer_sysTime32_convMachineTime</a>
 <LI><a href="#[528]">WindowWiden1</a>
 <LI><a href="#[52c]">WindowWiden2</a>
 <LI><a href="#[4b2]">Write_Cmd</a>
 <LI><a href="#[4b1]">Write_Resp</a>
 <LI><a href="#[169]">_BlueNRG_Stack_Initialization</a>
 <LI><a href="#[582]">__ARM_common_memcpy1_6</a>
 <LI><a href="#[2b6]">_gap_set_discoverable_connectable</a>
 <LI><a href="#[538]">aci_att_exchange_mtu_resp_event</a>
 <LI><a href="#[539]">aci_att_exec_write_resp_event</a>
 <LI><a href="#[53a]">aci_att_find_by_type_value_resp_event</a>
 <LI><a href="#[53b]">aci_att_find_info_resp_event</a>
 <LI><a href="#[53c]">aci_att_prepare_write_resp_event</a>
 <LI><a href="#[53d]">aci_att_read_blob_resp_event</a>
 <LI><a href="#[53e]">aci_att_read_by_group_type_resp_event</a>
 <LI><a href="#[53f]">aci_att_read_by_type_resp_event</a>
 <LI><a href="#[540]">aci_att_read_multiple_resp_event</a>
 <LI><a href="#[541]">aci_att_read_resp_event</a>
 <LI><a href="#[542]">aci_att_write_resp_event</a>
 <LI><a href="#[13b]">aci_event_fifo_push</a>
 <LI><a href="#[13a]">aci_event_fifo_push_header</a>
 <LI><a href="#[543]">aci_gap_addr_not_resolved_event</a>
 <LI><a href="#[544]">aci_gap_authorization_req_event</a>
 <LI><a href="#[545]">aci_gap_bond_lost_event</a>
 <LI><a href="#[546]">aci_gap_device_found_event</a>
 <LI><a href="#[3a6]">aci_gap_init</a>
 <LI><a href="#[547]">aci_gap_keypress_notification_event</a>
 <LI><a href="#[548]">aci_gap_limited_discoverable_event</a>
 <LI><a href="#[549]">aci_gap_numeric_comparison_value_event</a>
 <LI><a href="#[54a]">aci_gap_pairing_complete_event</a>
 <LI><a href="#[54b]">aci_gap_pass_key_req_event</a>
 <LI><a href="#[54c]">aci_gap_proc_complete_event</a>
 <LI><a href="#[225]">aci_gap_set_discoverable</a>
 <LI><a href="#[224]">aci_gap_set_non_discoverable</a>
 <LI><a href="#[54d]">aci_gap_slave_security_initiated_event</a>
 <LI><a href="#[51b]">aci_gap_start_observation_proc_api</a>
 <LI><a href="#[51c]">aci_gap_terminate_gap_proc_api</a>
 <LI><a href="#[449]">aci_gatt_add_char</a>
 <LI><a href="#[44a]">aci_gatt_add_service</a>
 <LI><a href="#[54e]">aci_gatt_disc_read_char_by_uuid_resp_event</a>
 <LI><a href="#[54f]">aci_gatt_error_resp_event</a>
 <LI><a href="#[550]">aci_gatt_indication_event</a>
 <LI><a href="#[3a5]">aci_gatt_init</a>
 <LI><a href="#[551]">aci_gatt_notification_event</a>
 <LI><a href="#[552]">aci_gatt_prepare_write_permit_req_event</a>
 <LI><a href="#[553]">aci_gatt_proc_complete_event</a>
 <LI><a href="#[554]">aci_gatt_proc_timeout_event</a>
 <LI><a href="#[555]">aci_gatt_read_multi_permit_req_event</a>
 <LI><a href="#[556]">aci_gatt_read_permit_req_event</a>
 <LI><a href="#[557]">aci_gatt_server_confirmation_event</a>
 <LI><a href="#[44b]">aci_gatt_update_char_value</a>
 <LI><a href="#[559]">aci_gatt_write_permit_req_event</a>
 <LI><a href="#[55a]">aci_hal_fw_error_event</a>
 <LI><a href="#[3a7]">aci_hal_read_config_data</a>
 <LI><a href="#[55b]">aci_hal_scan_req_report_event</a>
 <LI><a href="#[259]">aci_hal_set_radio_activity_mask</a>
 <LI><a href="#[145]">aci_hal_set_tx_power_level</a>
 <LI><a href="#[55c]">aci_l2cap_command_reject_event</a>
 <LI><a href="#[427]">aci_l2cap_connection_parameter_update_req</a>
 <LI><a href="#[55d]">aci_l2cap_connection_update_req_event</a>
 <LI><a href="#[55e]">aci_l2cap_connection_update_resp_event</a>
 <LI><a href="#[55f]">aci_l2cap_proc_timeout_event</a>
 <LI><a href="#[282]">acl_list_first</a>
 <LI><a href="#[4ab]">acl_list_full_on_packt</a>
 <LI><a href="#[2e4]">acl_list_init</a>
 <LI><a href="#[2dd]">acl_list_insert_head</a>
 <LI><a href="#[2c5]">acl_list_insert_tail</a>
 <LI><a href="#[2da]">acl_list_is_empty</a>
 <LI><a href="#[283]">acl_list_remove</a>
 <LI><a href="#[2dc]">acl_list_remove_head</a>
 <LI><a href="#[515]">advParamsCheckAndSet</a>
 <LI><a href="#[526]">advance_slave_timing_MultiSlave</a>
 <LI><a href="#[164]">advance_transmit</a>
 <LI><a href="#[141]">advance_wakeup_timer</a>
 <LI><a href="#[534]">anchor_replace</a>
 <LI><a href="#[174]">ble_HAL_Init</a>
 <LI><a href="#[533]">cancel_connect_master</a>
 <LI><a href="#[34c]">cancel_current_master</a>
 <LI><a href="#[532]">cancel_master</a>
 <LI><a href="#[52f]">cancel_slave</a>
 <LI><a href="#[dc]">cb_aci_att_exchange_mtu_resp_event</a>
 <LI><a href="#[e6]">cb_aci_att_exec_write_resp_event</a>
 <LI><a href="#[de]">cb_aci_att_find_by_type_value_resp_event</a>
 <LI><a href="#[dd]">cb_aci_att_find_info_resp_event</a>
 <LI><a href="#[e5]">cb_aci_att_prepare_write_resp_event</a>
 <LI><a href="#[e1]">cb_aci_att_read_blob_resp_event</a>
 <LI><a href="#[e3]">cb_aci_att_read_by_group_type_resp_event</a>
 <LI><a href="#[df]">cb_aci_att_read_by_type_resp_event</a>
 <LI><a href="#[e2]">cb_aci_att_read_multiple_resp_event</a>
 <LI><a href="#[e0]">cb_aci_att_read_resp_event</a>
 <LI><a href="#[e4]">cb_aci_att_write_resp_event</a>
 <LI><a href="#[d2]">cb_aci_gap_addr_not_resolved_event</a>
 <LI><a href="#[cd]">cb_aci_gap_authorization_req_event</a>
 <LI><a href="#[cf]">cb_aci_gap_bond_lost_event</a>
 <LI><a href="#[d0]">cb_aci_gap_device_found_event</a>
 <LI><a href="#[d4]">cb_aci_gap_keypress_notification_event</a>
 <LI><a href="#[ca]">cb_aci_gap_limited_discoverable_event</a>
 <LI><a href="#[d3]">cb_aci_gap_numeric_comparison_value_event</a>
 <LI><a href="#[cb]">cb_aci_gap_pairing_complete_event</a>
 <LI><a href="#[cc]">cb_aci_gap_pass_key_req_event</a>
 <LI><a href="#[d1]">cb_aci_gap_proc_complete_event</a>
 <LI><a href="#[ce]">cb_aci_gap_slave_security_initiated_event</a>
 <LI><a href="#[da]">cb_aci_gatt_attribute_modified_event</a>
 <LI><a href="#[eb]">cb_aci_gatt_disc_read_char_by_uuid_resp_event</a>
 <LI><a href="#[ea]">cb_aci_gatt_error_resp_event</a>
 <LI><a href="#[e7]">cb_aci_gatt_indication_event</a>
 <LI><a href="#[e8]">cb_aci_gatt_notification_event</a>
 <LI><a href="#[ed]">cb_aci_gatt_prepare_write_permit_req_event</a>
 <LI><a href="#[e9]">cb_aci_gatt_proc_complete_event</a>
 <LI><a href="#[db]">cb_aci_gatt_proc_timeout_event</a>
 <LI><a href="#[ef]">cb_aci_gatt_read_multi_permit_req_event</a>
 <LI><a href="#[ee]">cb_aci_gatt_read_permit_req_event</a>
 <LI><a href="#[f1]">cb_aci_gatt_server_confirmation_event</a>
 <LI><a href="#[f0]">cb_aci_gatt_tx_pool_available_event</a>
 <LI><a href="#[ec]">cb_aci_gatt_write_permit_req_event</a>
 <LI><a href="#[d9]">cb_aci_hal_fw_error_event</a>
 <LI><a href="#[c7]">cb_aci_hal_scan_req_report_event</a>
 <LI><a href="#[d8]">cb_aci_l2cap_command_reject_event</a>
 <LI><a href="#[d7]">cb_aci_l2cap_connection_update_req_event</a>
 <LI><a href="#[d5]">cb_aci_l2cap_connection_update_resp_event</a>
 <LI><a href="#[d6]">cb_aci_l2cap_proc_timeout_event</a>
 <LI><a href="#[c3]">cb_hci_data_buffer_overflow_event</a>
 <LI><a href="#[b8]">cb_hci_disconnection_complete_event</a>
 <LI><a href="#[b9]">cb_hci_encryption_change_event</a>
 <LI><a href="#[ba]">cb_hci_encryption_key_refresh_complete_event</a>
 <LI><a href="#[bd]">cb_hci_le_advertising_report_event</a>
 <LI><a href="#[bb]">cb_hci_le_connection_complete_event</a>
 <LI><a href="#[c5]">cb_hci_le_connection_update_complete_event</a>
 <LI><a href="#[be]">cb_hci_le_data_length_change_event</a>
 <LI><a href="#[c2]">cb_hci_le_direct_advertising_report_event</a>
 <LI><a href="#[c1]">cb_hci_le_enhanced_connection_complete_event</a>
 <LI><a href="#[c0]">cb_hci_le_generate_dhkey_complete_event</a>
 <LI><a href="#[bc]">cb_hci_le_long_term_key_request_event</a>
 <LI><a href="#[bf]">cb_hci_le_read_local_p256_public_key_complete_event</a>
 <LI><a href="#[c6]">cb_hci_le_read_remote_used_features_complete_event</a>
 <LI><a href="#[c8]">cb_hci_number_of_completed_packets_event</a>
 <LI><a href="#[c4]">cb_hci_read_remote_version_information_complete_event</a>
 <LI><a href="#[c9]">cb_hci_rx_acl_data_event</a>
 <LI><a href="#[17f]">char_copy</a>
 <LI><a href="#[590]">copy_4_u32</a>
 <LI><a href="#[530]">copy_tx_data_packet</a>
 <LI><a href="#[176]">data_length_extension_csr_ucfg</a>
 <LI><a href="#[351]">encrypt</a>
 <LI><a href="#[5c5]">full_state_func_call_init</a>
 <LI><a href="#[514]">gapClearAllModeFlags</a>
 <LI><a href="#[570]">get_adv_addr</a>
 <LI><a href="#[2b2]">get_advertiser</a>
 <LI><a href="#[13e]">get_connection_no</a>
 <LI><a href="#[348]">get_next_free_slot</a>
 <LI><a href="#[571]">get_scan_addr</a>
 <LI><a href="#[2b3]">get_scan_connection</a>
 <LI><a href="#[572]">go_to_connect</a>
 <LI><a href="#[574]">go_to_connect_master</a>
 <LI><a href="#[27c]">hal_radio_activity_state_callback_check</a>
 <LI><a href="#[27d]">hal_radio_activity_state_init</a>
 <LI><a href="#[575]">hal_read_radio_activity_state</a>
 <LI><a href="#[160]">hci_acl_Process_Q</a>
 <LI><a href="#[42c]">hci_disconnect</a>
 <LI><a href="#[561]">hci_encryption_change_event</a>
 <LI><a href="#[562]">hci_encryption_key_refresh_complete_event</a>
 <LI><a href="#[27b]">hci_hardware_error_event</a>
 <LI><a href="#[566]">hci_le_data_length_change_event</a>
 <LI><a href="#[567]">hci_le_direct_advertising_report_event</a>
 <LI><a href="#[568]">hci_le_enhanced_connection_complete_event</a>
 <LI><a href="#[569]">hci_le_generate_dhkey_complete_event</a>
 <LI><a href="#[56a]">hci_le_long_term_key_request_event</a>
 <LI><a href="#[194]">hci_le_rand</a>
 <LI><a href="#[56b]">hci_le_read_local_p256_public_key_complete_event</a>
 <LI><a href="#[56c]">hci_le_read_remote_used_features_complete_event</a>
 <LI><a href="#[226]">hci_le_set_advertising_data</a>
 <LI><a href="#[56d]">hci_number_of_completed_packets_event</a>
 <LI><a href="#[44d]">hci_read_bd_addr</a>
 <LI><a href="#[422]">hci_read_local_version_information</a>
 <LI><a href="#[56e]">hci_read_remote_version_information_complete_event</a>
 <LI><a href="#[3a3]">hci_reset</a>
 <LI><a href="#[57c]">hci_rx_acl_data</a>
 <LI><a href="#[56f]">hci_rx_acl_data_event</a>
 <LI><a href="#[57d]">hci_tx_acl_data_done</a>
 <LI><a href="#[f3]">int_cb_hci_acl_data_ind_event</a>
 <LI><a href="#[f2]">int_cb_hci_acl_data_tx_cmpl_event</a>
 <LI><a href="#[f4]">int_cb_hci_disconnection_complete_event</a>
 <LI><a href="#[f5]">int_cb_hci_encryption_change_event</a>
 <LI><a href="#[f6]">int_cb_hci_encryption_key_refresh_complete_event</a>
 <LI><a href="#[f9]">int_cb_hci_le_advertising_report_event</a>
 <LI><a href="#[f7]">int_cb_hci_le_connection_complete_event</a>
 <LI><a href="#[fa]">int_cb_hci_le_data_length_change_event</a>
 <LI><a href="#[fe]">int_cb_hci_le_direct_advertising_report_event</a>
 <LI><a href="#[fd]">int_cb_hci_le_enhanced_connection_complete_event</a>
 <LI><a href="#[fc]">int_cb_hci_le_generate_dhkey_complete_event</a>
 <LI><a href="#[f8]">int_cb_hci_le_long_term_key_request_event</a>
 <LI><a href="#[fb]">int_cb_hci_le_read_local_p256_public_key_complete_event</a>
 <LI><a href="#[31b]">is_Buffer_All_Set_To</a>
 <LI><a href="#[13f]">is_slave</a>
 <LI><a href="#[360]">isr_Acl_Data_Indication_Queue_Full</a>
 <LI><a href="#[585]">isr_Acl_Data_TX_Cmpl_Queue_Full</a>
 <LI><a href="#[4b8]">isr_event_handler</a>
 <LI><a href="#[58b]">isr_event_handler_scan_data</a>
 <LI><a href="#[4b9]">isr_postproc</a>
 <LI><a href="#[586]">isr_postproc1</a>
 <LI><a href="#[583]">isr_postproc_encrypt_data</a>
 <LI><a href="#[17b]">machine_time_trans</a>
 <LI><a href="#[506]">mem_alloc_ctx_init</a>
 <LI><a href="#[531]">microseconds_to_machine_time</a>
 <LI><a href="#[52a]">modulo_37</a>
 <LI><a href="#[358]">nsar_init</a>
 <LI><a href="#[4b7]">read_rssi</a>
 <LI><a href="#[34d]">request_scan_slot</a>
 <LI><a href="#[34b]">schedule_advertise_slot</a>
 <LI><a href="#[509]">secure_connections_csr_ucfg</a>
 <LI><a href="#[516]">setGapAdvData</a>
 <LI><a href="#[17a]">set_freq</a>
 <LI><a href="#[527]">set_sca</a>
 <LI><a href="#[52e]">set_string</a>
 <LI><a href="#[140]">slave_advance</a>
 <LI><a href="#[596]">sm_RepeatedAttacks_Protection</a>
 <LI><a href="#[4d3]">sm_search_blackList</a>
 <LI><a href="#[4e4]">sma_CMAC_generate_tag</a>
 <LI><a href="#[5a2]">smp_Execute_Actions_wrt_Current_State_MI_excerpt</a>
 <LI><a href="#[59b]">smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase2as2_ucfg</a>
 <LI><a href="#[59f]">smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase_1_to_2_ucfg</a>
 <LI><a href="#[5a8]">smp_MI_Start_Encryption</a>
 <LI><a href="#[4de]">smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg</a>
 <LI><a href="#[5b1]">smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt</a>
 <LI><a href="#[5a9]">smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg</a>
 <LI><a href="#[4dd]">smp____PairingFailed_Receive</a>
 <LI><a href="#[5c2]">smp_add_to_sdb</a>
 <LI><a href="#[4e7]">smp_find_remote_device_index</a>
 <LI><a href="#[4e3]">smp_get_CSRK</a>
 <LI><a href="#[5a5]">smp_get_local_identity_address</a>
 <LI><a href="#[5a1]">smp_keys_distribution_start</a>
 <LI><a href="#[5ab]">smp_keys_receiving</a>
 <LI><a href="#[4d6]">smp_oob_check_is_remote_data_present</a>
 <LI><a href="#[5c4]">smp_pairing_2octets_packet_send</a>
 <LI><a href="#[59e]">smp_pairing_completed</a>
 <LI><a href="#[5aa]">smp_pairing_failed_send</a>
 <LI><a href="#[5b8]">smp_sc_MI_PairingConfirm_Send_sc_excerpt_ucfg</a>
 <LI><a href="#[5b9]">smp_sc_MI_PairingRandom_Receive_sc_excerpt1_ucfg</a>
 <LI><a href="#[5ba]">smp_sc_MI_PairingRandom_Receive_sc_excerpt2_ucfg</a>
 <LI><a href="#[5bc]">smp_sc_MI_PairingResponse_Receive_sc_excerpt_ucfg</a>
 <LI><a href="#[5a3]">smp_sc_MI_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg</a>
 <LI><a href="#[5c0]">smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg</a>
 <LI><a href="#[5c1]">smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg</a>
 <LI><a href="#[5a0]">smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg</a>
 <LI><a href="#[4d9]">smp_sc_check_for_ecc_pk_generation_request_ucfg</a>
 <LI><a href="#[5c3]">smp_sc_continue_on_exclusive_sc_pairing_ucfg</a>
 <LI><a href="#[57e]">smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg</a>
 <LI><a href="#[57f]">smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg</a>
 <LI><a href="#[4d1]">smp_sc_init_ucfg</a>
 <LI><a href="#[5bf]">smp_sc_update_statistics_on_pairing_complete_ucfg</a>
 <LI><a href="#[4d8]">smp_send_packet</a>
 <LI><a href="#[34f]">start_timebase</a>
 <LI><a href="#[2ea]">store_data</a>
 <LI><a href="#[52b]">swap_slaves</a>
 <LI><a href="#[4fa]">system_time_trans</a>
 <LI><a href="#[4f9]">system_time_trans_ext</a>
 <LI><a href="#[529]">time_offset1</a>
 <LI><a href="#[52d]">time_offset2</a>
 <LI><a href="#[573]">timebase_start_connect</a>
 <LI><a href="#[588]">unpack_channel_map</a>
 <LI><a href="#[587]">unpack_update_request</a>
 <LI><a href="#[51a]">_aci_gap_set_discoverable_param_check</a>
 <LI><a href="#[16a]">BlueNRG_Stack_Initialize_ConfigData</a>
 <LI><a href="#[16b]">BlueNRG_Stack_Initialize_Layers</a>
 <LI><a href="#[168]">BlueNRG_Stack_Initialize_RAM_check</a>
 <LI><a href="#[163]">BlueNRG_Stack_Perform_Crystal_Check</a>
 <LI><a href="#[179]">BlueNRG_Start_Crystal_Measurement</a>
 <LI><a href="#[2a1]">_GAP_Parse_Advertising_Report</a>
 <LI><a href="#[2a4]">aci_gap_limited_discoverable_event_push</a>
 <LI><a href="#[290]">aci_gap_proc_complete_event_push</a>
 <LI><a href="#[1]">isr_advertise_state</a>
 <LI><a href="#[41]">isr_connect_master_state</a>
 <LI><a href="#[2]">isr_connect_slave_state</a>
 <LI><a href="#[40]">isr_scan_state</a>
 <LI><a href="#[4]">isr_test_rx_state</a>
 <LI><a href="#[3]">isr_test_tx_state</a>
 <LI><a href="#[0]">isr_unknown_state</a>
 <LI><a href="#[577]">hci_encryption_change_event_push</a>
 <LI><a href="#[578]">hci_encryption_key_refresh_complete_event_push</a>
 <LI><a href="#[579]">hci_le_advertising_report_event_push</a>
 <LI><a href="#[346]">hci_le_connection_complete_event_push</a>
 <LI><a href="#[57b]">hci_le_connection_update_complete_event_push</a>
 <LI><a href="#[34e]">int32ToLe4Byte</a>
 <LI><a href="#[522]">addr_u32_from_u8</a>
 <LI><a href="#[524]">le2ByteToInt16</a>
 <LI><a href="#[523]">le4ByteToInt32</a>
 <LI><a href="#[35c]">le4ByteToInt32</a>
 <LI><a href="#[5a7]">int32ToLe4Byte</a>
 <LI><a href="#[4da]">sm_Get_Long_Term_Key</a>
 <LI><a href="#[4d4]">smp_Build_AuthReq_Field</a>
 <LI><a href="#[4d7]">smp_Build_Pairing_ReqResp_Packet</a>
 <LI><a href="#[5bb]">smp_Check_Incoming_Pairing_Parameters</a>
 <LI><a href="#[599]">smp_Determine_Key_Association_Method</a>
 <LI><a href="#[4db]">smp_Execute_Actions_wrt_Current_State</a>
 <LI><a href="#[5bd]">smp_Get_Pairing_Parameters_From_Peer_Packet</a>
 <LI><a href="#[59d]">smp_Keys_Distribution_Send</a>
 <LI><a href="#[5a6]">smp_LP_MI_Compute_c1_Confirm_Value</a>
 <LI><a href="#[4dc]">smp_Process_Rx_Packet_wrt_Current_State</a>
 <LI><a href="#[5ac]">smp_Reset_Timer</a>
 <LI><a href="#[5b6]">smp_SR_Compute_c1_Confirm_Value</a>
 <LI><a href="#[5b7]">smp_Set_Key_Association_Method</a>
 <LI><a href="#[5b5]">smp____MI_PairingConfirm_Receive</a>
 <LI><a href="#[5a4]">smp____MI_PairingConfirm_Send</a>
 <LI><a href="#[5b2]">smp____MI_PairingRandom_Receive</a>
 <LI><a href="#[5b4]">smp____MI_PairingResponse_Receive</a>
 <LI><a href="#[5b3]">smp____MI_SecurityRequest_Receive</a>
 <LI><a href="#[5ae]">smp____SR_PairingConfirm_Receive</a>
 <LI><a href="#[5af]">smp____SR_PairingRandom_Receive</a>
 <LI><a href="#[5ad]">smp____SR_PairingRequest_Receive</a>
 <LI><a href="#[518]">fifoBuf_getFreeHeader</a>
 <LI><a href="#[27e]">fifoCtrl_init</a>
 <LI><a href="#[517]">_load_uuid</a>
 <LI><a href="#[26f]">Check_and_find_gatt_client</a>
 <LI><a href="#[2d3]">Gatt_Check_Not_Error_Resp</a>
 <LI><a href="#[25]">Gatt_Read_Charac_By_Uuid_Cb</a>
 <LI><a href="#[2e0]">Gatt_Super_Handler_Task7</a>
 <LI><a href="#[2ef]">aci_att_read_blob_resp_event_push</a>
 <LI><a href="#[2ee]">aci_att_read_multiple_resp_event_push</a>
 <LI><a href="#[2ed]">aci_att_read_resp_event_push</a>
 <LI><a href="#[2f2]">aci_gatt_disc_read_char_by_uuid_resp_event_push</a>
 <LI><a href="#[2d4]">aci_gatt_error_resp_event_push</a>
 <LI><a href="#[2f3]">aci_gatt_proc_complete_event_push</a>
 <LI><a href="#[2f1]">int16ToLe2Byte</a>
 <LI><a href="#[2f0]">le2ByteToInt16</a>
 <LI><a href="#[2c0]">GATT_Server_Set_Flag</a>
 <LI><a href="#[2d5]">Gatt_Flush_Pending_AclPacket_Lists</a>
 <LI><a href="#[2d6]">Gatt_Reset_To_Closed_State</a>
 <LI><a href="#[2e2]">Gatt_Store_Server_Database_And_Reset_CCCD</a>
 <LI><a href="#[2f5]">Pm_Resize_Host_Acl_Pckt</a>
 <LI><a href="#[4b3]">aci_gatt_indication_event_push</a>
 <LI><a href="#[4b4]">aci_gatt_notification_event_push</a>
 <LI><a href="#[4f7]">TimerCallback</a>
 <LI><a href="#[327]">L2C_Get_Connection_Info</a>
 <LI><a href="#[33a]">L2C_Get_Connection_Info_Index</a>
 <LI><a href="#[32d]">L2C_Mux_Acl_Packet</a>
 <LI><a href="#[330]">L2C_Rcv_Data</a>
 <LI><a href="#[339]">L2C_Reset_To_Closed_State</a>
 <LI><a href="#[335]">L2C_discard_corrupted_acl_packet</a>
 <LI><a href="#[33c]">aci_l2cap_connection_update_req_event_push</a>
 <LI><a href="#[278]">Mem_assign</a>
 <LI><a href="#[51e]">adapt_slot</a>
 <LI><a href="#[520]">nsar_insertSlotListEntry</a>
 <LI><a href="#[521]">nsar_searchBestFreeSlot</a>
 <LI><a href="#[592]">nsar_updateBestFreeSlot</a>
 <LI><a href="#[51f]">nsar_updateSlotListEntry</a>
 <LI><a href="#[536]">swap_u16</a>
 <LI><a href="#[498]">PM_Check_And_Set</a>
 <LI><a href="#[58f]">wait_for_aes_ready</a>
 <LI><a href="#[344]">LL_Set_DirectAddress</a>
 <LI><a href="#[35a]">addr_u32_from_u8</a>
 <LI><a href="#[352]">int32ToLe4Byte</a>
 <LI><a href="#[525]">le4ByteToInt32</a>
 <LI><a href="#[354]">convert_power</a>
 <LI><a href="#[5c8]">swap_u16</a>
 <LI><a href="#[5c7]">swap_u32</a>
 <LI><a href="#[5c6]">swap_u8</a>
 <LI><a href="#[279]">Erase_Sector</a>
 <LI><a href="#[4cc]">Write_Client_Data</a>
 <LI><a href="#[504]">int32ToLe4Byte</a>
 <LI><a href="#[4c3]">sdb_delete</a>
 <LI><a href="#[4cd]">sdb_find_client_data</a>
 <LI><a href="#[503]">sdb_get_gatt_db_start_address</a>
 <LI><a href="#[4c4]">sdb_invalidate_record</a>
 <LI><a href="#[4c2]">sdb_read_record</a>
 <LI><a href="#[4c1]">sdb_read_record_validity</a>
 <LI><a href="#[4c5]">sdb_write_record</a>
 <LI><a href="#[4e6]">sma_Calculate_Hash</a>
 <LI><a href="#[597]">sma_generate_subkeys</a>
 <LI><a href="#[598]">sma_left_shift</a>
 <LI><a href="#[4e5]">SM_Connection_Complete_Handler</a>
 <LI><a href="#[519]">aci_gap_authorization_req_event_push</a>
 <LI><a href="#[4e1]">aci_gap_pairing_complete_event_push</a>
 <LI><a href="#[4e8]">smp_Keys_Distribution_Complete</a>
 <LI><a href="#[5be]">smp____Pairing_Process_Abort</a>
 <LI><a href="#[131]">ATT_fill_type_val_entry</a>
 <LI><a href="#[133]">ATT_validate_prepare_req</a>
 <LI><a href="#[28b]">Pm_Resize_Host_Acl_Pckt</a>
 <LI><a href="#[285]">aci_gatt_attribute_modified_event_push</a>
 <LI><a href="#[4bd]">aci_gatt_read_multi_permit_req_event_push</a>
 <LI><a href="#[4bb]">aci_gatt_read_permit_req_event_push</a>
 <LI><a href="#[505]">aci_gatt_write_permit_req_event_push</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d1]">MobleTransSendControl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41e]">MobleNetworkSendData</a><BR>
 <LI><a href="#[485]">MobleTransSarSendAck</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41e]">MobleNetworkSendData</a><BR>
 <LI><a href="#[488]">MobleTransSarProcessAck</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[487]">MobleTransSarSendEx</a><BR>
 <LI><a href="#[458]">MobleProvisionBearerGatt_FSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[458]">MobleProvisionBearerGatt_FSM</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">ADC_Handler</a> from system_bluenrg1.o(i.ADC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[42]">Appli_BleAttentionTimerCb</a> from appli_mesh.o(i.Appli_BleAttentionTimerCb) referenced from main.o(i.main)
 <LI><a href="#[4b]">Appli_BleDisableFilterCb</a> from appli_mesh.o(i.Appli_BleDisableFilterCb) referenced from main.o(.constdata)
 <LI><a href="#[45]">Appli_BleGattConnectionCompleteCb</a> from appli_mesh.o(i.Appli_BleGattConnectionCompleteCb) referenced from main.o(.constdata)
 <LI><a href="#[46]">Appli_BleGattDisconnectionCompleteCb</a> from appli_mesh.o(i.Appli_BleGattDisconnectionCompleteCb) referenced from main.o(.constdata)
 <LI><a href="#[4a]">Appli_BleSetNumberOfElementsCb</a> from appli_mesh.o(i.Appli_BleSetNumberOfElementsCb) referenced from main.o(.constdata)
 <LI><a href="#[49]">Appli_BleSetProductInfoCB</a> from appli_mesh.o(i.Appli_BleSetProductInfoCB) referenced from main.o(.constdata)
 <LI><a href="#[44]">Appli_BleSetTxPowerCb</a> from appli_mesh.o(i.Appli_BleSetTxPowerCb) referenced from main.o(.constdata)
 <LI><a href="#[48]">Appli_BleSetUUIDCb</a> from appli_mesh.o(i.Appli_BleSetUUIDCb) referenced from main.o(.constdata)
 <LI><a href="#[43]">Appli_BleStackInitCb</a> from appli_mesh.o(i.Appli_BleStackInitCb) referenced from main.o(.constdata)
 <LI><a href="#[47]">Appli_BleUnprovisionedIdentifyCb</a> from appli_mesh.o(i.Appli_BleUnprovisionedIdentifyCb) referenced from main.o(.constdata)
 <LI><a href="#[61]">Appli_Generic_GetLevelStatus</a> from appli_generic.o(i.Appli_Generic_GetLevelStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[60]">Appli_Generic_GetOnOffStatus</a> from appli_generic.o(i.Appli_Generic_GetOnOffStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[5e]">Appli_Generic_LevelDelta_Set</a> from appli_generic.o(i.Appli_Generic_LevelDelta_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[5f]">Appli_Generic_LevelMove_Set</a> from appli_generic.o(i.Appli_Generic_LevelMove_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[5d]">Appli_Generic_Level_Set</a> from appli_generic.o(i.Appli_Generic_Level_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[5c]">Appli_Generic_OnOff_Set</a> from appli_generic.o(i.Appli_Generic_OnOff_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[5b]">Appli_LedCtrl</a> from appli_mesh.o(i.Appli_LedCtrl) referenced from models_if.o(.constdata)
 <LI><a href="#[76]">Appli_Light_CtlDefault_Set</a> from light.o(i.Appli_Light_CtlDefault_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[75]">Appli_Light_CtlTemperature_Range_Set</a> from light.o(i.Appli_Light_CtlTemperature_Range_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[74]">Appli_Light_CtlTemperature_Set</a> from light.o(i.Appli_Light_CtlTemperature_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[73]">Appli_Light_Ctl_Set</a> from light.o(i.Appli_Light_Ctl_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[69]">Appli_Light_GetCtlDefaultStatus</a> from appli_light.o(i.Appli_Light_GetCtlDefaultStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[66]">Appli_Light_GetCtlLightStatus</a> from appli_light.o(i.Appli_Light_GetCtlLightStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[68]">Appli_Light_GetCtlTemperatureRange</a> from appli_light.o(i.Appli_Light_GetCtlTemperatureRange) referenced from models_if.o(.constdata)
 <LI><a href="#[67]">Appli_Light_GetCtlTemperatureStatus</a> from appli_light.o(i.Appli_Light_GetCtlTemperatureStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[6d]">Appli_Light_GetHslHueRange</a> from appli_light.o(i.Appli_Light_GetHslHueRange) referenced from models_if.o(.constdata)
 <LI><a href="#[6b]">Appli_Light_GetHslHueStatus</a> from appli_light.o(i.Appli_Light_GetHslHueStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[6e]">Appli_Light_GetHslSatRange</a> from appli_light.o(i.Appli_Light_GetHslSatRange) referenced from models_if.o(.constdata)
 <LI><a href="#[6c]">Appli_Light_GetHslSaturationStatus</a> from appli_light.o(i.Appli_Light_GetHslSaturationStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[6a]">Appli_Light_GetHslStatus</a> from appli_light.o(i.Appli_Light_GetHslStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[64]">Appli_Light_GetLightnessDefaultStatus</a> from appli_light.o(i.Appli_Light_GetLightnessDefaultStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[63]">Appli_Light_GetLightnessLinearStatus</a> from appli_light.o(i.Appli_Light_GetLightnessLinearStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[65]">Appli_Light_GetLightnessRangeStatus</a> from appli_light.o(i.Appli_Light_GetLightnessRangeStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[62]">Appli_Light_GetLightnessStatus</a> from appli_light.o(i.Appli_Light_GetLightnessStatus) referenced from models_if.o(.constdata)
 <LI><a href="#[7a]">Appli_Light_HslDefault_Set</a> from light.o(i.Appli_Light_HslDefault_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[78]">Appli_Light_HslHue_Set</a> from light.o(i.Appli_Light_HslHue_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[7b]">Appli_Light_HslRange_Set</a> from light.o(i.Appli_Light_HslRange_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[79]">Appli_Light_HslSaturation_Set</a> from light.o(i.Appli_Light_HslSaturation_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[77]">Appli_Light_Hsl_Set</a> from light.o(i.Appli_Light_Hsl_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[71]">Appli_Light_Lightness_Default_Set</a> from appli_light.o(i.Appli_Light_Lightness_Default_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[70]">Appli_Light_Lightness_Linear_Set</a> from appli_light.o(i.Appli_Light_Lightness_Linear_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[72]">Appli_Light_Lightness_Range_Set</a> from appli_light.o(i.Appli_Light_Lightness_Range_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[6f]">Appli_Light_Lightness_Set</a> from appli_light.o(i.Appli_Light_Lightness_Set) referenced from models_if.o(.constdata)
 <LI><a href="#[7c]">Appli_Sensor_Data_Status</a> from appli_sensor.o(i.Appli_Sensor_Data_Status) referenced from models_if.o(.constdata)
 <LI><a href="#[7d]">Appli_Sensor_Descriptor_Status</a> from appli_sensor.o(i.Appli_Sensor_Descriptor_Status) referenced from models_if.o(.constdata)
 <LI><a href="#[59]">Appli_Vendor_DeviceInfo</a> from appli_vendor.o(i.Appli_Vendor_DeviceInfo) referenced from models_if.o(.constdata)
 <LI><a href="#[58]">Appli_Vendor_LEDControl</a> from appli_vendor.o(i.Appli_Vendor_LEDControl) referenced from models_if.o(.constdata)
 <LI><a href="#[5a]">Appli_Vendor_Test</a> from appli_vendor.o(i.Appli_Vendor_Test) referenced from models_if.o(.constdata)
 <LI><a href="#[11]">Blue_Handler</a> from bluenrg1_it.o(i.Blue_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[2a]">BnrgmConfigModelHeartbeatPublication_TimerCallback</a> from library.o(i.BnrgmConfigModelHeartbeatPublication_TimerCallback) referenced from library.o(i.MobleConfigModelInit)
 <LI><a href="#[2b]">BnrgmConfigModelHeartbeatSubscription_TimerCallback</a> from library.o(i.BnrgmConfigModelHeartbeatSubscription_TimerCallback) referenced from library.o(i.MobleConfigModelInit)
 <LI><a href="#[2c]">BnrgmConfigModelProcessHeartbeat</a> from library.o(i.BnrgmConfigModelProcessHeartbeat) referenced from library.o(i.MobleConfigModelInit)
 <LI><a href="#[8b]">BnrgmConfigModel_ProcessHeartBeatPublicationGet</a> from library.o(i.BnrgmConfigModel_ProcessHeartBeatPublicationGet) referenced from library.o(.constdata)
 <LI><a href="#[8c]">BnrgmConfigModel_ProcessHeartBeatPublicationSet</a> from library.o(i.BnrgmConfigModel_ProcessHeartBeatPublicationSet) referenced from library.o(.constdata)
 <LI><a href="#[8d]">BnrgmConfigModel_ProcessHeartBeatSubscriptionGet</a> from library.o(i.BnrgmConfigModel_ProcessHeartBeatSubscriptionGet) referenced from library.o(.constdata)
 <LI><a href="#[8e]">BnrgmConfigModel_ProcessHeartBeatSubscriptionSet</a> from library.o(i.BnrgmConfigModel_ProcessHeartBeatSubscriptionSet) referenced from library.o(.constdata)
 <LI><a href="#[91]">BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet</a> from library.o(i.BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet) referenced from library.o(.constdata)
 <LI><a href="#[a2]">BnrgmConfigModel_ProcessNetworkTransmitGet</a> from library.o(i.BnrgmConfigModel_ProcessNetworkTransmitGet) referenced from library.o(.constdata)
 <LI><a href="#[a3]">BnrgmConfigModel_ProcessNetworkTransmitSet</a> from library.o(i.BnrgmConfigModel_ProcessNetworkTransmitSet) referenced from library.o(.constdata)
 <LI><a href="#[1e]">BnrgmFrndFnClear_TimerCallback</a> from library.o(i.BnrgmFrndFnClear_TimerCallback) referenced from library.o(i.BnrgmFrndFn_FSM)
 <LI><a href="#[20]">BnrgmHealthModelAttention_TimerCallback</a> from library.o(i.BnrgmHealthModelAttention_TimerCallback) referenced from library.o(i.BnrgmHealthModelSetAttentionTimer)
 <LI><a href="#[1f]">BnrgmHealthModelNewPacket</a> from library.o(i.BnrgmHealthModelNewPacket) referenced from library.o(i.BnrgmHealthModelInit)
 <LI><a href="#[21]">BnrgmHealthModelPublish_TimerCallback</a> from library.o(i.BnrgmHealthModelPublish_TimerCallback) referenced from library.o(i.BnrgmHealthModelSetPublishTimer)
 <LI><a href="#[ad]">BnrgmHealthModel_ProcessAttentionGet</a> from library.o(i.BnrgmHealthModel_ProcessAttentionGet) referenced from library.o(.constdata)
 <LI><a href="#[ae]">BnrgmHealthModel_ProcessAttentionSet</a> from library.o(i.BnrgmHealthModel_ProcessAttentionSet) referenced from library.o(.constdata)
 <LI><a href="#[af]">BnrgmHealthModel_ProcessAttentionSetUnack</a> from library.o(i.BnrgmHealthModel_ProcessAttentionSetUnack) referenced from library.o(.constdata)
 <LI><a href="#[b0]">BnrgmHealthModel_ProcessFaultClear</a> from library.o(i.BnrgmHealthModel_ProcessFaultClear) referenced from library.o(.constdata)
 <LI><a href="#[b1]">BnrgmHealthModel_ProcessFaultClearUnack</a> from library.o(i.BnrgmHealthModel_ProcessFaultClearUnack) referenced from library.o(.constdata)
 <LI><a href="#[b2]">BnrgmHealthModel_ProcessFaultGet</a> from library.o(i.BnrgmHealthModel_ProcessFaultGet) referenced from library.o(.constdata)
 <LI><a href="#[b3]">BnrgmHealthModel_ProcessFaultTest</a> from library.o(i.BnrgmHealthModel_ProcessFaultTest) referenced from library.o(.constdata)
 <LI><a href="#[b4]">BnrgmHealthModel_ProcessFaultTestUnack</a> from library.o(i.BnrgmHealthModel_ProcessFaultTestUnack) referenced from library.o(.constdata)
 <LI><a href="#[b5]">BnrgmHealthModel_ProcessPeriodGet</a> from library.o(i.BnrgmHealthModel_ProcessPeriodGet) referenced from library.o(.constdata)
 <LI><a href="#[b6]">BnrgmHealthModel_ProcessPeriodSet</a> from library.o(i.BnrgmHealthModel_ProcessPeriodSet) referenced from library.o(.constdata)
 <LI><a href="#[b7]">BnrgmHealthModel_ProcessPeriodSetUnack</a> from library.o(i.BnrgmHealthModel_ProcessPeriodSetUnack) referenced from library.o(.constdata)
 <LI><a href="#[5]">BnrgmProxyProtocol_SetDataInCharacteristic</a> from library.o(i.BnrgmProxyProtocol_SetDataInCharacteristic) referenced 4 times from library.o(.data)
 <LI><a href="#[6]">BnrgmProxyProtocol_SetDataOutCharacteristic</a> from library.o(i.BnrgmProxyProtocol_SetDataOutCharacteristic) referenced 4 times from library.o(.data)
 <LI><a href="#[22]">BnrgmProxy_SarTimeoutCallback</a> from library.o(i.BnrgmProxy_SarTimeoutCallback) referenced from library.o(i.BnrgmProxyProtocol_Init)
 <LI><a href="#[23]">BnrgmStackDummyProxyModeTimerCallback</a> from library.o(i.BnrgmStackDummyProxyModeTimerCallback) referenced from library.o(i.BnrgmStackSetDummyProxyModeState)
 <LI><a href="#[24]">BnrgmStackNodeIdentityTimerCallback</a> from library.o(i.BnrgmStackNodeIdentityTimerCallback) referenced from library.o(i.BnrgmStackSetNodeIdentityState)
 <LI><a href="#[3d]">BnrgmTransmitRadioActivityEndCallback</a> from library.o(i.BnrgmTransmitRadioActivityEndCallback) referenced from library.o(i.MobleTransmitInit)
 <LI><a href="#[1c]">DMA_Handler</a> from system_bluenrg1.o(i.DMA_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[d]">GPIO_Handler</a> from bluenrg1_it.o(i.GPIO_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[25]">Gatt_Read_Charac_By_Uuid_Cb</a> from gatt_client.o(i.Gatt_Read_Charac_By_Uuid_Cb) referenced from gatt_client.o(i.Gatt_Read_Charac_By_Uuid)
 <LI><a href="#[4f]">GenericModelServer_GetOpcodeTableCb</a> from generic.o(i.GenericModelServer_GetOpcodeTableCb) referenced from models_if.o(.constdata)
 <LI><a href="#[50]">GenericModelServer_GetStatusRequestCb</a> from generic.o(i.GenericModelServer_GetStatusRequestCb) referenced from models_if.o(.constdata)
 <LI><a href="#[51]">GenericModelServer_ProcessMessageCb</a> from generic.o(i.GenericModelServer_ProcessMessageCb) referenced from models_if.o(.constdata)
 <LI><a href="#[9]">HardFault_Handler</a> from bluenrg1_it.o(i.HardFault_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[15]">I2C1_Handler</a> from system_bluenrg1.o(i.I2C1_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[14]">I2C2_Handler</a> from system_bluenrg1.o(i.I2C2_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[52]">LightModelServer_GetLightOpcodeTableCb</a> from light.o(i.LightModelServer_GetLightOpcodeTableCb) referenced from models_if.o(.constdata)
 <LI><a href="#[53]">LightModelServer_GetStatusRequestCb</a> from light.o(i.LightModelServer_GetStatusRequestCb) referenced from models_if.o(.constdata)
 <LI><a href="#[54]">LightModelServer_ProcessMessageCb</a> from light.o(i.LightModelServer_ProcessMessageCb) referenced from models_if.o(.constdata)
 <LI><a href="#[16]">MFT1A_Handler</a> from system_bluenrg1.o(i.MFT1A_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[17]">MFT1B_Handler</a> from bluenrg1_it.o(i.MFT1B_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[18]">MFT2A_Handler</a> from system_bluenrg1.o(i.MFT2A_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[19]">MFT2B_Handler</a> from bluenrg1_it.o(i.MFT2B_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[29]">MobleConfigModelNewPacket</a> from library.o(i.MobleConfigModelNewPacket) referenced from library.o(i.MobleConfigModelInit)
 <LI><a href="#[92]">MobleConfigModel_ProcessAppBind</a> from library.o(i.MobleConfigModel_ProcessAppBind) referenced from library.o(.constdata)
 <LI><a href="#[7e]">MobleConfigModel_ProcessAppKeyAdd</a> from library.o(i.MobleConfigModel_ProcessAppKeyAdd) referenced from library.o(.constdata)
 <LI><a href="#[7f]">MobleConfigModel_ProcessAppKeyDelete</a> from library.o(i.MobleConfigModel_ProcessAppKeyDelete) referenced from library.o(.constdata)
 <LI><a href="#[80]">MobleConfigModel_ProcessAppKeyGet</a> from library.o(i.MobleConfigModel_ProcessAppKeyGet) referenced from library.o(.constdata)
 <LI><a href="#[81]">MobleConfigModel_ProcessAppKeyUpdate</a> from library.o(i.MobleConfigModel_ProcessAppKeyUpdate) referenced from library.o(.constdata)
 <LI><a href="#[93]">MobleConfigModel_ProcessAppUnbind</a> from library.o(i.MobleConfigModel_ProcessAppUnbind) referenced from library.o(.constdata)
 <LI><a href="#[82]">MobleConfigModel_ProcessBeaconGet</a> from library.o(i.MobleConfigModel_ProcessBeaconGet) referenced from library.o(.constdata)
 <LI><a href="#[83]">MobleConfigModel_ProcessBeaconSet</a> from library.o(i.MobleConfigModel_ProcessBeaconSet) referenced from library.o(.constdata)
 <LI><a href="#[85]">MobleConfigModel_ProcessDefaultTTLGet</a> from library.o(i.MobleConfigModel_ProcessDefaultTTLGet) referenced from library.o(.constdata)
 <LI><a href="#[86]">MobleConfigModel_ProcessDefaultTTLSet</a> from library.o(i.MobleConfigModel_ProcessDefaultTTLSet) referenced from library.o(.constdata)
 <LI><a href="#[84]">MobleConfigModel_ProcessDeviceCompositionDataGet</a> from library.o(i.MobleConfigModel_ProcessDeviceCompositionDataGet) referenced from library.o(.constdata)
 <LI><a href="#[87]">MobleConfigModel_ProcessFriendGet</a> from library.o(i.MobleConfigModel_ProcessFriendGet) referenced from library.o(.constdata)
 <LI><a href="#[88]">MobleConfigModel_ProcessFriendSet</a> from library.o(i.MobleConfigModel_ProcessFriendSet) referenced from library.o(.constdata)
 <LI><a href="#[89]">MobleConfigModel_ProcessGattProxyGet</a> from library.o(i.MobleConfigModel_ProcessGattProxyGet) referenced from library.o(.constdata)
 <LI><a href="#[8a]">MobleConfigModel_ProcessGattProxySet</a> from library.o(i.MobleConfigModel_ProcessGattProxySet) referenced from library.o(.constdata)
 <LI><a href="#[8f]">MobleConfigModel_ProcessKeyRefreshPhaseGet</a> from library.o(i.MobleConfigModel_ProcessKeyRefreshPhaseGet) referenced from library.o(.constdata)
 <LI><a href="#[90]">MobleConfigModel_ProcessKeyRefreshPhaseSet</a> from library.o(i.MobleConfigModel_ProcessKeyRefreshPhaseSet) referenced from library.o(.constdata)
 <LI><a href="#[94]">MobleConfigModel_ProcessModelPublicationGet</a> from library.o(i.MobleConfigModel_ProcessModelPublicationGet) referenced from library.o(.constdata)
 <LI><a href="#[95]">MobleConfigModel_ProcessModelPublicationSet</a> from library.o(i.MobleConfigModel_ProcessModelPublicationSet) referenced from library.o(.constdata)
 <LI><a href="#[96]">MobleConfigModel_ProcessModelPublicationVirtualAddressSet</a> from library.o(i.MobleConfigModel_ProcessModelPublicationVirtualAddressSet) referenced from library.o(.constdata)
 <LI><a href="#[97]">MobleConfigModel_ProcessModelSubscriptionAdd</a> from library.o(i.MobleConfigModel_ProcessModelSubscriptionAdd) referenced from library.o(.constdata)
 <LI><a href="#[98]">MobleConfigModel_ProcessModelSubscriptionDelete</a> from library.o(i.MobleConfigModel_ProcessModelSubscriptionDelete) referenced from library.o(.constdata)
 <LI><a href="#[99]">MobleConfigModel_ProcessModelSubscriptionDeleteAll</a> from library.o(i.MobleConfigModel_ProcessModelSubscriptionDeleteAll) referenced from library.o(.constdata)
 <LI><a href="#[9a]">MobleConfigModel_ProcessModelSubscriptionOverwrite</a> from library.o(i.MobleConfigModel_ProcessModelSubscriptionOverwrite) referenced from library.o(.constdata)
 <LI><a href="#[9b]">MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd</a> from library.o(i.MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd) referenced from library.o(.constdata)
 <LI><a href="#[9c]">MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete</a> from library.o(i.MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete) referenced from library.o(.constdata)
 <LI><a href="#[9d]">MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite</a> from library.o(i.MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite) referenced from library.o(.constdata)
 <LI><a href="#[9e]">MobleConfigModel_ProcessNetKeyAdd</a> from library.o(i.MobleConfigModel_ProcessNetKeyAdd) referenced from library.o(.constdata)
 <LI><a href="#[9f]">MobleConfigModel_ProcessNetKeyDelete</a> from library.o(i.MobleConfigModel_ProcessNetKeyDelete) referenced from library.o(.constdata)
 <LI><a href="#[a0]">MobleConfigModel_ProcessNetKeyGet</a> from library.o(i.MobleConfigModel_ProcessNetKeyGet) referenced from library.o(.constdata)
 <LI><a href="#[a1]">MobleConfigModel_ProcessNetKeyUpdate</a> from library.o(i.MobleConfigModel_ProcessNetKeyUpdate) referenced from library.o(.constdata)
 <LI><a href="#[a4]">MobleConfigModel_ProcessNodeIdentityGet</a> from library.o(i.MobleConfigModel_ProcessNodeIdentityGet) referenced from library.o(.constdata)
 <LI><a href="#[a5]">MobleConfigModel_ProcessNodeIdentitySet</a> from library.o(i.MobleConfigModel_ProcessNodeIdentitySet) referenced from library.o(.constdata)
 <LI><a href="#[a6]">MobleConfigModel_ProcessNodeReset</a> from library.o(i.MobleConfigModel_ProcessNodeReset) referenced from library.o(.constdata)
 <LI><a href="#[a7]">MobleConfigModel_ProcessRelayGet</a> from library.o(i.MobleConfigModel_ProcessRelayGet) referenced from library.o(.constdata)
 <LI><a href="#[a8]">MobleConfigModel_ProcessRelaySet</a> from library.o(i.MobleConfigModel_ProcessRelaySet) referenced from library.o(.constdata)
 <LI><a href="#[a9]">MobleConfigModel_ProcessSigModelAppGet</a> from library.o(i.MobleConfigModel_ProcessSigModelAppGet) referenced from library.o(.constdata)
 <LI><a href="#[aa]">MobleConfigModel_ProcessSigModelSubscriptionGet</a> from library.o(i.MobleConfigModel_ProcessSigModelSubscriptionGet) referenced from library.o(.constdata)
 <LI><a href="#[ab]">MobleConfigModel_ProcessVendorModelAppGet</a> from library.o(i.MobleConfigModel_ProcessVendorModelAppGet) referenced from library.o(.constdata)
 <LI><a href="#[ac]">MobleConfigModel_ProcessVendorModelSubscriptionGet</a> from library.o(i.MobleConfigModel_ProcessVendorModelSubscriptionGet) referenced from library.o(.constdata)
 <LI><a href="#[2e]">MobleGattReadCallback</a> from library.o(i.MobleGattReadCallback) referenced from library.o(i.MobleGattInit)
 <LI><a href="#[2d]">MobleGattWriteCallback</a> from library.o(i.MobleGattWriteCallback) referenced from library.o(i.MobleGattInit)
 <LI><a href="#[26]">MobleGenericModelNewPacket</a> from library.o(i.MobleGenericModelNewPacket) referenced from library.o(i.GenericModel_Add_Server)
 <LI><a href="#[28]">MobleLightModelNewPacket</a> from library.o(i.MobleLightModelNewPacket) referenced from library.o(i.LightModel_Add_Server)
 <LI><a href="#[2f]">MobleModelBluemeshNewPacket</a> from library.o(i.MobleModelBluemeshNewPacket) referenced from library.o(i.MobleLibraryInit)
 <LI><a href="#[31]">MobleProvisionBearerGatt_RepeatTimerCallback</a> from library.o(i.MobleProvisionBearerGatt_RepeatTimerCallback) referenced from library.o(i.MobleProvisionBearerGatt_Init)
 <LI><a href="#[30]">MobleProvisionBearerGatt_TimerCallback</a> from library.o(i.MobleProvisionBearerGatt_TimerCallback) referenced from library.o(i.MobleProvisionBearerGatt_Init)
 <LI><a href="#[3f]">MobleSensorModelNewPacket</a> from library.o(i.MobleSensorModelNewPacket) referenced from library.o(i.SensorModel_Add_Server)
 <LI><a href="#[37]">MobleStackBeaconGenerator</a> from library.o(i.MobleStackBeaconGenerator) referenced from library.o(i.MobleStackSetupBeacon)
 <LI><a href="#[36]">MobleStackConnectionCallback</a> from library.o(i.MobleStackConnectionCallback) referenced from library.o(i.MobleStackInit)
 <LI><a href="#[32]">MobleStackFastAdvTimeoutTimerCallback</a> from library.o(i.MobleStackFastAdvTimeoutTimerCallback) referenced from library.o(i.MobleStackCreateStartFastAdvTimer)
 <LI><a href="#[38]">MobleStackGattBeaconGenerator</a> from library.o(i.MobleStackGattBeaconGenerator) referenced from library.o(i.MobleStackSetupBeacon)
 <LI><a href="#[34]">MobleStackGattSetup</a> from library.o(i.MobleStackGattSetup) referenced from library.o(i.MobleStackInit)
 <LI><a href="#[33]">MobleStackScanCallback</a> from library.o(i.MobleStackScanCallback) referenced from library.o(i.MobleStackInit)
 <LI><a href="#[35]">MobleStackTimerCallback</a> from library.o(i.MobleStackTimerCallback) referenced from library.o(i.MobleStackInit)
 <LI><a href="#[3a]">MobleTransSarOnAckSentInsurance</a> from library.o(i.MobleTransSarOnAckSentInsurance) referenced from library.o(i.MobleTransSarProcessSeg)
 <LI><a href="#[3b]">MobleTransSarOnAckTimer</a> from library.o(i.MobleTransSarOnAckTimer) referenced from library.o(i.MobleTransSarProcessSeg)
 <LI><a href="#[39]">MobleTransSarOnRetransmit</a> from library.o(i.MobleTransSarOnRetransmit) referenced from library.o(i.MobleTransSarProcessAck)
 <LI><a href="#[39]">MobleTransSarOnRetransmit</a> from library.o(i.MobleTransSarOnRetransmit) referenced from library.o(i.MobleTransSarSendEx)
 <LI><a href="#[3c]">MobleTransSarOnTimeout</a> from library.o(i.MobleTransSarOnTimeout) referenced from library.o(i.MobleTransSarProcessSeg)
 <LI><a href="#[3e]">MobleTransmitTimerCallback</a> from library.o(i.MobleTransmitTimerCallback) referenced from library.o(i.MobleTransmitSetup)
 <LI><a href="#[8]">NMI_Handler</a> from bluenrg1_it.o(i.NMI_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[e]">NVM_Handler</a> from system_bluenrg1.o(i.NVM_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1b]">PKA_Handler</a> from system_bluenrg1.o(i.PKA_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[b]">PendSV_Handler</a> from bluenrg1_it.o(i.PendSV_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[7]">RESET_HANDLER</a> from system_bluenrg1.o(i.RESET_HANDLER) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1a]">RTC_Handler</a> from system_bluenrg1.o(i.RTC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[10]">SPI_Handler</a> from system_bluenrg1.o(i.SPI_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[a]">SVC_Handler</a> from bluenrg1_it.o(i.SVC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[27]">SdkEvalComIOProcessInputData</a> from sdk_eval_com.o(i.SdkEvalComIOProcessInputData) referenced from hal.o(i.InitDevice)
 <LI><a href="#[55]">SensorModelServer_GetOpcodeTableCb</a> from sensors.o(i.SensorModelServer_GetOpcodeTableCb) referenced from models_if.o(.constdata)
 <LI><a href="#[56]">SensorModelServer_GetStatusRequestCb</a> from sensors.o(i.SensorModelServer_GetStatusRequestCb) referenced from models_if.o(.constdata)
 <LI><a href="#[57]">SensorModelServer_ProcessMessageCb</a> from sensors.o(i.SensorModelServer_ProcessMessageCb) referenced from models_if.o(.constdata)
 <LI><a href="#[c]">SysTick_Handler</a> from bluenrg1_it.o(i.SysTick_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[f]">UART_Handler</a> from sdk_eval_com.o(i.UART_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[4e]">Vendor_OnResponseDataCb</a> from vendor.o(i.Vendor_OnResponseDataCb) referenced from models_if.o(.constdata)
 <LI><a href="#[4d]">Vendor_ReadLocalDataCb</a> from vendor.o(i.Vendor_ReadLocalDataCb) referenced from models_if.o(.constdata)
 <LI><a href="#[4c]">Vendor_WriteLocalDataCb</a> from vendor.o(i.Vendor_WriteLocalDataCb) referenced from models_if.o(.constdata)
 <LI><a href="#[12]">WDG_Handler</a> from system_bluenrg1.o(i.WDG_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[dc]">cb_aci_att_exchange_mtu_resp_event</a> from aci_events.o(i.cb_aci_att_exchange_mtu_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[e6]">cb_aci_att_exec_write_resp_event</a> from aci_events.o(i.cb_aci_att_exec_write_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[de]">cb_aci_att_find_by_type_value_resp_event</a> from aci_events.o(i.cb_aci_att_find_by_type_value_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[dd]">cb_aci_att_find_info_resp_event</a> from aci_events.o(i.cb_aci_att_find_info_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[e5]">cb_aci_att_prepare_write_resp_event</a> from aci_events.o(i.cb_aci_att_prepare_write_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[e1]">cb_aci_att_read_blob_resp_event</a> from aci_events.o(i.cb_aci_att_read_blob_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[e3]">cb_aci_att_read_by_group_type_resp_event</a> from aci_events.o(i.cb_aci_att_read_by_group_type_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[df]">cb_aci_att_read_by_type_resp_event</a> from aci_events.o(i.cb_aci_att_read_by_type_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[e2]">cb_aci_att_read_multiple_resp_event</a> from aci_events.o(i.cb_aci_att_read_multiple_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[e0]">cb_aci_att_read_resp_event</a> from aci_events.o(i.cb_aci_att_read_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[e4]">cb_aci_att_write_resp_event</a> from aci_events.o(i.cb_aci_att_write_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[d2]">cb_aci_gap_addr_not_resolved_event</a> from aci_events.o(i.cb_aci_gap_addr_not_resolved_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[cd]">cb_aci_gap_authorization_req_event</a> from aci_events.o(i.cb_aci_gap_authorization_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[cf]">cb_aci_gap_bond_lost_event</a> from aci_events.o(i.cb_aci_gap_bond_lost_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[d0]">cb_aci_gap_device_found_event</a> from aci_events.o(i.cb_aci_gap_device_found_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[d4]">cb_aci_gap_keypress_notification_event</a> from aci_events.o(i.cb_aci_gap_keypress_notification_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[ca]">cb_aci_gap_limited_discoverable_event</a> from aci_events.o(i.cb_aci_gap_limited_discoverable_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[d3]">cb_aci_gap_numeric_comparison_value_event</a> from aci_events.o(i.cb_aci_gap_numeric_comparison_value_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[cb]">cb_aci_gap_pairing_complete_event</a> from aci_events.o(i.cb_aci_gap_pairing_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[cc]">cb_aci_gap_pass_key_req_event</a> from aci_events.o(i.cb_aci_gap_pass_key_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[d1]">cb_aci_gap_proc_complete_event</a> from aci_events.o(i.cb_aci_gap_proc_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[ce]">cb_aci_gap_slave_security_initiated_event</a> from aci_events.o(i.cb_aci_gap_slave_security_initiated_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[da]">cb_aci_gatt_attribute_modified_event</a> from aci_events.o(i.cb_aci_gatt_attribute_modified_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[eb]">cb_aci_gatt_disc_read_char_by_uuid_resp_event</a> from aci_events.o(i.cb_aci_gatt_disc_read_char_by_uuid_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[ea]">cb_aci_gatt_error_resp_event</a> from aci_events.o(i.cb_aci_gatt_error_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[e7]">cb_aci_gatt_indication_event</a> from aci_events.o(i.cb_aci_gatt_indication_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[e8]">cb_aci_gatt_notification_event</a> from aci_events.o(i.cb_aci_gatt_notification_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[ed]">cb_aci_gatt_prepare_write_permit_req_event</a> from aci_events.o(i.cb_aci_gatt_prepare_write_permit_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[e9]">cb_aci_gatt_proc_complete_event</a> from aci_events.o(i.cb_aci_gatt_proc_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[db]">cb_aci_gatt_proc_timeout_event</a> from aci_events.o(i.cb_aci_gatt_proc_timeout_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[ef]">cb_aci_gatt_read_multi_permit_req_event</a> from aci_events.o(i.cb_aci_gatt_read_multi_permit_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[ee]">cb_aci_gatt_read_permit_req_event</a> from aci_events.o(i.cb_aci_gatt_read_permit_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[f1]">cb_aci_gatt_server_confirmation_event</a> from aci_events.o(i.cb_aci_gatt_server_confirmation_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[f0]">cb_aci_gatt_tx_pool_available_event</a> from aci_events.o(i.cb_aci_gatt_tx_pool_available_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[ec]">cb_aci_gatt_write_permit_req_event</a> from aci_events.o(i.cb_aci_gatt_write_permit_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[d9]">cb_aci_hal_fw_error_event</a> from aci_events.o(i.cb_aci_hal_fw_error_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[c7]">cb_aci_hal_scan_req_report_event</a> from aci_events.o(i.cb_aci_hal_scan_req_report_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[d8]">cb_aci_l2cap_command_reject_event</a> from aci_events.o(i.cb_aci_l2cap_command_reject_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[d7]">cb_aci_l2cap_connection_update_req_event</a> from aci_events.o(i.cb_aci_l2cap_connection_update_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[d5]">cb_aci_l2cap_connection_update_resp_event</a> from aci_events.o(i.cb_aci_l2cap_connection_update_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[d6]">cb_aci_l2cap_proc_timeout_event</a> from aci_events.o(i.cb_aci_l2cap_proc_timeout_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[c3]">cb_hci_data_buffer_overflow_event</a> from aci_events.o(i.cb_hci_data_buffer_overflow_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[b8]">cb_hci_disconnection_complete_event</a> from aci_events.o(i.cb_hci_disconnection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[b9]">cb_hci_encryption_change_event</a> from aci_events.o(i.cb_hci_encryption_change_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[ba]">cb_hci_encryption_key_refresh_complete_event</a> from aci_events.o(i.cb_hci_encryption_key_refresh_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[bd]">cb_hci_le_advertising_report_event</a> from aci_events.o(i.cb_hci_le_advertising_report_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[bb]">cb_hci_le_connection_complete_event</a> from aci_events.o(i.cb_hci_le_connection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[c5]">cb_hci_le_connection_update_complete_event</a> from aci_events.o(i.cb_hci_le_connection_update_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[be]">cb_hci_le_data_length_change_event</a> from aci_events.o(i.cb_hci_le_data_length_change_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[c2]">cb_hci_le_direct_advertising_report_event</a> from aci_events.o(i.cb_hci_le_direct_advertising_report_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[c1]">cb_hci_le_enhanced_connection_complete_event</a> from aci_events.o(i.cb_hci_le_enhanced_connection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[c0]">cb_hci_le_generate_dhkey_complete_event</a> from aci_events.o(i.cb_hci_le_generate_dhkey_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[bc]">cb_hci_le_long_term_key_request_event</a> from aci_events.o(i.cb_hci_le_long_term_key_request_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[bf]">cb_hci_le_read_local_p256_public_key_complete_event</a> from aci_events.o(i.cb_hci_le_read_local_p256_public_key_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[c6]">cb_hci_le_read_remote_used_features_complete_event</a> from aci_events.o(i.cb_hci_le_read_remote_used_features_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[c8]">cb_hci_number_of_completed_packets_event</a> from aci_events.o(i.cb_hci_number_of_completed_packets_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[c4]">cb_hci_read_remote_version_information_complete_event</a> from aci_events.o(i.cb_hci_read_remote_version_information_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[c9]">cb_hci_rx_acl_data_event</a> from aci_events.o(i.cb_hci_rx_acl_data_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[f3]">int_cb_hci_acl_data_ind_event</a> from acl.o(i.int_cb_hci_acl_data_ind_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[f2]">int_cb_hci_acl_data_tx_cmpl_event</a> from acl.o(i.int_cb_hci_acl_data_tx_cmpl_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[f4]">int_cb_hci_disconnection_complete_event</a> from aci_events.o(i.int_cb_hci_disconnection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[f5]">int_cb_hci_encryption_change_event</a> from aci_events.o(i.int_cb_hci_encryption_change_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[f6]">int_cb_hci_encryption_key_refresh_complete_event</a> from aci_events.o(i.int_cb_hci_encryption_key_refresh_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[f9]">int_cb_hci_le_advertising_report_event</a> from aci_events.o(i.int_cb_hci_le_advertising_report_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[f7]">int_cb_hci_le_connection_complete_event</a> from aci_events.o(i.int_cb_hci_le_connection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[fa]">int_cb_hci_le_data_length_change_event</a> from aci_events.o(i.int_cb_hci_le_data_length_change_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[fe]">int_cb_hci_le_direct_advertising_report_event</a> from aci_events.o(i.int_cb_hci_le_direct_advertising_report_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[fd]">int_cb_hci_le_enhanced_connection_complete_event</a> from aci_events.o(i.int_cb_hci_le_enhanced_connection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[fc]">int_cb_hci_le_generate_dhkey_complete_event</a> from aci_events.o(i.int_cb_hci_le_generate_dhkey_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[f8]">int_cb_hci_le_long_term_key_request_event</a> from aci_events.o(i.int_cb_hci_le_long_term_key_request_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[fb]">int_cb_hci_le_read_local_p256_public_key_complete_event</a> from aci_events.o(i.int_cb_hci_le_read_local_p256_public_key_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[1]">isr_advertise_state</a> from ll_isr.o(i.isr_advertise_state) referenced 2 times from ll_isr.o(.data)
 <LI><a href="#[41]">isr_connect_master_state</a> from ll_isr.o(i.isr_connect_master_state) referenced from ll_isr.o(i.full_state_func_call_init)
 <LI><a href="#[2]">isr_connect_slave_state</a> from ll_isr.o(i.isr_connect_slave_state) referenced 2 times from ll_isr.o(.data)
 <LI><a href="#[40]">isr_scan_state</a> from ll_isr.o(i.isr_scan_state) referenced from ll_isr.o(i.full_state_func_call_init)
 <LI><a href="#[4]">isr_test_rx_state</a> from ll_isr.o(i.isr_test_rx_state) referenced 2 times from ll_isr.o(.data)
 <LI><a href="#[3]">isr_test_tx_state</a> from ll_isr.o(i.isr_test_tx_state) referenced 2 times from ll_isr.o(.data)
 <LI><a href="#[0]">isr_unknown_state</a> from ll_isr.o(i.isr_unknown_state) referenced 8 times from ll_isr.o(.data)
 <LI><a href="#[1d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c9]"></a>CS_contextSave</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, context_switch.o(. text), UNUSED)

<P><STRONG><a name="[50d]"></a>CS_contextRestore</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[ff]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[5ca]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry3.o(.ARM.Collect$$$$00000002))

<P><STRONG><a name="[100]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5cb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[5cc]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[5cd]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[5ce]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[5cf]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5d0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsDelayPacket
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericLevel_CtlTempBinding
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetPublishTimer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatSubscriptionGet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_CompleteOperation
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBtQueueTop
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBtQueuePush
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBtQueuePop
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothGracefulReset
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkReplayCacheClear
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueuePush
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueuePrepNextItem
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueueAlign
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBtGetConnIntervalMs
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothPrvnCmpltReset
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStartScan
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStartAdv
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmLibraryFnOnFriendshipEstablished
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnPollTimeout
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_init
</UL>

<P><STRONG><a name="[5d1]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmValueMapping
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_TransitionBehaviourSingle_Param
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_TransitionBehaviourMulti_Param
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndRequest
</UL>

<P><STRONG><a name="[5d2]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[5d3]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_BleSetUUIDCb
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Vendor_Test
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Sensor_Data_Status
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmRead
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmBackupProcess
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetCrashInfo
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendAck
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalSetBluetoothAddress
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoPrepHeaderAndNonceNetwork
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDecryptNetworkEx
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothInit
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkUpdateNeighbours
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetOpcodeValue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattBeaconSetSectionGeneric
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetPublicationState
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBtReset
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetUnprovisioned
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetSecure
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetGeneric
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueuePush
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoSwitchFriendshipKeys
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendFriendPollResponse
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnQueLpnPkt
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransport_Parse_SegCtrlMsg
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessSeg
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessAck
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSendData
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattBeaconGenerator
</UL>

<P><STRONG><a name="[260]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_to_sdb
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Determine_Key_Association_Method
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoInitEcc
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueueAlign
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyUpdate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyAdd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationVirtualAddressSet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessDeviceCompositionDataGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyUpdate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyAdd
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_GetOutputMessage
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_CompleteOperation
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_CreateCommand
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionGenerateAuthValue
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetBluetoothAddress
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattSendNotification
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNewNetworkKey
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNewAppKey
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNetworkKey
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetDevKey
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetAppKey
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoPrepHeaderAndNonceNetwork
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK4
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK3
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK2
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK1
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptNetwork
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAuthenticateSecureNetworkBeacon
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutArray
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkUpdateNeighbours
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationProcessPacket
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_SendData
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_AddFragment
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigHeartbeatPublicationStatus
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessBeacon
</UL>

<P><STRONG><a name="[380]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Block_Write
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Block_Copy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyAdd
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK2
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkLoad
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationProcessPacket
</UL>

<P><STRONG><a name="[494]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>

<P><STRONG><a name="[5d4]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[5d5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5d6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultClearUnack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultClear
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_Init
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionGenerateAuthValue
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoPrepHeaderAndNonceNetwork
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccPublicKey
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoSwitchFriendshipKeys
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoDeleteFriendshipKeys
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsCheckSubscription
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndSubscrListRem
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndSubscrListAdd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndRequest
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndPoll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndClear
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendAck
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendData
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_GetOutputMessage
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK2
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoInitEcc
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendData
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetUnprovisioned
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetSecure
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSendBeaconOverGatt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ProcessData
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendLpnMsg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendFrndClear
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendFriendPollResponse
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndRequest
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndClear
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSendHeartbeat
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattBeaconGenerator
</UL>

<P><STRONG><a name="[5d7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[419]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkUpdateNeighbours
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessBeacon
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsSendDelayedPacket
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsDelayPacket
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_WriteLocalDataCb
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_ReadLocalDataCb
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lighting_Process
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Process
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Descriptor_Status
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Status
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_TransitionBehaviourSingle_Param
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualBinding
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Status
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Set
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Range_Status
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Range_Set
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Linear_Status
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Linear_Set
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Last_Status
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Default_Status
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Default_Set
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_BindingCtlToLightness_Actual
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_RangeBinding
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_ActualLightness_HslLightnessBinding
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightActual_GenericOnOffBinding
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightActual_GenericLevelBinding
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_LinearBinding
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_TransitionBehaviourSingle_Param
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_TransitionBehaviourMulti_Param
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_OnOff_Status
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_OnOff_Set
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Level_Status
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Level_Set
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_LevelMove_Set
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_LevelDelta_Set
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericOnOff_LightActualBinding
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericLevel_LightActualBinding
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericLevel_HslSaturationBinding
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericLevel_HslHueBinding
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericLevel_CtlTempBinding
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelNewPacket
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelNewPacket
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelNewPacket
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelReplyStatus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelCreate
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericOnOffModelCreate
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelReplyStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_Encrypt_Append
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Header_Append
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Encrypt_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Encrypt_Append
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Decrypt_Finish
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Decrypt_Append
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportParseHdr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelReplyStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelCreate
</UL>

<P><STRONG><a name="[5d8]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[5d9]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsDelayPacket
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CrashHandler
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetCrashInfo
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_GetStepValue
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_GetStepValue
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendPeriodStatus
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendFaultStatus
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendCurrentStatus
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendAttentionStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendVendorModelSubscriptionList
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendVendorModelAppList
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendSigModelSubscriptionList
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendSigModelAppList
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendRelayStatus
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendNodeIdentityStatus
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendNetKeyStatus
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelSubscriptionStatus
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelPublicationStatus
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendKeyRefreshPhaseStatus
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendGattProxyStatus
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendFriendStatus
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendDefaultTTLStatus
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendBeaconStatus
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppStatus
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppKeyStatus
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppKeyList
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeReset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyGet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessDeviceCompositionDataGet
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelReplyStatus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelCreate
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericOnOffModelCreate
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelReplyStatus
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigNetworkTransmitStatus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigHeartbeatPublicationStatus
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelReplyStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelCreate
</UL>

<P><STRONG><a name="[5da]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[5db]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualBinding
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_LinearBinding
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualBinding
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_LinearBinding
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualBinding
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_LinearBinding
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[372]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualBinding
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_LinearBinding
</UL>

<P><STRONG><a name="[36f]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualBinding
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_LinearBinding
</UL>

<P><STRONG><a name="[25e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualBinding
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_LinearBinding
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5dc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5dd]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[5de]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[112]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[10d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[10c]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[512]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[5df]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[101]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[5e0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5e1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5e2]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5e3]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>ADC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.ADC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[11b]"></a>AES_CCM_Decrypt_Append</STRONG> (Thumb, 462 bytes, Stack size 112 bytes, crypto.o(i.AES_CCM_Decrypt_Append))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = AES_CCM_Decrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_enc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmDecrypt
</UL>

<P><STRONG><a name="[11e]"></a>AES_CCM_Decrypt_Finish</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, crypto.o(i.AES_CCM_Decrypt_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AES_CCM_Decrypt_Finish &rArr; AESccmFinal &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESccmFinal
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmDecrypt
</UL>

<P><STRONG><a name="[120]"></a>AES_CCM_Decrypt_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, crypto.o(i.AES_CCM_Decrypt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AES_CCM_Decrypt_Init &rArr; AES_CCM_Encrypt_Init &rArr; AES_keyschedule_enc &rArr; AES_keyschedule_enc_LL
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Encrypt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmDecrypt
</UL>

<P><STRONG><a name="[122]"></a>AES_CCM_Encrypt_Append</STRONG> (Thumb, 566 bytes, Stack size 112 bytes, crypto.o(i.AES_CCM_Encrypt_Append))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_enc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmEncrypt
</UL>

<P><STRONG><a name="[123]"></a>AES_CCM_Encrypt_Finish</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, crypto.o(i.AES_CCM_Encrypt_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AES_CCM_Encrypt_Finish &rArr; AESccmFinal &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESccmFinal
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmEncrypt
</UL>

<P><STRONG><a name="[121]"></a>AES_CCM_Encrypt_Init</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, crypto.o(i.AES_CCM_Encrypt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AES_CCM_Encrypt_Init &rArr; AES_keyschedule_enc &rArr; AES_keyschedule_enc_LL
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_enc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmEncrypt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Decrypt_Init
</UL>

<P><STRONG><a name="[125]"></a>AES_CCM_Header_Append</STRONG> (Thumb, 434 bytes, Stack size 72 bytes, crypto.o(i.AES_CCM_Header_Append))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AES_CCM_Header_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_enc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmEncrypt
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmDecrypt
</UL>

<P><STRONG><a name="[126]"></a>AES_CMAC_Encrypt_Append</STRONG> (Thumb, 642 bytes, Stack size 104 bytes, crypto.o(i.AES_CMAC_Encrypt_Append))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_enc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCmac
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Finish
</UL>

<P><STRONG><a name="[127]"></a>AES_CMAC_Encrypt_Finish</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, crypto.o(i.AES_CMAC_Encrypt_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCmac
</UL>

<P><STRONG><a name="[128]"></a>AES_CMAC_Encrypt_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, crypto.o(i.AES_CMAC_Encrypt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AES_CMAC_Encrypt_Init &rArr; AESstdInit &rArr; AES_keyschedule_dec &rArr; AES_keyschedule_enc &rArr; AES_keyschedule_enc_LL
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESstdInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCmac
</UL>

<P><STRONG><a name="[12a]"></a>AES_ECB_Encrypt_Append</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, crypto.o(i.AES_ECB_Encrypt_Append))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AES_ECB_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_enc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesEcb
</UL>

<P><STRONG><a name="[12b]"></a>AES_ECB_Encrypt_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, crypto.o(i.AES_ECB_Encrypt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AES_ECB_Encrypt_Init &rArr; AESstdInit &rArr; AES_keyschedule_dec &rArr; AES_keyschedule_enc &rArr; AES_keyschedule_enc_LL
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESstdInit
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesEcb
</UL>

<P><STRONG><a name="[12c]"></a>AES_general_SW_enc</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, crypto.o(i.AES_general_SW_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AES_general_SW_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_enc
</UL>

<P><STRONG><a name="[12d]"></a>AES_keyschedule_dec</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, crypto.o(i.AES_keyschedule_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AES_keyschedule_dec &rArr; AES_keyschedule_enc &rArr; AES_keyschedule_enc_LL
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESstdInit
</UL>

<P><STRONG><a name="[124]"></a>AES_keyschedule_enc</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, crypto.o(i.AES_keyschedule_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AES_keyschedule_enc &rArr; AES_keyschedule_enc_LL
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc_LL
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_dec
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESstdInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Encrypt_Init
</UL>

<P><STRONG><a name="[12f]"></a>ATT_fill_error_resp</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, att.o(i.ATT_fill_error_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ATT_fill_error_resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[136]"></a>Accu_Handles_Requiring_Auth</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, rom_att.o(i.Accu_Handles_Requiring_Auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Accu_Handles_Requiring_Auth &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
</UL>

<P><STRONG><a name="[137]"></a>Accu_UuidTypes_Requiring_Auth</STRONG> (Thumb, 234 bytes, Stack size unknown bytes, rom_att.o(i.Accu_UuidTypes_Requiring_Auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Accu_UuidTypes_Requiring_Auth &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
</UL>

<P><STRONG><a name="[16f]"></a>Acl_Init</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, acl.o(i.Acl_Init))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[139]"></a>Acl_Rcv_Pkt_Handler</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, acl.o(i.Acl_Rcv_Pkt_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[13c]"></a>Acl_Transmit_Data</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, acl.o(i.Acl_Transmit_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
</UL>

<P><STRONG><a name="[142]"></a>Acl_Tx_Cmpl_Pkt_Handler</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, acl.o(i.Acl_Tx_Cmpl_Pkt_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[42]"></a>Appli_BleAttentionTimerCb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, appli_mesh.o(i.Appli_BleAttentionTimerCb))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4b]"></a>Appli_BleDisableFilterCb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appli_mesh.o(i.Appli_BleDisableFilterCb))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>Appli_BleGattConnectionCompleteCb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, appli_mesh.o(i.Appli_BleGattConnectionCompleteCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Appli_BleGattConnectionCompleteCb &rArr; SdkEvalLedOn &rArr; Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>Appli_BleGattDisconnectionCompleteCb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, appli_mesh.o(i.Appli_BleGattDisconnectionCompleteCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Appli_BleGattDisconnectionCompleteCb &rArr; SdkEvalLedOff &rArr; Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>Appli_BleSetNumberOfElementsCb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appli_mesh.o(i.Appli_BleSetNumberOfElementsCb))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>Appli_BleSetProductInfoCB</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, appli_mesh.o(i.Appli_BleSetProductInfoCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Appli_BleSetProductInfoCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>Appli_BleSetTxPowerCb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, appli_mesh.o(i.Appli_BleSetTxPowerCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Appli_BleSetTxPowerCb
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>Appli_BleSetUUIDCb</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, appli_mesh.o(i.Appli_BleSetUUIDCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Appli_BleSetUUIDCb &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>Appli_BleStackInitCb</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, appli_mesh.o(i.Appli_BleStackInitCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Appli_BleStackInitCb &rArr; BlueNRG_Stack_Initialization &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>Appli_BleUnprovisionedIdentifyCb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appli_mesh.o(i.Appli_BleUnprovisionedIdentifyCb))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[591]"></a>Appli_CheckBdMacAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, appli_mesh.o(i.Appli_CheckBdMacAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>Appli_CheckForUnprovision</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, appli_mesh.o(i.Appli_CheckForUnprovision))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + Unknown Stack Size
<LI>Call Chain = Appli_CheckForUnprovision &rArr; BluenrgMesh_Process &rArr; MobleLibraryProcess &rArr; MobleStackProcess &rArr; BnrgmFrndMgmtFriendshipProcess &rArr; BnrgmFrndFnProcess &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_Unprovision
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_Process
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_LedBlink
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetButtonState
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>Appli_Generic_GetLevelStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, appli_generic.o(i.Appli_Generic_GetLevelStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>Appli_Generic_GetOnOffStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appli_generic.o(i.Appli_Generic_GetOnOffStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>Appli_Generic_LevelDelta_Set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, appli_generic.o(i.Appli_Generic_LevelDelta_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Appli_Generic_LevelDelta_Set &rArr; SetLed &rArr; SdkEvalLedOn &rArr; Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>Appli_Generic_LevelMove_Set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, appli_generic.o(i.Appli_Generic_LevelMove_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>Appli_Generic_Level_Set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, appli_generic.o(i.Appli_Generic_Level_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Appli_Generic_Level_Set &rArr; Modify_PWM &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmValueMapping
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_PWM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>Appli_Generic_OnOff_Set</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, appli_generic.o(i.Appli_Generic_OnOff_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Appli_Generic_OnOff_Set &rArr; Modify_PWM &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_PWM
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>Appli_LedBlink</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, appli_mesh.o(i.Appli_LedBlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Appli_LedBlink &rArr; Appli_LedCtrl &rArr; SetLed &rArr; SdkEvalLedOn &rArr; Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_LedCtrl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_CheckForUnprovision
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>Appli_LedCtrl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, appli_mesh.o(i.Appli_LedCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Appli_LedCtrl &rArr; SetLed &rArr; SdkEvalLedOn &rArr; Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_LedBlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>Appli_Light_CtlDefault_Set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light.o(i.Appli_Light_CtlDefault_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>Appli_Light_CtlTemperature_Range_Set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light.o(i.Appli_Light_CtlTemperature_Range_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>Appli_Light_CtlTemperature_Set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light.o(i.Appli_Light_CtlTemperature_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>Appli_Light_Ctl_Set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light.o(i.Appli_Light_Ctl_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>Appli_Light_GetCtlDefaultStatus</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetCtlDefaultStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>Appli_Light_GetCtlLightStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetCtlLightStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>Appli_Light_GetCtlTemperatureRange</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetCtlTemperatureRange))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>Appli_Light_GetCtlTemperatureStatus</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetCtlTemperatureStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>Appli_Light_GetHslHueRange</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetHslHueRange))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>Appli_Light_GetHslHueStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetHslHueStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>Appli_Light_GetHslSatRange</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetHslSatRange))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>Appli_Light_GetHslSaturationStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetHslSaturationStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>Appli_Light_GetHslStatus</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetHslStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>Appli_Light_GetLightnessDefaultStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetLightnessDefaultStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>Appli_Light_GetLightnessLinearStatus</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetLightnessLinearStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>Appli_Light_GetLightnessRangeStatus</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetLightnessRangeStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>Appli_Light_GetLightnessStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_GetLightnessStatus))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>Appli_Light_HslDefault_Set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light.o(i.Appli_Light_HslDefault_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>Appli_Light_HslHue_Set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light.o(i.Appli_Light_HslHue_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>Appli_Light_HslRange_Set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light.o(i.Appli_Light_HslRange_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>Appli_Light_HslSaturation_Set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light.o(i.Appli_Light_HslSaturation_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>Appli_Light_Hsl_Set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light.o(i.Appli_Light_Hsl_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>Appli_Light_Lightness_Default_Set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, appli_light.o(i.Appli_Light_Lightness_Default_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Appli_Light_Lightness_Default_Set &rArr; SetLed &rArr; SdkEvalLedOn &rArr; Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>Appli_Light_Lightness_Linear_Set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_Lightness_Linear_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>Appli_Light_Lightness_Range_Set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_Lightness_Range_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>Appli_Light_Lightness_Set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, appli_light.o(i.Appli_Light_Lightness_Set))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>Appli_PWM_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, appli_light.o(i.Appli_PWM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Appli_PWM_init &rArr; Modify_PWM &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_PWM
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>Appli_Sensor_Data_Status</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, appli_sensor.o(i.Appli_Sensor_Data_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Appli_Sensor_Data_Status &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>Appli_Sensor_Descriptor_Status</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, appli_sensor.o(i.Appli_Sensor_Descriptor_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Appli_Sensor_Descriptor_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>Appli_Vendor_DeviceInfo</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, appli_vendor.o(i.Appli_Vendor_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Appli_Vendor_DeviceInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsASCII_To_Char
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_GetLibraryVersion
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_GetLibrarySubVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>Appli_Vendor_LEDControl</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, appli_vendor.o(i.Appli_Vendor_LEDControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Appli_Vendor_LEDControl &rArr; Modify_PWM &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmValueMapping
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_PWM
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>Appli_Vendor_Test</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, appli_vendor.o(i.Appli_Vendor_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Appli_Vendor_Test &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>Att_Check_Perms</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, att.o(i.Att_Check_Perms))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>

<P><STRONG><a name="[15a]"></a>Att_Send_Read_Blob_Req_Pdu</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, rom_att.o(i.Att_Send_Read_Blob_Req_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Att_Send_Read_Blob_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[15b]"></a>Att_Send_Read_By_Typ_Req_Pdu</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, rom_att.o(i.Att_Send_Read_By_Typ_Req_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Att_Send_Read_By_Typ_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
</UL>

<P><STRONG><a name="[15c]"></a>BLEPLAT_get_part_info</STRONG> (Thumb, 34 bytes, Stack size 28 bytes, miscutil.o(i.BLEPLAT_get_part_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetPartInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_ConfigData
</UL>

<P><STRONG><a name="[275]"></a>BOR_ConfigSave</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, system_bluenrg1.o(i.BOR_ConfigSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BOR_ConfigSave
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
</UL>

<P><STRONG><a name="[15e]"></a>BTLE_StackTick</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BTLE_StackTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BTLE_StackTick &rArr; Timer_ProcessQ &rArr; TimerCallback &rArr; GAP_LimDiscTimeoutcb_ucfg &rArr; GAP_LimDiscTimeoutcb &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_transmit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcess
</UL>

<P><STRONG><a name="[147]"></a>BlueNRG_Stack_Initialization</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Stack_Initialization &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_check
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_BleStackInitCb
</UL>

<P><STRONG><a name="[11]"></a>Blue_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg1_it.o(i.Blue_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Blue_Handler &rArr; RAL_Isr &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[17d]"></a>Blue_Init_Global</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, routines_support.o(i.Blue_Init_Global))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Set_Radio_Config_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[17e]"></a>Blue_Set_Radio_Config_Data</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.Blue_Set_Radio_Config_Data))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init_Global
</UL>

<P><STRONG><a name="[180]"></a>BluenrgMesh_AddGenericModels</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, generic.o(i.BluenrgMesh_AddGenericModels))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BluenrgMesh_AddGenericModels &rArr; GenericModel_Add_Server &rArr; MobleApplicationAddModel
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModel_Add_Server
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsInit
</UL>

<P><STRONG><a name="[182]"></a>BluenrgMesh_AddLightingModels</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, light.o(i.BluenrgMesh_AddLightingModels))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BluenrgMesh_AddLightingModels &rArr; LightModel_Add_Server &rArr; MobleApplicationAddModel
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModel_Add_Server
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsInit
</UL>

<P><STRONG><a name="[184]"></a>BluenrgMesh_AddSensorModels</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sensors.o(i.BluenrgMesh_AddSensorModels))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BluenrgMesh_AddSensorModels &rArr; SensorModel_Add_Server &rArr; MobleApplicationAddModel
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorModel_Add_Server
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsInit
</UL>

<P><STRONG><a name="[186]"></a>BluenrgMesh_BleHardwareInitCallBack</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, library.o(i.BluenrgMesh_BleHardwareInitCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BluenrgMesh_BleHardwareInitCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryBleHardwareInitCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21e]"></a>BluenrgMesh_FnFriendshipClearedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appli_mesh.o(i.BluenrgMesh_FnFriendshipClearedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmLibraryFnOnFriendshipCleared
</UL>

<P><STRONG><a name="[21f]"></a>BluenrgMesh_FnFriendshipEstablishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appli_mesh.o(i.BluenrgMesh_FnFriendshipEstablishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmLibraryFnOnFriendshipEstablished
</UL>

<P><STRONG><a name="[188]"></a>BluenrgMesh_GetAddress</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, library.o(i.BluenrgMesh_GetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BluenrgMesh_GetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryGetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsGetElementNumber
</UL>

<P><STRONG><a name="[155]"></a>BluenrgMesh_GetLibrarySubVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, library.o(i.BluenrgMesh_GetLibrarySubVersion))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Vendor_DeviceInfo
</UL>

<P><STRONG><a name="[153]"></a>BluenrgMesh_GetLibraryVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, library.o(i.BluenrgMesh_GetLibraryVersion))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Vendor_DeviceInfo
</UL>

<P><STRONG><a name="[18a]"></a>BluenrgMesh_GetSubscriptionAddress</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, library.o(i.BluenrgMesh_GetSubscriptionAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BluenrgMesh_GetSubscriptionAddress &rArr; MobleLibraryGetSubscriptionAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryGetSubscriptionAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsCheckSubscription
</UL>

<P><STRONG><a name="[18c]"></a>BluenrgMesh_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, library.o(i.BluenrgMesh_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = BluenrgMesh_Init &rArr; MobleLibraryInit &rArr; MobleStackInit &rArr; MoblePalCryptoSetNetworkKey &rArr; MoblePalCryptoUpdateVectors &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtFnLpnMemManage
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[220]"></a>BluenrgMesh_LpnFriendshipClearedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appli_mesh.o(i.BluenrgMesh_LpnFriendshipClearedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmLibraryLpnOnFriendshipCleared
</UL>

<P><STRONG><a name="[200]"></a>BluenrgMesh_LpnFriendshipEstablishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appli_mesh.o(i.BluenrgMesh_LpnFriendshipEstablishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[154]"></a>BluenrgMesh_ModelsASCII_To_Char</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, models_if.o(i.BluenrgMesh_ModelsASCII_To_Char))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Vendor_DeviceInfo
</UL>

<P><STRONG><a name="[190]"></a>BluenrgMesh_ModelsCheckSubscription</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, models_if.o(i.BluenrgMesh_ModelsCheckSubscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BluenrgMesh_ModelsCheckSubscription &rArr; BluenrgMesh_GetSubscriptionAddress &rArr; MobleLibraryGetSubscriptionAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_GetSubscriptionAddress
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_WriteLocalDataCb
</UL>

<P><STRONG><a name="[192]"></a>BluenrgMesh_ModelsDelayPacket</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, models_if.o(i.BluenrgMesh_ModelsDelayPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = BluenrgMesh_ModelsDelayPacket &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_WriteLocalDataCb
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_ReadLocalDataCb
</UL>

<P><STRONG><a name="[195]"></a>BluenrgMesh_ModelsGetElementNumber</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, models_if.o(i.BluenrgMesh_ModelsGetElementNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BluenrgMesh_ModelsGetElementNumber &rArr; BluenrgMesh_GetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_GetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_WriteLocalDataCb
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_ReadLocalDataCb
</UL>

<P><STRONG><a name="[196]"></a>BluenrgMesh_ModelsInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, models_if.o(i.BluenrgMesh_ModelsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BluenrgMesh_ModelsInit &rArr; BluenrgMesh_SetModelSensorCbMap &rArr; MobleSensorModelCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SetVendorCbMap
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SetModelSensorCbMap
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SetModelLightCbMap
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SetModelGenericCbMap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_AddSensorModels
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_AddLightingModels
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_AddGenericModels
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>BluenrgMesh_ModelsProcess</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, models_if.o(i.BluenrgMesh_ModelsProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1652 + Unknown Stack Size
<LI>Call Chain = BluenrgMesh_ModelsProcess &rArr; Vendor_Process &rArr; BluenrgMesh_ModelsSendDelayedPacket &rArr; BluenrgMesh_SendResponse &rArr; MobleLibrarySendResponse &rArr; MobleBluemeshModelResponse &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_Process
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Process
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lighting_Process
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>BluenrgMesh_ModelsSendDelayedPacket</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, models_if.o(i.BluenrgMesh_ModelsSendDelayedPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1636 + Unknown Stack Size
<LI>Call Chain = BluenrgMesh_ModelsSendDelayedPacket &rArr; BluenrgMesh_SendResponse &rArr; MobleLibrarySendResponse &rArr; MobleBluemeshModelResponse &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SendResponse
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_Process
</UL>

<P><STRONG><a name="[14d]"></a>BluenrgMesh_Process</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, library.o(i.BluenrgMesh_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + Unknown Stack Size
<LI>Call Chain = BluenrgMesh_Process &rArr; MobleLibraryProcess &rArr; MobleStackProcess &rArr; BnrgmFrndMgmtFriendshipProcess &rArr; BnrgmFrndFnProcess &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_CheckForUnprovision
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46a]"></a>BluenrgMesh_ProvisionCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appli_mesh.o(i.BluenrgMesh_ProvisionCallback))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>

<P><STRONG><a name="[1a1]"></a>BluenrgMesh_SendResponse</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, library.o(i.BluenrgMesh_SendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = BluenrgMesh_SendResponse &rArr; MobleLibrarySendResponse &rArr; MobleBluemeshModelResponse &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibrarySendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsSendDelayedPacket
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_WriteLocalDataCb
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_ReadLocalDataCb
</UL>

<P><STRONG><a name="[1a4]"></a>BluenrgMesh_SetAttentionTimerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, library.o(i.BluenrgMesh_SetAttentionTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BluenrgMesh_SetAttentionTimerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmLibrarySetAttentionTimerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>BluenrgMesh_SetModelGenericCbMap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, library.o(i.BluenrgMesh_SetModelGenericCbMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BluenrgMesh_SetModelGenericCbMap &rArr; MobleGenericOnOffModelCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericOnOffModelCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsInit
</UL>

<P><STRONG><a name="[199]"></a>BluenrgMesh_SetModelLightCbMap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, library.o(i.BluenrgMesh_SetModelLightCbMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BluenrgMesh_SetModelLightCbMap &rArr; MobleLightModelCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsInit
</UL>

<P><STRONG><a name="[19a]"></a>BluenrgMesh_SetModelSensorCbMap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, library.o(i.BluenrgMesh_SetModelSensorCbMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BluenrgMesh_SetModelSensorCbMap &rArr; MobleSensorModelCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsInit
</UL>

<P><STRONG><a name="[197]"></a>BluenrgMesh_SetVendorCbMap</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, library.o(i.BluenrgMesh_SetVendorCbMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BluenrgMesh_SetVendorCbMap
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibrarySetVendorCbMap
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsInit
</UL>

<P><STRONG><a name="[14c]"></a>BluenrgMesh_Unprovision</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, library.o(i.BluenrgMesh_Unprovision))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = BluenrgMesh_Unprovision &rArr; MobleLibraryUnprovision &rArr; MoblePalBluetoothGracefulReset &rArr; MobleBtReset &rArr; hci_reset &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryUnprovision
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_CheckForUnprovision
</UL>

<P><STRONG><a name="[3da]"></a>BluenrgMesh_UnprovisionCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appli_mesh.o(i.BluenrgMesh_UnprovisionCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeReset
</UL>

<P><STRONG><a name="[1b8]"></a>BnrgmConfigModelLogToValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, library.o(i.BnrgmConfigModelLogToValue))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatSubscriptionSet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatPublicationSet
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnValidateFrndOffer
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndRequest
</UL>

<P><STRONG><a name="[2c]"></a>BnrgmConfigModelProcessHeartbeat</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, library.o(i.BnrgmConfigModelProcessHeartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BnrgmConfigModelProcessHeartbeat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleConfigModelInit)
</UL>
<P><STRONG><a name="[1ab]"></a>BnrgmConfigModelSendHeartbeat</STRONG> (Thumb, 132 bytes, Stack size 80 bytes, library.o(i.BnrgmConfigModelSendHeartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = BnrgmConfigModelSendHeartbeat &rArr; MobleTransportSendHeartbeat &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportSendHeartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelHeartbeatPublication_TimerCallback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessRelaySet
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessGattProxySet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessFriendSet
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSetLowPowerStatus
</UL>

<P><STRONG><a name="[1b0]"></a>BnrgmConfigModelSetFeatures</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, library.o(i.BnrgmConfigModelSetFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BnrgmConfigModelSetFeatures &rArr; BnrgmFrndMgmtFnInit &rArr; BnrgmFrndFnInit &rArr; BnrgmPalCryptoInitFriendshipKeysP
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelDumpState
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtLpnInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtFnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelInit
</UL>

<P><STRONG><a name="[1b4]"></a>BnrgmConfigModelSetLowPowerStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, library.o(i.BnrgmConfigModelSetLowPowerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = BnrgmConfigModelSetLowPowerStatus &rArr; BnrgmConfigModelSendHeartbeat &rArr; MobleTransportSendHeartbeat &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSendHeartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[1b6]"></a>BnrgmConfigModel_SendConfigHeartbeatPublicationStatus</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, library.o(i.BnrgmConfigModel_SendConfigHeartbeatPublicationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = BnrgmConfigModel_SendConfigHeartbeatPublicationStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatPublicationSet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatPublicationGet
</UL>

<P><STRONG><a name="[1b9]"></a>BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, library.o(i.BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatSubscriptionSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatSubscriptionGet
</UL>

<P><STRONG><a name="[1c0]"></a>BnrgmConfigModel_SendConfigNetworkTransmitStatus</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, library.o(i.BnrgmConfigModel_SendConfigNetworkTransmitStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = BnrgmConfigModel_SendConfigNetworkTransmitStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessNetworkTransmitSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessNetworkTransmitGet
</UL>

<P><STRONG><a name="[1c5]"></a>BnrgmFrndFnGetLpnOffset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndFnGetLpnOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BnrgmFrndFnGetLpnOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnQueLpnPkt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndSubscrListRem
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndSubscrListAdd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndPoll
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndClearConf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnStatus
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnPollTimeout
</UL>

<P><STRONG><a name="[1c4]"></a>BnrgmFrndFnGetLpnPollTimeout</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndFnGetLpnPollTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BnrgmFrndFnGetLpnPollTimeout &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtGetLpnPollTimeout
</UL>

<P><STRONG><a name="[1c6]"></a>BnrgmFrndFnGetLpnStatus</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, library.o(i.BnrgmFrndFnGetLpnStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BnrgmFrndFnGetLpnStatus &rArr; BnrgmFrndFnGetLpnOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtGetFriendshipStatus
</UL>

<P><STRONG><a name="[1db]"></a>BnrgmFrndFnGetSubscrStatus</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, library.o(i.BnrgmFrndFnGetSubscrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BnrgmFrndFnGetSubscrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtGetSubscrStatus
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnQueLpnPkt
</UL>

<P><STRONG><a name="[1c7]"></a>BnrgmFrndFnInit</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, library.o(i.BnrgmFrndFnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BnrgmFrndFnInit &rArr; BnrgmPalCryptoInitFriendshipKeysP
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoInitFriendshipKeysP
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSetFriendNodeParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtFnInit
</UL>

<P><STRONG><a name="[1ca]"></a>BnrgmFrndFnInsertFriendUpdate</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, library.o(i.BnrgmFrndFnInsertFriendUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BnrgmFrndFnInsertFriendUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_KR_UseNewKeyEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendSecurityUpdate
</UL>

<P><STRONG><a name="[1cc]"></a>BnrgmFrndFnProcess</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, library.o(i.BnrgmFrndFnProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndFnProcess &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtFriendshipProcess
</UL>

<P><STRONG><a name="[1ce]"></a>BnrgmFrndFnProcessFrndClear</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, library.o(i.BnrgmFrndFnProcessFrndClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetNetworkTransmitCount
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
</UL>

<P><STRONG><a name="[1d2]"></a>BnrgmFrndFnProcessFrndClearConf</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, library.o(i.BnrgmFrndFnProcessFrndClearConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BnrgmFrndFnProcessFrndClearConf &rArr; MobleInputStreamGetBigEndian
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
</UL>

<P><STRONG><a name="[1d3]"></a>BnrgmFrndFnProcessFrndPoll</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, library.o(i.BnrgmFrndFnProcessFrndPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndFnProcessFrndPoll &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
</UL>

<P><STRONG><a name="[1d4]"></a>BnrgmFrndFnProcessFrndRequest</STRONG> (Thumb, 414 bytes, Stack size 72 bytes, library.o(i.BnrgmFrndFnProcessFrndRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndFnProcessFrndRequest &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoSetFriendshipNetKeyOffset
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmLibraryFnOnFriendshipCleared
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendFrndClear
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelLogToValue
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
</UL>

<P><STRONG><a name="[1d8]"></a>BnrgmFrndFnProcessFrndSubscrListAdd</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, library.o(i.BnrgmFrndFnProcessFrndSubscrListAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndFnProcessFrndSubscrListAdd &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
</UL>

<P><STRONG><a name="[1d9]"></a>BnrgmFrndFnProcessFrndSubscrListRem</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, library.o(i.BnrgmFrndFnProcessFrndSubscrListRem))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndFnProcessFrndSubscrListRem &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
</UL>

<P><STRONG><a name="[1da]"></a>BnrgmFrndFnQueLpnPkt</STRONG> (Thumb, 336 bytes, Stack size 80 bytes, library.o(i.BnrgmFrndFnQueLpnPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BnrgmFrndFnQueLpnPkt &rArr; BnrgmFrndFnGetSubscrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetSubscrStatus
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtQueLpnPkt
</UL>

<P><STRONG><a name="[1dc]"></a>BnrgmFrndFnSendFriendPollResponse</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, library.o(i.BnrgmFrndFnSendFriendPollResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendLpnMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
</UL>

<P><STRONG><a name="[1d5]"></a>BnrgmFrndFnSendFrndClear</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, library.o(i.BnrgmFrndFnSendFrndClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BnrgmFrndFnSendFrndClear &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetNetworkTransmitCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSendFrndClear
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndRequest
</UL>

<P><STRONG><a name="[1dd]"></a>BnrgmFrndFnSendLpnMsg</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, library.o(i.BnrgmFrndFnSendLpnMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendDataEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendFriendPollResponse
</UL>

<P><STRONG><a name="[1df]"></a>BnrgmFrndFnSendSecurityUpdate</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, library.o(i.BnrgmFrndFnSendSecurityUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BnrgmFrndFnSendSecurityUpdate &rArr; BnrgmFrndFnInsertFriendUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnInsertFriendUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSendSecurityUpdate
</UL>

<P><STRONG><a name="[1c8]"></a>BnrgmFrndFnSetFriendNodeParams</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, library.o(i.BnrgmFrndFnSetFriendNodeParams))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnInit
</UL>

<P><STRONG><a name="[1e0]"></a>BnrgmFrndFnSwitchKeys</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, library.o(i.BnrgmFrndFnSwitchKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BnrgmFrndFnSwitchKeys &rArr; BnrgmPalCryptoSwitchFriendshipKeys &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoSwitchFriendshipKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSwitchKeys
</UL>

<P><STRONG><a name="[1e2]"></a>BnrgmFrndFnUpdateKeys</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, library.o(i.BnrgmFrndFnUpdateKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = BnrgmFrndFnUpdateKeys &rArr; BnrgmPalCryptoSetFriendshipKeys &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoSetFriendshipKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtUpdateKeys
</UL>

<P><STRONG><a name="[1eb]"></a>BnrgmFrndLpSetLowPowerNodeParams</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndLpSetLowPowerNodeParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BnrgmFrndLpSetLowPowerNodeParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnInit
</UL>

<P><STRONG><a name="[1e7]"></a>BnrgmFrndLpnGetTxPendingStatus</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, library.o(i.BnrgmFrndLpnGetTxPendingStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BnrgmFrndLpnGetTxPendingStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitIsQueEmpty
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBtGetAdvStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSetLpState
</UL>

<P><STRONG><a name="[1ea]"></a>BnrgmFrndLpnInit</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, library.o(i.BnrgmFrndLpnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BnrgmFrndLpnInit &rArr; BnrgmPalCryptoInitFriendshipKeysP
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoInitFriendshipKeysP
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpSetLowPowerNodeParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtLpnInit
</UL>

<P><STRONG><a name="[1ec]"></a>BnrgmFrndLpnProcess</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndLpnProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndLpnProcess &rArr; BnrgmFrndLpn_FSM &rArr; BnrgmFrndLpnSendFrndSubscrListRem &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtFriendshipProcess
</UL>

<P><STRONG><a name="[1ee]"></a>BnrgmFrndLpnProcessFrndOffer</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, library.o(i.BnrgmFrndLpnProcessFrndOffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndLpnProcessFrndOffer &rArr; BnrgmPalCryptoSetFriendshipKeys &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoSetFriendshipKeys
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnValidateFrndOffer
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
</UL>

<P><STRONG><a name="[1f0]"></a>BnrgmFrndLpnProcessFrndRfu</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndLpnProcessFrndRfu))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndLpnProcessFrndRfu &rArr; BnrgmFrndLpn_FSM &rArr; BnrgmFrndLpnSendFrndSubscrListRem &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
</UL>

<P><STRONG><a name="[1f1]"></a>BnrgmFrndLpnProcessFrndSubscrListConf</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndLpnProcessFrndSubscrListConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndLpnProcessFrndSubscrListConf &rArr; BnrgmFrndLpn_FSM &rArr; BnrgmFrndLpnSendFrndSubscrListRem &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
</UL>

<P><STRONG><a name="[1f2]"></a>BnrgmFrndLpnProcessFrndUpdate</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, library.o(i.BnrgmFrndLpnProcessFrndUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndLpnProcessFrndUpdate &rArr; MobleStackProcessIvFromBeacon &rArr; MobleStackIvUpdateSwitchToProgress &rArr; MobleStackSetIvIndex &rArr; BnrgmStackSendBeaconOverGatt &rArr; MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelConfigUpdateKRState
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessIvFromBeacon
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
</UL>

<P><STRONG><a name="[1fa]"></a>BnrgmFrndLpnSetLpState</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, library.o(i.BnrgmFrndLpnSetLpState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BnrgmFrndLpnSetLpState &rArr; BnrgmFrndLpnGetTxPendingStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnGetTxPendingStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[208]"></a>BnrgmFrndLpnSubscriptionListAdd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, library.o(i.BnrgmFrndLpnSubscriptionListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSubscriptionListAdd
</UL>

<P><STRONG><a name="[20a]"></a>BnrgmFrndLpnSubscriptionListRemove</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, library.o(i.BnrgmFrndLpnSubscriptionListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSubscriptionListRemove
</UL>

<P><STRONG><a name="[1fb]"></a>BnrgmFrndLpnSwitchKeys</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndLpnSwitchKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BnrgmFrndLpnSwitchKeys &rArr; BnrgmPalCryptoSwitchFriendshipKeys &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoSwitchFriendshipKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSwitchKeys
</UL>

<P><STRONG><a name="[1fc]"></a>BnrgmFrndLpnUpdateKeys</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, library.o(i.BnrgmFrndLpnUpdateKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = BnrgmFrndLpnUpdateKeys &rArr; BnrgmPalCryptoSetFriendshipKeys &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoSetFriendshipKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtUpdateKeys
</UL>

<P><STRONG><a name="[1ef]"></a>BnrgmFrndLpnValidateFrndOffer</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, library.o(i.BnrgmFrndLpnValidateFrndOffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BnrgmFrndLpnValidateFrndOffer &rArr; MobleInputStreamGetBigEndian
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelLogToValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndOffer
</UL>

<P><STRONG><a name="[1b1]"></a>BnrgmFrndMgmtFnInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndMgmtFnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BnrgmFrndMgmtFnInit &rArr; BnrgmFrndFnInit &rArr; BnrgmPalCryptoInitFriendshipKeysP
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSetFeatures
</UL>

<P><STRONG><a name="[18e]"></a>BnrgmFrndMgmtFnLpnMemManage</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, library.o(i.BnrgmFrndMgmtFnLpnMemManage))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_Init
</UL>

<P><STRONG><a name="[202]"></a>BnrgmFrndMgmtFriendshipProcess</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndMgmtFriendshipProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 972 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndMgmtFriendshipProcess &rArr; BnrgmFrndFnProcess &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcess
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcess
</UL>

<P><STRONG><a name="[203]"></a>BnrgmFrndMgmtGetFriendshipStatus</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, library.o(i.BnrgmFrndMgmtGetFriendshipStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BnrgmFrndMgmtGetFriendshipStatus &rArr; BnrgmFrndFnGetLpnStatus &rArr; BnrgmFrndFnGetLpnOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarOnAckTimer
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarOnAckSentInsurance
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkDecideRetransmission
</UL>

<P><STRONG><a name="[1bd]"></a>BnrgmFrndMgmtGetLpnPollTimeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndMgmtGetLpnPollTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BnrgmFrndMgmtGetLpnPollTimeout &rArr; BnrgmFrndFnGetLpnPollTimeout &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetLpnPollTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet
</UL>

<P><STRONG><a name="[204]"></a>BnrgmFrndMgmtGetSubscrStatus</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, library.o(i.BnrgmFrndMgmtGetSubscrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BnrgmFrndMgmtGetSubscrStatus &rArr; BnrgmFrndFnGetSubscrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnGetSubscrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendData
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkDecideRetransmission
</UL>

<P><STRONG><a name="[1b2]"></a>BnrgmFrndMgmtLpnInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndMgmtLpnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BnrgmFrndMgmtLpnInit &rArr; BnrgmFrndLpnInit &rArr; BnrgmPalCryptoInitFriendshipKeysP
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSetFeatures
</UL>

<P><STRONG><a name="[205]"></a>BnrgmFrndMgmtProcessNewPacket</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, library.o(i.BnrgmFrndMgmtProcessNewPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndUpdate
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndSubscrListConf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndRfu
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndOffer
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndSubscrListRem
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndSubscrListAdd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndRequest
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndPoll
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndClearConf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndClear
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransControl_ProcessUnSegCtrlReq
</UL>

<P><STRONG><a name="[206]"></a>BnrgmFrndMgmtQueLpnPkt</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, library.o(i.BnrgmFrndMgmtQueLpnPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BnrgmFrndMgmtQueLpnPkt &rArr; BnrgmFrndFnQueLpnPkt &rArr; BnrgmFrndFnGetSubscrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnQueLpnPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
</UL>

<P><STRONG><a name="[207]"></a>BnrgmFrndMgmtSendSecurityUpdate</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, library.o(i.BnrgmFrndMgmtSendSecurityUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BnrgmFrndMgmtSendSecurityUpdate &rArr; BnrgmFrndFnSendSecurityUpdate &rArr; BnrgmFrndFnInsertFriendUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendSecurityUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelConfigUpdateKRState
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSetIvIndex
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackIvUpdateSwitchToNormal
</UL>

<P><STRONG><a name="[1bc]"></a>BnrgmFrndMgmtSubscriptionListAdd</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, library.o(i.BnrgmFrndMgmtSubscriptionListAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BnrgmFrndMgmtSubscriptionListAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSubscriptionListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatSubscriptionSet
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetAdd
</UL>

<P><STRONG><a name="[209]"></a>BnrgmFrndMgmtSubscriptionListRemove</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, library.o(i.BnrgmFrndMgmtSubscriptionListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BnrgmFrndMgmtSubscriptionListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSubscriptionListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetRemove
</UL>

<P><STRONG><a name="[20b]"></a>BnrgmFrndMgmtSwitchKeys</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndMgmtSwitchKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BnrgmFrndMgmtSwitchKeys &rArr; BnrgmFrndFnSwitchKeys &rArr; BnrgmPalCryptoSwitchFriendshipKeys &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSwitchKeys
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSwitchKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelConfigUpdateKRState
</UL>

<P><STRONG><a name="[20c]"></a>BnrgmFrndMgmtTranspSegRecvd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndMgmtTranspSegRecvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndMgmtTranspSegRecvd &rArr; BnrgmFrndLpn_FSM &rArr; BnrgmFrndLpnSendFrndSubscrListRem &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
</UL>

<P><STRONG><a name="[20d]"></a>BnrgmFrndMgmtUpdateKeys</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, library.o(i.BnrgmFrndMgmtUpdateKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = BnrgmFrndMgmtUpdateKeys &rArr; BnrgmFrndFnUpdateKeys &rArr; BnrgmPalCryptoSetFriendshipKeys &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnUpdateKeys
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnUpdateKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyUpdate
</UL>

<P><STRONG><a name="[20e]"></a>BnrgmHealthModelAttentionTimerSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, library.o(i.BnrgmHealthModelAttentionTimerSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BnrgmHealthModelAttentionTimerSet &rArr; BnrgmHealthModelSetAttentionTimer &rArr; MoblePalTimerStart &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetAttentionTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_DeInit
</UL>

<P><STRONG><a name="[408]"></a>BnrgmHealthModelCreate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, library.o(i.BnrgmHealthModelCreate))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryInit
</UL>

<P><STRONG><a name="[210]"></a>BnrgmHealthModelInit</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, library.o(i.BnrgmHealthModelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BnrgmHealthModelInit &rArr; MobleApplicationAddModel
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationAddModel
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryInit
</UL>

<P><STRONG><a name="[1d6]"></a>BnrgmLibraryFnOnFriendshipCleared</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, library.o(i.BnrgmLibraryFnOnFriendshipCleared))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BnrgmLibraryFnOnFriendshipCleared
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_FnFriendshipClearedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndRequest
</UL>

<P><STRONG><a name="[1e6]"></a>BnrgmLibraryFnOnFriendshipEstablished</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, library.o(i.BnrgmLibraryFnOnFriendshipEstablished))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BnrgmLibraryFnOnFriendshipEstablished &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_FnFriendshipEstablishedCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
</UL>

<P><STRONG><a name="[201]"></a>BnrgmLibraryLpnOnFriendshipCleared</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, library.o(i.BnrgmLibraryLpnOnFriendshipCleared))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BnrgmLibraryLpnOnFriendshipCleared
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_LpnFriendshipClearedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[1a5]"></a>BnrgmLibrarySetAttentionTimerCallback</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, library.o(i.BnrgmLibrarySetAttentionTimerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SetAttentionTimerCallback
</UL>

<P><STRONG><a name="[221]"></a>BnrgmPalAdvStop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, library.o(i.BnrgmPalAdvStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = BnrgmPalAdvStop &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmProcess
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmBackupProcess
</UL>

<P><STRONG><a name="[223]"></a>BnrgmPalBluetoothModeStartAdv</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, library.o(i.BnrgmPalBluetoothModeStartAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = BnrgmPalBluetoothModeStartAdv &rArr; aci_gap_set_non_discoverable &rArr; GAP_Set_Non_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_data
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitStartAdv
</UL>

<P><STRONG><a name="[227]"></a>BnrgmPalBluetoothModeStartScan</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, library.o(i.BnrgmPalBluetoothModeStartScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = BnrgmPalBluetoothModeStartScan &rArr; aci_gap_start_observation_proc &rArr; aci_gap_start_observation_proc_api &rArr; GAP_Start_Observation_Procedure &rArr; LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_start_observation_proc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitStartScan
</UL>

<P><STRONG><a name="[229]"></a>BnrgmPalBluetoothModeStopAdv</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, library.o(i.BnrgmPalBluetoothModeStopAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BnrgmPalBluetoothModeStopAdv &rArr; aci_gap_set_non_discoverable &rArr; GAP_Set_Non_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[22a]"></a>BnrgmPalBluetoothModeStopScan</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, library.o(i.BnrgmPalBluetoothModeStopScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BnrgmPalBluetoothModeStopScan &rArr; aci_gap_terminate_gap_proc &rArr; aci_gap_terminate_gap_proc_api &rArr; GAP_Terminate_Gap_Procedure &rArr; LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate_gap_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[22c]"></a>BnrgmPalBluetoothModeUpdateAdv</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, library.o(i.BnrgmPalBluetoothModeUpdateAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = BnrgmPalBluetoothModeUpdateAdv
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitRadioActivityEndCallback
</UL>

<P><STRONG><a name="[22d]"></a>BnrgmPalBluetoothPrvnCmpltReset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, library.o(i.BnrgmPalBluetoothPrvnCmpltReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BnrgmPalBluetoothPrvnCmpltReset &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
</UL>

<P><STRONG><a name="[1e9]"></a>BnrgmPalBtGetAdvStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, library.o(i.BnrgmPalBtGetAdvStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnGetTxPendingStatus
</UL>

<P><STRONG><a name="[22e]"></a>BnrgmPalBtGetConnIntervalMs</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, library.o(i.BnrgmPalBtGetConnIntervalMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BnrgmPalBtGetConnIntervalMs &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[22f]"></a>BnrgmPalCryptoCalcNodeIdentityHash</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, library.o(i.BnrgmPalCryptoCalcNodeIdentityHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = BnrgmPalCryptoCalcNodeIdentityHash &rArr; MoblePalCryptoAesEcb &rArr; AES_ECB_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesEcb
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattBeaconGenerator
</UL>

<P><STRONG><a name="[231]"></a>BnrgmPalCryptoDecryptNetwork</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, library.o(i.BnrgmPalCryptoDecryptNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = BnrgmPalCryptoDecryptNetwork &rArr; MoblePalCryptoDecryptNetworkEx &rArr; MoblePalCryptoAesCcmDecrypt &rArr; AES_CCM_Decrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDecryptNetworkEx
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ProcessData
</UL>

<P><STRONG><a name="[1e4]"></a>BnrgmPalCryptoDeleteFriendshipKeys</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, library.o(i.BnrgmPalCryptoDeleteFriendshipKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BnrgmPalCryptoDeleteFriendshipKeys
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndClear
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
</UL>

<P><STRONG><a name="[1c9]"></a>BnrgmPalCryptoInitFriendshipKeysP</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, library.o(i.BnrgmPalCryptoInitFriendshipKeysP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BnrgmPalCryptoInitFriendshipKeysP
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnInit
</UL>

<P><STRONG><a name="[238]"></a>BnrgmPalCryptoMatchNid</STRONG> (Thumb, 272 bytes, Stack size 20 bytes, library.o(i.BnrgmPalCryptoMatchNid))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BnrgmPalCryptoMatchNid
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ProcessData
</UL>

<P><STRONG><a name="[1e3]"></a>BnrgmPalCryptoSetFriendshipKeys</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, library.o(i.BnrgmPalCryptoSetFriendshipKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = BnrgmPalCryptoSetFriendshipKeys &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK2
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnUpdateKeys
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndOffer
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnUpdateKeys
</UL>

<P><STRONG><a name="[1d7]"></a>BnrgmPalCryptoSetFriendshipNetKeyOffset</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, library.o(i.BnrgmPalCryptoSetFriendshipNetKeyOffset))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndRequest
</UL>

<P><STRONG><a name="[1e1]"></a>BnrgmPalCryptoSwitchFriendshipKeys</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, library.o(i.BnrgmPalCryptoSwitchFriendshipKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BnrgmPalCryptoSwitchFriendshipKeys &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSwitchKeys
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSwitchKeys
</UL>

<P><STRONG><a name="[45c]"></a>BnrgmProvision_UnprovisionedGetState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, library.o(i.BnrgmProvision_UnprovisionedGetState))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
</UL>

<P><STRONG><a name="[41a]"></a>BnrgmProxyConfig_AddProxyClient_Filter</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, library.o(i.BnrgmProxyConfig_AddProxyClient_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BnrgmProxyConfig_AddProxyClient_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
</UL>

<P><STRONG><a name="[249]"></a>BnrgmProxyConfig_CheckProxyFilter</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, library.o(i.BnrgmProxyConfig_CheckProxyFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BnrgmProxyConfig_CheckProxyFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_SendData
</UL>

<P><STRONG><a name="[236]"></a>BnrgmProxyConfig_ProcessData</STRONG> (Thumb, 224 bytes, Stack size 96 bytes, library.o(i.BnrgmProxyConfig_ProcessData))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = BnrgmProxyConfig_ProcessData &rArr; BnrgmProxyConfig_RemoveAddr_Filter &rArr; BnrgmProxyConfig_SendFilterStatus &rArr; BnrgmProxyConfig_SendData &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendFilterStatus
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_RemoveAddr_Filter
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_AddAddr_Filter
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoParseNetHdr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetProxyClientAddress
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ResetFilter
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoMatchNid
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoDecryptNetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_ProcessPacket
</UL>

<P><STRONG><a name="[23b]"></a>BnrgmProxyConfig_ResetFilter</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, library.o(i.BnrgmProxyConfig_ResetFilter))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ProcessData
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConnectionCallback
</UL>

<P><STRONG><a name="[240]"></a>BnrgmProxyProtocol_AddFragment</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, library.o(i.BnrgmProxyProtocol_AddFragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BnrgmProxyProtocol_AddFragment &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_ProcessPacket
</UL>

<P><STRONG><a name="[241]"></a>BnrgmProxyProtocol_DeInit</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, library.o(i.BnrgmProxyProtocol_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BnrgmProxyProtocol_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattOnConnectDisconnect
</UL>

<P><STRONG><a name="[242]"></a>BnrgmProxyProtocol_Init</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, library.o(i.BnrgmProxyProtocol_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BnrgmProxyProtocol_Init &rArr; MoblePalTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattOnConnectDisconnect
</UL>

<P><STRONG><a name="[243]"></a>BnrgmProxyProtocol_Notify</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, library.o(i.BnrgmProxyProtocol_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = BnrgmProxyProtocol_Notify &rArr; MoblePalGattSendNotification &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattSendNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_SendData
</UL>

<P><STRONG><a name="[245]"></a>BnrgmProxyProtocol_ProcessPacket</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, library.o(i.BnrgmProxyProtocol_ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1348 + Unknown Stack Size
<LI>Call Chain = BnrgmProxyProtocol_ProcessPacket &rArr; MobleStackProcessData &rArr; MobleNetworkProcessData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_ProcessPacket
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStop
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_AddFragment
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ProcessData
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessBeacon
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattWriteCallback
</UL>

<P><STRONG><a name="[23f]"></a>BnrgmProxyProtocol_SendData</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, library.o(i.BnrgmProxyProtocol_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = BnrgmProxyProtocol_SendData &rArr; BnrgmProxyProtocol_Notify &rArr; MoblePalGattSendNotification &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_Notify
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_CheckProxyFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendData
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_Transmit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSendBeaconOverGatt
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSendData
</UL>

<P><STRONG><a name="[5]"></a>BnrgmProxyProtocol_SetDataInCharacteristic</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, library.o(i.BnrgmProxyProtocol_SetDataInCharacteristic))
<BR>[Address Reference Count : 2]<UL><LI> library.o(.data)
<LI> library.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>BnrgmProxyProtocol_SetDataOutCharacteristic</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, library.o(i.BnrgmProxyProtocol_SetDataOutCharacteristic))
<BR>[Address Reference Count : 2]<UL><LI> library.o(.data)
<LI> library.o(.data)
</UL>
<P><STRONG><a name="[23d]"></a>BnrgmStackConsumeSeqNo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, library.o(i.BnrgmStackConsumeSeqNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BnrgmStackConsumeSeqNo &rArr; MobleNetworkSaveSeqNum &rArr; MobleConfigSaveSeq &rArr; MobleConfigSave &rArr; MoblePalNvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSaveSeqNum
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendData
</UL>

<P><STRONG><a name="[23]"></a>BnrgmStackDummyProxyModeTimerCallback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, library.o(i.BnrgmStackDummyProxyModeTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = BnrgmStackDummyProxyModeTimerCallback &rArr; MoblePalBluetoothGracefulReset &rArr; MobleBtReset &rArr; hci_reset &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetConnectionState
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothGracefulReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.BnrgmStackSetDummyProxyModeState)
</UL>
<P><STRONG><a name="[1ff]"></a>BnrgmStackGetSubscriptionList</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, library.o(i.BnrgmStackGetSubscriptionList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BnrgmStackGetSubscriptionList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[24]"></a>BnrgmStackNodeIdentityTimerCallback</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, library.o(i.BnrgmStackNodeIdentityTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BnrgmStackNodeIdentityTimerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelSetNodeIdentity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.BnrgmStackSetNodeIdentityState)
</UL>
<P><STRONG><a name="[24e]"></a>BnrgmStackSendBeaconOverGatt</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, library.o(i.BnrgmStackSendBeaconOverGatt))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = BnrgmStackSendBeaconOverGatt &rArr; MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetSecurityKeys
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_KR_UseNewKeyEnc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetSecure
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSetIvIndex
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackIvUpdateSwitchToNormal
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConnectionCallback
</UL>

<P><STRONG><a name="[1c3]"></a>BnrgmStackSendFrndClear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, library.o(i.BnrgmStackSendFrndClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = BnrgmStackSendFrndClear &rArr; BnrgmFrndFnSendFrndClear &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendFrndClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnClear_TimerCallback
</UL>

<P><STRONG><a name="[251]"></a>BnrgmStackSetDummyProxyModeState</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, library.o(i.BnrgmStackSetDummyProxyModeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BnrgmStackSetDummyProxyModeState &rArr; MoblePalTimerStartOnce &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>

<P><STRONG><a name="[252]"></a>BnrgmStackSetNodeIdentityState</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, library.o(i.BnrgmStackSetNodeIdentityState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BnrgmStackSetNodeIdentityState &rArr; MoblePalTimerStartOnce &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStop
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelSetNodeIdentity
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeIdentitySet
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>

<P><STRONG><a name="[239]"></a>BnrgmStackSetProxyClientAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, library.o(i.BnrgmStackSetProxyClientAddress))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattOnConnectDisconnect
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ProcessData
</UL>

<P><STRONG><a name="[1fd]"></a>BnrgmStackStartLpnScan</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, library.o(i.BnrgmStackStartLpnScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BnrgmStackStartLpnScan &rArr; BnrgmTransmitStartLpnScan &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitStartLpnScan
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[254]"></a>BnrgmTransControlProcessHeartbeat</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, library.o(i.BnrgmTransControlProcessHeartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BnrgmTransControlProcessHeartbeat &rArr; MobleInputStreamGetBigEndian
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransControl_ProcessUnSegCtrlReq
</UL>

<P><STRONG><a name="[255]"></a>BnrgmTransmitChangeRegularlyGeneratedInterval</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, library.o(i.BnrgmTransmitChangeRegularlyGeneratedInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BnrgmTransmitChangeRegularlyGeneratedInterval &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStop
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFastAdvTimeoutTimerCallback
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackCreateStartFastAdvTimer
</UL>

<P><STRONG><a name="[222]"></a>BnrgmTransmitFsm</STRONG> (Thumb, 510 bytes, Stack size 24 bytes, library.o(i.BnrgmTransmitFsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetConnectionState
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitStartScan
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitStartAdv
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueuePrepNextItem
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueueInit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueueAlign
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBtGetConnIntervalMs
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStopScan
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStopAdv
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerDiff_ms_sysT32
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalAdvStop
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitStopLpnScan
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitStartLpnScan
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitSetAutoScanState
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitRadioActivityEndCallback
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitSuspendAll
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitResumeAll
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitInit
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcess
</UL>

<P><STRONG><a name="[1e8]"></a>BnrgmTransmitIsQueEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, library.o(i.BnrgmTransmitIsQueEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnGetTxPendingStatus
</UL>

<P><STRONG><a name="[25f]"></a>BnrgmTransmitQueDecreasePktCount</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, library.o(i.BnrgmTransmitQueDecreasePktCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BnrgmTransmitQueDecreasePktCount
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitRadioActivityEndCallback
</UL>

<P><STRONG><a name="[25b]"></a>BnrgmTransmitQueueAlign</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, library.o(i.BnrgmTransmitQueueAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BnrgmTransmitQueueAlign &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[258]"></a>BnrgmTransmitQueueInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, library.o(i.BnrgmTransmitQueueInit))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[256]"></a>BnrgmTransmitQueuePrepNextItem</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, library.o(i.BnrgmTransmitQueuePrepNextItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BnrgmTransmitQueuePrepNextItem &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitRadioActivityEndCallback
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[261]"></a>BnrgmTransmitQueuePush</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, library.o(i.BnrgmTransmitQueuePush))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BnrgmTransmitQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitNow
</UL>

<P><STRONG><a name="[3d]"></a>BnrgmTransmitRadioActivityEndCallback</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, library.o(i.BnrgmTransmitRadioActivityEndCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BnrgmTransmitRadioActivityEndCallback &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueuePrepNextItem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueDecreasePktCount
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeUpdateAdv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleTransmitInit)
</UL>
<P><STRONG><a name="[262]"></a>BnrgmTransmitSend</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, library.o(i.BnrgmTransmitSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BnrgmTransmitSend &rArr; MobleTransmitNow &rArr; BnrgmTransmitQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitNow
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSendData
</UL>

<P><STRONG><a name="[264]"></a>BnrgmTransmitSetAutoScanState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, library.o(i.BnrgmTransmitSetAutoScanState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = BnrgmTransmitSetAutoScanState &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryInit
</UL>

<P><STRONG><a name="[25a]"></a>BnrgmTransmitStartAdv</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, library.o(i.BnrgmTransmitStartAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = BnrgmTransmitStartAdv &rArr; BnrgmPalBluetoothModeStartAdv &rArr; aci_gap_set_non_discoverable &rArr; GAP_Set_Non_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStartAdv
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[253]"></a>BnrgmTransmitStartLpnScan</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, library.o(i.BnrgmTransmitStartLpnScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = BnrgmTransmitStartLpnScan &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackStartLpnScan
</UL>

<P><STRONG><a name="[257]"></a>BnrgmTransmitStartScan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, library.o(i.BnrgmTransmitStartScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = BnrgmTransmitStartScan &rArr; BnrgmPalBluetoothModeStartScan &rArr; aci_gap_start_observation_proc &rArr; aci_gap_start_observation_proc_api &rArr; GAP_Start_Observation_Procedure &rArr; LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStartScan
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[1fe]"></a>BnrgmTransmitStopLpnScan</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, library.o(i.BnrgmTransmitStopLpnScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = BnrgmTransmitStopLpnScan &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[265]"></a>Build_Notif_Or_Ind</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, gatt_server.o(i.Build_Notif_Or_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Build_Notif_Or_Ind &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>

<P><STRONG><a name="[266]"></a>CheckSecForSignedWrite</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, att.o(i.CheckSecForSignedWrite))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[2d0]"></a>Check_Encry_Key_Size</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Check_Encry_Key_Size))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
</UL>

<P><STRONG><a name="[267]"></a>Check_For_Service_Change</STRONG> (Thumb, 826 bytes, Stack size unknown bytes, gatt_server.o(i.Check_For_Service_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Check_For_Service_Change &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_fetch_handle
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[159]"></a>Check_Permission</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, att.o(i.Check_Permission))
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Check_Encryption_KeySize
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Link_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
</UL>

<P><STRONG><a name="[2ff]"></a>Chk_OptionalParamValidity</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, common.o(i.Chk_OptionalParamValidity))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[301]"></a>Chk_ParamMinMaxValidity</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, common.o(i.Chk_ParamMinMaxValidity))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_ProcessMessageCb
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[2fe]"></a>Chk_ParamValidity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common.o(i.Chk_ParamValidity))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[36b]"></a>Chk_RangeValidity</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, common.o(i.Chk_RangeValidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chk_RangeValidity
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[320]"></a>Clock_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clock.o(i.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clock_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[14b]"></a>Clock_Time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.Clock_Time))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsSendDelayedPacket
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsDelayPacket
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_CheckForUnprovision
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorModelServer_ProcessMessageCb
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_ProcessMessageCb
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Vendor_LEDControl
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_TransitionBehaviourSingle_Param
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_TransitionBehaviourSingle_Param
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_TransitionBehaviourMulti_Param
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_Init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_ProvisionerNode_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerSetup
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerProcess
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcessDisconnection
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcess
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothGracefulReset
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkUpdateNeighbours
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueuePrepNextItem
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueDecreasePktCount
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothPrvnCmpltReset
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSetLpState
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessIvUpdate
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
</UL>

<P><STRONG><a name="[151]"></a>Clock_Wait</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock.o(i.Clock_Wait))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_LedBlink
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[161]"></a>Controller_Process_Q</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, hci.o(i.Controller_Process_Q))
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Offline_Processing_ucfg
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8OfflineProcessing_ucfg
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnection_Offline_Processing
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Len_Update_Offline_Processing_ucfg
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[1c]"></a>DMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.DMA_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[272]"></a>Data_Len_Update_Offline_Processing_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_routines.o(i.Data_Len_Update_Offline_Processing_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[584]"></a>Data_Length_Update_Control_ISR_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_isr.o(i.Data_Length_Update_Control_ISR_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_master_state
</UL>

<P><STRONG><a name="[595]"></a>Delay_With_NOP_Cycles</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, utils.o(i.Delay_With_NOP_Cycles))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_write_record
</UL>

<P><STRONG><a name="[274]"></a>DeviceConfiguration</STRONG> (Thumb, 312 bytes, Stack size 72 bytes, system_bluenrg1.o(i.DeviceConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetPartInfo
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RF_FrontEnd
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOR_ConfigSave
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[273]"></a>Disconnection_Offline_Processing</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, ll_routines.o(i.Disconnection_Offline_Processing))
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_Disconnection_Req
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[177]"></a>Dynamic_allocator</STRONG> (Thumb, 594 bytes, Stack size unknown bytes, mem_alloc.o(i.Dynamic_allocator))
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_check
</UL>

<P><STRONG><a name="[178]"></a>Dynamic_allocator_noRet</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, mem_alloc.o(i.Dynamic_allocator_noRet))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_check
</UL>

<P><STRONG><a name="[162]"></a>Events_Process_Q</STRONG> (Thumb, 258 bytes, Stack size unknown bytes, aci_events.o(i.Events_Process_Q))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_hardware_error_event
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[175]"></a>Events_Process_init</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, aci_events.o(i.Events_Process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Events_Process_init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoCtrl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[280]"></a>Exchg_Mtu_Resp</STRONG> (Thumb, 174 bytes, Stack size unknown bytes, att.o(i.Exchg_Mtu_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Exchg_Mtu_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[281]"></a>Exec_Write_Resp</STRONG> (Thumb, 440 bytes, Stack size unknown bytes, att.o(i.Exec_Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Exec_Write_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_validate_prepare_req
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[27a]"></a>FLASH_ErasePage</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, bluenrg1_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitCmdDone
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmProcess
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmBackupProcess
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Sector
</UL>

<P><STRONG><a name="[451]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bluenrg1_flash.o(i.FLASH_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmProcess
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmBackupProcess
</UL>

<P><STRONG><a name="[288]"></a>FLASH_ProgramWord</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, bluenrg1_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitCmdDone
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmProcess
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_invalidate_record
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Flagged
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Flash_Store_Data
</UL>

<P><STRONG><a name="[289]"></a>FLASH_ProgramWordBurst</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, bluenrg1_flash.o(i.FLASH_ProgramWordBurst))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_ProgramWordBurst
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitCmdDone
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmProcess
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmBackupProcess
</UL>

<P><STRONG><a name="[287]"></a>FLASH_WaitCmdDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bluenrg1_flash.o(i.FLASH_WaitCmdDone))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordBurst
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[26b]"></a>Find_Attr_Index</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, gatt_server.o(i.Find_Attr_Index))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[28a]"></a>Find_By_Type_Val_Resp</STRONG> (Thumb, 484 bytes, Stack size unknown bytes, att.o(i.Find_By_Type_Val_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Find_By_Type_Val_Resp &rArr; PM_Pckt_Cmp &rArr; Mem_Buff_Cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_type_val_entry
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[26a]"></a>Find_Gatt_Client</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gatt_client.o(i.Find_Gatt_Client))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_and_find_gatt_client
</UL>

<P><STRONG><a name="[28d]"></a>Find_Info_Resp</STRONG> (Thumb, 488 bytes, Stack size unknown bytes, att.o(i.Find_Info_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Find_Info_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[2c7]"></a>Find_Timed_Out_Connection</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, gatt_server.o(i.Find_Timed_Out_Connection))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_TimeOut_Handler
</UL>

<P><STRONG><a name="[28e]"></a>Flash_Write_Flagged</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, nvm.o(i.Flash_Write_Flagged))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = Flash_Write_Flagged &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_write_record
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[28f]"></a>GAP_Connection_Complete_Handler</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, gap.o(i.GAP_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>

<P><STRONG><a name="[291]"></a>GAP_Delete_ADType</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, rom_gap_rom.o(i.GAP_Delete_ADType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_Delete_ADType &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Adv_Data
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
</UL>

<P><STRONG><a name="[294]"></a>GAP_DiscProcTimeoutcb</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, gap.o(i.GAP_DiscProcTimeoutcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAP_DiscProcTimeoutcb &rArr; LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb_ucfg
</UL>

<P><STRONG><a name="[296]"></a>GAP_DiscProcTimeoutcb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.GAP_DiscProcTimeoutcb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = GAP_DiscProcTimeoutcb_ucfg &rArr; GAP_DiscProcTimeoutcb &rArr; LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[297]"></a>GAP_Init</STRONG> (Thumb, 488 bytes, Stack size unknown bytes, gap.o(i.GAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAP_Init &rArr; Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_and_set_role_ucfg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_enable_controller_privacy_ucfg
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StaticRandAddr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
</UL>

<P><STRONG><a name="[172]"></a>GAP_Init_Context</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gap.o(i.GAP_Init_Context))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[29f]"></a>GAP_Internal_Evt_Handler</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, gap.o(i.GAP_Internal_Evt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_Internal_Evt_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Check_Not_Error_Resp
</UL>

<P><STRONG><a name="[2a0]"></a>GAP_LL_Event_Handler_ISR</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, gap.o(i.GAP_LL_Event_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GAP_Parse_Advertising_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_enhanced_connection_complete_event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_direct_advertising_report_event
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_connection_complete_event
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_advertising_report_event
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_disconnection_complete_event
</UL>

<P><STRONG><a name="[2a2]"></a>GAP_LimDiscTimeoutcb</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gap.o(i.GAP_LimDiscTimeoutcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAP_LimDiscTimeoutcb &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb_ucfg
</UL>

<P><STRONG><a name="[2a5]"></a>GAP_LimDiscTimeoutcb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.GAP_LimDiscTimeoutcb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = GAP_LimDiscTimeoutcb_ucfg &rArr; GAP_LimDiscTimeoutcb &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[2a6]"></a>GAP_Notify_Add_Charac</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, rom_gap_rom.o(i.GAP_Notify_Add_Charac))
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Valid_Records
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
</UL>

<P><STRONG><a name="[2a9]"></a>GAP_Privacy1v2</STRONG> (Thumb, 466 bytes, Stack size unknown bytes, rom_gap.o(i.GAP_Privacy1v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = GAP_Privacy1v2 &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_ScanAddress
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_AdvAddress
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Start_Observation_Procedure
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[2b1]"></a>GAP_PrivateAddrTimercb</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, rom_gap.o(i.GAP_PrivateAddrTimercb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = GAP_PrivateAddrTimercb &rArr; GAP_Privacy1v2 &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[165]"></a>GAP_Process_Q</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, gap.o(i.GAP_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = GAP_Process_Q &rArr; GAP_discover_peer_name_ucfg &rArr; GAP_discover_peer_name &rArr; Gatt_Read_Charac_By_Uuid &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_discover_peer_name_ucfg
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[2b5]"></a>GAP_Set_Discoverable_Mode</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gap.o(i.GAP_Set_Discoverable_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAP_Set_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>

<P><STRONG><a name="[2b7]"></a>GAP_Set_Non_Discoverable_Mode</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gap.o(i.GAP_Set_Non_Discoverable_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAP_Set_Non_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
</UL>

<P><STRONG><a name="[2b8]"></a>GAP_Start_Observation_Procedure</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, gap.o(i.GAP_Start_Observation_Procedure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAP_Start_Observation_Procedure &rArr; LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Scan_Params
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_start_observation_proc_api
</UL>

<P><STRONG><a name="[2ec]"></a>GAP_Started_Gatt_Proc</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gap.o(i.GAP_Started_Gatt_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[2ba]"></a>GAP_Terminate_Gap_Procedure</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, gap.o(i.GAP_Terminate_Gap_Procedure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAP_Terminate_Gap_Procedure &rArr; LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Create_Connection_Cancel
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate_gap_proc_api
</UL>

<P><STRONG><a name="[2bc]"></a>GAP_check_and_set_role</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gap.o(i.GAP_check_and_set_role))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_and_set_role_ucfg
</UL>

<P><STRONG><a name="[29a]"></a>GAP_check_and_set_role_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.GAP_check_and_set_role_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAP_check_and_set_role_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_and_set_role
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[2bd]"></a>GAP_discover_peer_name</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gap.o(i.GAP_discover_peer_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAP_discover_peer_name &rArr; Gatt_Read_Charac_By_Uuid &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_discover_peer_name_ucfg
</UL>

<P><STRONG><a name="[2b4]"></a>GAP_discover_peer_name_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.GAP_discover_peer_name_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = GAP_discover_peer_name_ucfg &rArr; GAP_discover_peer_name &rArr; Gatt_Read_Charac_By_Uuid &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_discover_peer_name
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
</UL>

<P><STRONG><a name="[29b]"></a>GAP_enable_controller_privacy_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap.o(i.GAP_enable_controller_privacy_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[2bf]"></a>GATT_Connection_Complete_Handler</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, gatt_server.o(i.GATT_Connection_Complete_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
</UL>

<P><STRONG><a name="[2a7]"></a>GATT_Num_Charac_Present</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, rom_gatt_server.o(i.GATT_Num_Charac_Present))
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GAP_Handle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_service_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
</UL>

<P><STRONG><a name="[2c3]"></a>GATT_Send_Packet</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gatt_server.o(i.GATT_Send_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[2c6]"></a>GATT_TimeOut_Handler</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, gatt_server.o(i.GATT_TimeOut_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Timed_Out_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[2cb]"></a>GPIO_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonClearITPendingBit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>

<P><STRONG><a name="[324]"></a>GPIO_EXTICmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_EXTICmd))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[323]"></a>GPIO_EXTIConfig</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_EXTIConfig))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[2ca]"></a>GPIO_GetITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_GetITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonGetITPendingBit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>

<P><STRONG><a name="[d]"></a>GPIO_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bluenrg1_it.o(i.GPIO_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Handler &rArr; SdkEvalPushButtonGetITPendingBit &rArr; Get_ButtonGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonGetITPendingBit
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonClearITPendingBit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetITPendingBit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[492]"></a>GPIO_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bluenrg1_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_PWM
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[4f0]"></a>GPIO_ReadBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_ReadBit))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonGetState
</UL>

<P><STRONG><a name="[493]"></a>GPIO_WriteBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_PWM
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOn
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOff
</UL>

<P><STRONG><a name="[59c]"></a>GapIsPrivacySupported</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rom_gap.o(i.GapIsPrivacySupported))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2cc]"></a>Gatt_Add_Charac_Desc</STRONG> (Thumb, 346 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Charac_Desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_service_handle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
</UL>

<P><STRONG><a name="[29d]"></a>Gatt_Add_Characteristic</STRONG> (Thumb, 812 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Characteristic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Characteristic &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GAP_Handle
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Encry_Key_Size
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_service_handle
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[2cf]"></a>Gatt_Add_Descriptor</STRONG> (Thumb, 332 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Descriptor &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Encry_Key_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[29c]"></a>Gatt_Add_Service</STRONG> (Thumb, 338 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Service &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
</UL>

<P><STRONG><a name="[4bc]"></a>Gatt_Find_Srv_From_Handle</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Find_Srv_From_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
</UL>

<P><STRONG><a name="[134]"></a>Gatt_Find_Srv_Owner_Of_Handle</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Find_Srv_Owner_Of_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_validate_prepare_req
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
</UL>

<P><STRONG><a name="[2e1]"></a>Gatt_Find_Timed_Out_Connection_Index</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Find_Timed_Out_Connection_Index))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[166]"></a>Gatt_Process_Q</STRONG> (Thumb, 404 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_Process_Q &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_head
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_is_empty
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Forget_Device_by_ConnHandle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Is_Device_Bonded
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Available_Buffer
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[2be]"></a>Gatt_Read_Charac_By_Uuid</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, gatt_client.o(i.Gatt_Read_Charac_By_Uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_Read_Charac_By_Uuid &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Typ_Req_Pdu
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_and_find_gatt_client
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_discover_peer_name
</UL>

<P><STRONG><a name="[2cd]"></a>Gatt_Server_Db_Check</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_Db_Check))
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Available_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[2e3]"></a>Gatt_Server_Init</STRONG> (Thumb, 384 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_Server_Init &rArr; Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
</UL>

<P><STRONG><a name="[2e5]"></a>Gatt_Server_L2C_Handler</STRONG> (Thumb, 508 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_L2C_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[2e9]"></a>Gatt_Server_L2C_Handler_ISR</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_L2C_Handler_ISR))
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Complete_Handler
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[29e]"></a>Gatt_Update_Charac_Value</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Update_Charac_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_service_handle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
</UL>

<P><STRONG><a name="[2f4]"></a>Gatt_Update_Charac_Value_Ext</STRONG> (Thumb, 900 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Update_Charac_Value_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_service_handle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_Notif_Or_Ind
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
</UL>

<P><STRONG><a name="[269]"></a>Gatt_fetch_handle</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_fetch_handle))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[135]"></a>Gatt_search_handle</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_search_handle))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_validate_prepare_req
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[2c2]"></a>Gatt_search_service_handle</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_search_service_handle))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[2ad]"></a>Generate_Non_Resolvable_Private_Address</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, rom_gap.o(i.Generate_Non_Resolvable_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Generate_Non_Resolvable_Private_Address &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[30d]"></a>GenericLevelStateUpdate_Process</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, generic.o(i.GenericLevelStateUpdate_Process))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Process
</UL>

<P><STRONG><a name="[2f7]"></a>GenericLevel_CtlTempBinding</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, generic.o(i.GenericLevel_CtlTempBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GenericLevel_CtlTempBinding &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Level_Set
</UL>

<P><STRONG><a name="[2f8]"></a>GenericLevel_HslHueBinding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, generic.o(i.GenericLevel_HslHueBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GenericLevel_HslHueBinding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Level_Set
</UL>

<P><STRONG><a name="[2f9]"></a>GenericLevel_HslSaturationBinding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, generic.o(i.GenericLevel_HslSaturationBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GenericLevel_HslSaturationBinding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Level_Set
</UL>

<P><STRONG><a name="[2fa]"></a>GenericLevel_LightActualBinding</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, generic.o(i.GenericLevel_LightActualBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GenericLevel_LightActualBinding &rArr; Light_Actual_LinearBinding &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_LinearBinding
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Level_Set
</UL>

<P><STRONG><a name="[4f]"></a>GenericModelServer_GetOpcodeTableCb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, generic.o(i.GenericModelServer_GetOpcodeTableCb))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>GenericModelServer_GetStatusRequestCb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, generic.o(i.GenericModelServer_GetStatusRequestCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GenericModelServer_GetStatusRequestCb &rArr; Generic_OnOff_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_OnOff_Status
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Level_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>GenericModelServer_ProcessMessageCb</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, generic.o(i.GenericModelServer_ProcessMessageCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1708 + Unknown Stack Size
<LI>Call Chain = GenericModelServer_ProcessMessageCb &rArr; Generic_SendResponse &rArr; MobleLibraryGenericSendResponse &rArr; MobleGenericModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_SendResponse
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_ParamValidity
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_ParamMinMaxValidity
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_OptionalParamValidity
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_OnOff_Set
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Level_Set
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_LevelMove_Set
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_LevelDelta_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>GenericModel_Add_Server</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, library.o(i.GenericModel_Add_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GenericModel_Add_Server &rArr; MobleApplicationAddModel
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationAddModel
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_AddGenericModels
</UL>

<P><STRONG><a name="[30b]"></a>GenericOnOffStateUpdate_Process</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, generic.o(i.GenericOnOffStateUpdate_Process))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Process
</UL>

<P><STRONG><a name="[306]"></a>GenericOnOff_LightActualBinding</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, generic.o(i.GenericOnOff_LightActualBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GenericOnOff_LightActualBinding &rArr; Light_Linear_ActualImplicitBinding &rArr; Light_Actual_LinearBinding &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualImplicitBinding
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_OnOff_Set
</UL>

<P><STRONG><a name="[308]"></a>Generic_GetStepValue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, generic.o(i.Generic_GetStepValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Generic_GetStepValue
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StepResolutionValue
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_OnOff_Set
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Level_Set
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_LevelMove_Set
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_LevelDelta_Set
</UL>

<P><STRONG><a name="[303]"></a>Generic_LevelDelta_Set</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, generic.o(i.Generic_LevelDelta_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Generic_LevelDelta_Set &rArr; Generic_GetStepValue
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_GetStepValue
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[304]"></a>Generic_LevelMove_Set</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, generic.o(i.Generic_LevelMove_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Generic_LevelMove_Set &rArr; Generic_GetStepValue
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_GetStepValue
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[302]"></a>Generic_Level_Set</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, generic.o(i.Generic_Level_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Generic_Level_Set &rArr; GenericLevel_LightActualBinding &rArr; Light_Actual_LinearBinding &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_GetStepValue
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericLevel_LightActualBinding
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericLevel_HslSaturationBinding
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericLevel_HslHueBinding
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericLevel_CtlTempBinding
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[2fd]"></a>Generic_Level_Status</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, generic.o(i.Generic_Level_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Generic_Level_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_GetStatusRequestCb
</UL>

<P><STRONG><a name="[300]"></a>Generic_OnOff_Set</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, generic.o(i.Generic_OnOff_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Generic_OnOff_Set &rArr; GenericOnOff_LightActualBinding &rArr; Light_Linear_ActualImplicitBinding &rArr; Light_Actual_LinearBinding &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_GetStepValue
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericOnOff_LightActualBinding
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[2fc]"></a>Generic_OnOff_Status</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, generic.o(i.Generic_OnOff_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Generic_OnOff_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_GetStatusRequestCb
</UL>

<P><STRONG><a name="[19c]"></a>Generic_Process</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, generic.o(i.Generic_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Generic_Process &rArr; Generic_TransitionBehaviourMulti_Param &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_TransitionBehaviourSingle_Param
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_TransitionBehaviourMulti_Param
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericOnOffStateUpdate_Process
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericLevelStateUpdate_Process
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsProcess
</UL>

<P><STRONG><a name="[305]"></a>Generic_SendResponse</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, library.o(i.Generic_SendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668 + Unknown Stack Size
<LI>Call Chain = Generic_SendResponse &rArr; MobleLibraryGenericSendResponse &rArr; MobleGenericModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryGenericSendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[30c]"></a>Generic_TransitionBehaviourMulti_Param</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, generic.o(i.Generic_TransitionBehaviourMulti_Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Generic_TransitionBehaviourMulti_Param &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Process
</UL>

<P><STRONG><a name="[30a]"></a>Generic_TransitionBehaviourSingle_Param</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, generic.o(i.Generic_TransitionBehaviourSingle_Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Generic_TransitionBehaviourSingle_Param
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_Process
</UL>

<P><STRONG><a name="[149]"></a>GetButtonState</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal.o(i.GetButtonState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetButtonState &rArr; SdkEvalPushButtonGetState &rArr; Get_ButtonGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_CheckForUnprovision
</UL>

<P><STRONG><a name="[310]"></a>Get_ButtonGpioPin</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdk_eval_button.o(i.Get_ButtonGpioPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_ButtonGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonGetState
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonGetITPendingBit
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalPushButtonClearITPendingBit
</UL>

<P><STRONG><a name="[312]"></a>Get_CrashHandlerInfo</STRONG> (Thumb, 14 bytes, Stack size 48 bytes, miscutil.o(i.Get_CrashHandlerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Get_CrashHandlerInfo &rArr; HAL_GetCrashInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetCrashInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c1]"></a>Get_GAP_Handle</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, rom_gap_rom.o(i.Get_GAP_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
</UL>

<P><STRONG><a name="[314]"></a>Get_LedGpioPin</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sdk_eval_led.o(i.Get_LedGpioPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOn
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOff
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
</UL>

<P><STRONG><a name="[299]"></a>Get_StaticRandAddr</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rom_gap_rom.o(i.Get_StaticRandAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Get_StaticRandAddr &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_local_identity_address
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[309]"></a>Get_StepResolutionValue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, common.o(i.Get_StepResolutionValue))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_GetStepValue
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_GetStepValue
</UL>

<P><STRONG><a name="[315]"></a>HAL_CrashHandler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, miscutil.o(i.HAL_CrashHandler))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[316]"></a>HAL_Flash_Store_Data</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, hal.o(i.HAL_Flash_Store_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = HAL_Flash_Store_Data &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[317]"></a>HAL_Generate_Random_Bytes_To</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, hal.o(i.HAL_Generate_Random_Bytes_To))
<BR><BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_MI_excerpt
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[313]"></a>HAL_GetCrashInfo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, miscutil.o(i.HAL_GetCrashInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GetCrashInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CrashHandlerInfo
</UL>

<P><STRONG><a name="[15d]"></a>HAL_GetPartInfo</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, miscutil.o(i.HAL_GetPartInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetPartInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_get_part_info
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
</UL>

<P><STRONG><a name="[318]"></a>HAL_Read_ConfigData</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, hal.o(i.HAL_Read_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = HAL_Read_ConfigData &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_read_config_data
</UL>

<P><STRONG><a name="[50b]"></a>HAL_Set_TX_Power_Level</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, hal.o(i.HAL_Set_TX_Power_Level))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[4fc]"></a>HAL_VTimerAcc_sysT32_ms</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerAcc_sysT32_ms))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>

<P><STRONG><a name="[25d]"></a>HAL_VTimerDiff_ms_sysT32</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerDiff_ms_sysT32))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetIsFlashEraseOk
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[25c]"></a>HAL_VTimerGetCurrentTime_sysT32</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerGetCurrentTime_sysT32))
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetIsFlashEraseOk
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_vInit_Struct
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[4f8]"></a>HAL_VTimerTimeoutCallback</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerTimeoutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[173]"></a>HCI_Init</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, hci.o(i.HCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = HCI_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[2f6]"></a>Hal_Get_Random_Number</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, hal.o(i.Hal_Get_Random_Number))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Random_data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
</UL>

<P><STRONG><a name="[31a]"></a>Hal_Get_Random_Number32</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, hal.o(i.Hal_Get_Random_Number32))
<BR><BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
</UL>

<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg1_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CrashHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.I2C1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[14]"></a>I2C2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.I2C2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[298]"></a>IDD_Initialize_Device_IDs</STRONG> (Thumb, 278 bytes, Stack size unknown bytes, device_id_data.o(i.IDD_Initialize_Device_IDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = IDD_Initialize_Device_IDs &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Buffer_All_Set_To
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Flash_Store_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[26c]"></a>Ind_Service_Change_Charac</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, gatt_server.o(i.Ind_Service_Change_Charac))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[31c]"></a>InitDevice</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, hal.o(i.InitDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = InitDevice &rArr; SystemInit &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepCmd
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalIdentification
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOConfig
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTIConfig
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTICmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Wait
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[341]"></a>Is_Address_Initialized</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.Is_Address_Initialized))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
</UL>

<P><STRONG><a name="[4b6]"></a>Is_Flash_Write_On_Going</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, nvm.o(i.Is_Flash_Write_On_Going))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[326]"></a>L2C_Build_Command_Reject_Pdu</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Build_Command_Reject_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = L2C_Build_Command_Reject_Pdu &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
</UL>

<P><STRONG><a name="[328]"></a>L2C_Build_Connect_Update_Req</STRONG> (Thumb, 238 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Build_Connect_Update_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = L2C_Build_Connect_Update_Req &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_req
</UL>

<P><STRONG><a name="[329]"></a>L2C_Connection_Complete_Handler</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_Connection_Complete_Handler &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[32c]"></a>L2C_Connection_Complete_Signal_Handler</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Connection_Complete_Signal_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
</UL>

<P><STRONG><a name="[334]"></a>L2C_Get_PDU_Len</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Get_PDU_Len))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[170]"></a>L2C_Init</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Init))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[336]"></a>L2C_Rcv_Event_Handler</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Rcv_Event_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = L2C_Rcv_Event_Handler &rArr; L2C_Rcv_Data &rArr; L2C_Mux_Acl_Packet &rArr; SM_L2CAP_Handler &rArr; smp_Keys_Distribution_Complete &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_acl_data_tx_cmpl_event
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_acl_data_ind_event
</UL>

<P><STRONG><a name="[337]"></a>L2C_Rcv_Event_Handler_ISR</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Rcv_Event_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_Rcv_Event_Handler_ISR &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_long_term_key_request_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_enhanced_connection_complete_event
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_connection_complete_event
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_encryption_key_refresh_complete_event
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_encryption_change_event
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_disconnection_complete_event
</UL>

<P><STRONG><a name="[2c4]"></a>L2C_Send_Data</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Connect_Update_Req
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_2octets_packet_send
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
</UL>

<P><STRONG><a name="[33b]"></a>L2C_SigChan_Req_TimeOut_Handler</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, l2cap.o(i.L2C_SigChan_Req_TimeOut_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[32e]"></a>L2C_Signal_Channel_Handler</STRONG> (Thumb, 422 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Signal_Channel_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = L2C_Signal_Channel_Handler &rArr; L2C_Build_Command_Reject_Pdu &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_push
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection_Info_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[32b]"></a>L2C_Signal_Channel_Handler_ISR</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Signal_Channel_Handler_ISR))
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Signal_Handler
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Reset_To_Closed_State
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[2aa]"></a>LL_Allow_Address_Setting</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Allow_Address_Setting))
<BR><BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[33e]"></a>LL_Cancel_Connection_Req</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, rom_ll_ll_routines_master.o(i.LL_Cancel_Connection_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LL_Cancel_Connection_Req &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Create_Connection_Cancel
</UL>

<P><STRONG><a name="[340]"></a>LL_Check_And_Set_Addresses</STRONG> (Thumb, 482 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Check_And_Set_Addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Check_And_Set_Addresses &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_OwnAddress
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_DirectAddress
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_vGeneratePrivateAddress_ucfg
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8SearchAddrInList
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Scan_Params
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
</UL>

<P><STRONG><a name="[2bb]"></a>LL_Create_Connection_Cancel</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, ll_routines_master.o(i.LL_Create_Connection_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LL_Create_Connection_Cancel &rArr; LL_Cancel_Connection_Req &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Cancel_Connection_Req
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Terminate_Gap_Procedure
</UL>

<P><STRONG><a name="[58d]"></a>LL_Data_Length_Change_Event_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_routines.o(i.LL_Data_Length_Change_Event_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
</UL>

<P><STRONG><a name="[347]"></a>LL_Disconnect_Link</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, ll_routines.o(i.LL_Disconnect_Link))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_Disconnection_Req
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect
</UL>

<P><STRONG><a name="[2a3]"></a>LL_Enable_Disable_Adv</STRONG> (Thumb, 576 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Enable_Disable_Adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_free_slot
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Buffers
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_PDU_Format
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[295]"></a>LL_Enable_Disable_Scan</STRONG> (Thumb, 606 bytes, Stack size unknown bytes, ll_routines_master.o(i.LL_Enable_Disable_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_scan_slot
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_free_slot
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Terminate_Gap_Procedure
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Start_Observation_Procedure
</UL>

<P><STRONG><a name="[350]"></a>LL_Encrypt_Plain_Data_ucfg</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, ll_routines_support.o(i.LL_Encrypt_Plain_Data_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Encrypt_Plain_Data_ucfg &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
</UL>

<P><STRONG><a name="[33d]"></a>LL_Get_Address</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Get_Address))
<BR><BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Buffers
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
</UL>

<P><STRONG><a name="[2ab]"></a>LL_Get_AdvAddress</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Get_AdvAddress))
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[292]"></a>LL_Get_Adv_Data</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Get_Adv_Data))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
</UL>

<P><STRONG><a name="[353]"></a>LL_Get_Adv_Tx_Power_Level</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.LL_Get_Adv_Tx_Power_Level))
<BR><BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_power
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
</UL>

<P><STRONG><a name="[355]"></a>LL_Get_LTK</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, ll_routines_support.o(i.LL_Get_LTK))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[356]"></a>LL_Get_Random_data</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.LL_Get_Random_data))
<BR><BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand
</UL>

<P><STRONG><a name="[2ac]"></a>LL_Get_ScanAddress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Get_ScanAddress))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[16d]"></a>LL_Init</STRONG> (Thumb, 366 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Init &rArr; LL_LE_Clear_White_List &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Clear_White_List
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init_Global
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[357]"></a>LL_LE_Clear_White_List</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_LE_Clear_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_LE_Clear_White_List &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[13d]"></a>LL_Send_ACL_Data</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Send_ACL_Data))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>

<P><STRONG><a name="[277]"></a>LL_Send_Disconnection_Req</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, ll_routines.o(i.LL_Send_Disconnection_Req))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slave
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnection_Offline_Processing
</UL>

<P><STRONG><a name="[58e]"></a>LL_Send_Length_Resp_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_routines.o(i.LL_Send_Length_Resp_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
</UL>

<P><STRONG><a name="[293]"></a>LL_Set_Adv_Data</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Adv_Data))
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_data
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
</UL>

<P><STRONG><a name="[34a]"></a>LL_Set_Adv_PDU_Format</STRONG> (Thumb, 198 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Adv_PDU_Format))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[359]"></a>LL_Set_Adv_Params</STRONG> (Thumb, 322 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Adv_Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Set_Adv_Params &rArr; LL_Check_And_Set_Addresses &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[349]"></a>LL_Set_Advertising_Buffers</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Advertising_Buffers))
<BR><BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[345]"></a>LL_Set_OwnAddress</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_OwnAddress))
<BR><BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[2b9]"></a>LL_Set_Scan_Params</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, rom_ll_ll_routines_master.o(i.LL_Set_Scan_Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Set_Scan_Params &rArr; LL_Check_And_Set_Addresses &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Start_Observation_Procedure
</UL>

<P><STRONG><a name="[33f]"></a>LL_Sleep_Req</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, bluenrg_main_func_speed.o(i.LL_Sleep_Req))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Cancel_Connection_Req
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[35b]"></a>LL_Start_Encryption</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, rom_ll_ll_routines_master.o(i.LL_Start_Encryption))
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_MI_Start_Encryption
</UL>

<P><STRONG><a name="[35d]"></a>LL_Update_Advertising_Buffers</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Update_Advertising_Buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Update_Advertising_Buffers &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[35e]"></a>LL_Update_Scanning_Initiating_Buffers</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Update_Scanning_Initiating_Buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Update_Scanning_Initiating_Buffers &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[35f]"></a>LL_receive_data</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, isr_routines.o(i.LL_receive_data))
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_Acl_Data_Indication_Queue_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_master_state
</UL>

<P><STRONG><a name="[537]"></a>LL_update_proc</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.LL_update_proc))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
</UL>

<P><STRONG><a name="[361]"></a>LightActual_GenericLevelBinding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, light.o(i.LightActual_GenericLevelBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LightActual_GenericLevelBinding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Set
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualImplicitBinding
</UL>

<P><STRONG><a name="[362]"></a>LightActual_GenericOnOffBinding</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, light.o(i.LightActual_GenericOnOffBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LightActual_GenericOnOffBinding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Set
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualImplicitBinding
</UL>

<P><STRONG><a name="[37a]"></a>LightLightnessStateUpdate_Process</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, light.o(i.LightLightnessStateUpdate_Process))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lighting_Process
</UL>

<P><STRONG><a name="[37b]"></a>LightLinearStateUpdate_Process</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, light.o(i.LightLinearStateUpdate_Process))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lighting_Process
</UL>

<P><STRONG><a name="[52]"></a>LightModelServer_GetLightOpcodeTableCb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, light.o(i.LightModelServer_GetLightOpcodeTableCb))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>LightModelServer_GetStatusRequestCb</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, light.o(i.LightModelServer_GetStatusRequestCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LightModelServer_GetStatusRequestCb &rArr; Light_Lightness_Range_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Status
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Range_Status
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Linear_Status
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Last_Status
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Default_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>LightModelServer_ProcessMessageCb</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, light.o(i.LightModelServer_ProcessMessageCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1708 + Unknown Stack Size
<LI>Call Chain = LightModelServer_ProcessMessageCb &rArr; Light_SendResponse &rArr; MobleLibraryLightSendResponse &rArr; MobleLightModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_SendResponse
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_RangeValidity
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Set
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Range_Set
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Linear_Set
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Default_Set
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_ParamMinMaxValidity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>LightModel_Add_Server</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, library.o(i.LightModel_Add_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LightModel_Add_Server &rArr; MobleApplicationAddModel
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationAddModel
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_AddLightingModels
</UL>

<P><STRONG><a name="[36e]"></a>Light_ActualLightness_HslLightnessBinding</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, light.o(i.Light_ActualLightness_HslLightnessBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Light_ActualLightness_HslLightnessBinding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Set
</UL>

<P><STRONG><a name="[2fb]"></a>Light_Actual_LinearBinding</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, light.o(i.Light_Actual_LinearBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Light_Actual_LinearBinding &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualImplicitBinding
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericLevel_LightActualBinding
</UL>

<P><STRONG><a name="[373]"></a>Light_Actual_RangeBinding</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, light.o(i.Light_Actual_RangeBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Light_Actual_RangeBinding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Set
</UL>

<P><STRONG><a name="[374]"></a>Light_BindingCtlToLightness_Actual</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, light.o(i.Light_BindingCtlToLightness_Actual))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Light_BindingCtlToLightness_Actual
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Set
</UL>

<P><STRONG><a name="[375]"></a>Light_GetStepValue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, light.o(i.Light_GetStepValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Light_GetStepValue
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StepResolutionValue
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Set
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Linear_Set
</UL>

<P><STRONG><a name="[36a]"></a>Light_Lightness_Default_Set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, light.o(i.Light_Lightness_Default_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Light_Lightness_Default_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[366]"></a>Light_Lightness_Default_Status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, light.o(i.Light_Lightness_Default_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Light_Lightness_Default_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_GetStatusRequestCb
</UL>

<P><STRONG><a name="[365]"></a>Light_Lightness_Last_Status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, light.o(i.Light_Lightness_Last_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Light_Lightness_Last_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_GetStatusRequestCb
</UL>

<P><STRONG><a name="[369]"></a>Light_Lightness_Linear_Set</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, light.o(i.Light_Lightness_Linear_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Light_Lightness_Linear_Set &rArr; Light_Linear_ActualImplicitBinding &rArr; Light_Actual_LinearBinding &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_GetStepValue
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualImplicitBinding
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[364]"></a>Light_Lightness_Linear_Status</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, light.o(i.Light_Lightness_Linear_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Light_Lightness_Linear_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_GetStatusRequestCb
</UL>

<P><STRONG><a name="[36c]"></a>Light_Lightness_Range_Set</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, light.o(i.Light_Lightness_Range_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Light_Lightness_Range_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[367]"></a>Light_Lightness_Range_Status</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, light.o(i.Light_Lightness_Range_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Light_Lightness_Range_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_GetStatusRequestCb
</UL>

<P><STRONG><a name="[368]"></a>Light_Lightness_Set</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, light.o(i.Light_Lightness_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Light_Lightness_Set &rArr; Light_Linear_ActualImplicitBinding &rArr; Light_Actual_LinearBinding &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_GetStepValue
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_BindingCtlToLightness_Actual
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_RangeBinding
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_ActualLightness_HslLightnessBinding
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightActual_GenericOnOffBinding
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightActual_GenericLevelBinding
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualImplicitBinding
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[363]"></a>Light_Lightness_Status</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, light.o(i.Light_Lightness_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Light_Lightness_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_GetStatusRequestCb
</UL>

<P><STRONG><a name="[376]"></a>Light_Linear_ActualBinding</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, light.o(i.Light_Linear_ActualBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Light_Linear_ActualBinding &rArr; sqrt &rArr; _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualImplicitBinding
</UL>

<P><STRONG><a name="[307]"></a>Light_Linear_ActualImplicitBinding</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, light.o(i.Light_Linear_ActualImplicitBinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Light_Linear_ActualImplicitBinding &rArr; Light_Actual_LinearBinding &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualBinding
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightActual_GenericOnOffBinding
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightActual_GenericLevelBinding
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_LinearBinding
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Set
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Lightness_Linear_Set
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericOnOff_LightActualBinding
</UL>

<P><STRONG><a name="[36d]"></a>Light_SendResponse</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, library.o(i.Light_SendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668 + Unknown Stack Size
<LI>Call Chain = Light_SendResponse &rArr; MobleLibraryLightSendResponse &rArr; MobleLightModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryLightSendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[379]"></a>Light_TransitionBehaviourSingle_Param</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, light.o(i.Light_TransitionBehaviourSingle_Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Light_TransitionBehaviourSingle_Param &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lighting_Process
</UL>

<P><STRONG><a name="[19d]"></a>Lighting_Process</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, light.o(i.Lighting_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Lighting_Process &rArr; Light_TransitionBehaviourSingle_Param &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_TransitionBehaviourSingle_Param
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightLinearStateUpdate_Process
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightLightnessStateUpdate_Process
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsProcess
</UL>

<P><STRONG><a name="[2ce]"></a>List_Circular_Get_Size</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Get_Size))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[2d2]"></a>List_Circular_Insert_Tail</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Insert_Tail))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
</UL>

<P><STRONG><a name="[37c]"></a>List_Circular_Node_Present</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Node_Present))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
</UL>

<P><STRONG><a name="[4fe]"></a>List_Circular_Remove_Head</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Remove_Head))
<BR><BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
</UL>

<P><STRONG><a name="[2d1]"></a>List_Circular_Remove_Node</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Remove_Node))
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Node_Present
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
</UL>

<P><STRONG><a name="[16]"></a>MFT1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT1A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[17]"></a>MFT1B_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg1_it.o(i.MFT1B_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MFT1B_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[18]"></a>MFT2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT2A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[19]"></a>MFT2B_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg1_it.o(i.MFT2B_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MFT2B_Handler &rArr; PWM3_PWM4_handler &rArr; Ton_sorting
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM3_PWM4_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[4a9]"></a>MFT_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_mft.o(i.MFT_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[4a7]"></a>MFT_EnableIT</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_mft.o(i.MFT_EnableIT))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[4a4]"></a>MFT_Init</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, bluenrg1_mft.o(i.MFT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MFT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[4a5]"></a>MFT_SetCounter2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bluenrg1_mft.o(i.MFT_SetCounter2))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[4a3]"></a>MFT_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bluenrg1_mft.o(i.MFT_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[4a8]"></a>MFT_TnXEN</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bluenrg1_mft.o(i.MFT_TnXEN))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[332]"></a>Mem_Buff_Append</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Append))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[37f]"></a>Mem_Buff_Block_Copy</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Block_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Block_Copy &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tx_data_packet
</UL>

<P><STRONG><a name="[381]"></a>Mem_Buff_Block_Write</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Block_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Block_Write &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[382]"></a>Mem_Buff_Clone</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Clone &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Clone_Pckt
</UL>

<P><STRONG><a name="[383]"></a>Mem_Buff_Cmp</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
</UL>

<P><STRONG><a name="[384]"></a>Mem_Buff_Compact</STRONG> (Thumb, 186 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Compact &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Compact
</UL>

<P><STRONG><a name="[499]"></a>Mem_Buff_Get</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Get))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>

<P><STRONG><a name="[496]"></a>Mem_Buff_Get_Chain_Count</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Get_Chain_Count))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Compact
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
</UL>

<P><STRONG><a name="[49e]"></a>Mem_Buff_Get_Chain_Size</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Get_Chain_Size))
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>

<P><STRONG><a name="[49b]"></a>Mem_Buff_Init</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Init))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
</UL>

<P><STRONG><a name="[385]"></a>Mem_Buff_Read</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>

<P><STRONG><a name="[49c]"></a>Mem_Buff_Release</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Release))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>

<P><STRONG><a name="[49f]"></a>Mem_Buff_Resize</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Resize))
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>

<P><STRONG><a name="[386]"></a>Mem_Buff_Write</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Write &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
</UL>

<P><STRONG><a name="[389]"></a>MobleAddressAllocatePeerEntry</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, library.o(i.MobleAddressAllocatePeerEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MobleAddressAllocatePeerEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleAddressIsNew
</UL>

<P><STRONG><a name="[388]"></a>MobleAddressFindPeerEntry</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, library.o(i.MobleAddressFindPeerEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MobleAddressFindPeerEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleAddressIsNew
</UL>

<P><STRONG><a name="[387]"></a>MobleAddressIsNew</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, library.o(i.MobleAddressIsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MobleAddressIsNew &rArr; MobleAddressFindPeerEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleAddressFindPeerEntry
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleAddressAllocatePeerEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
</UL>

<P><STRONG><a name="[211]"></a>MobleApplicationAddModel</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, library.o(i.MobleApplicationAddModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleApplicationAddModel
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorModel_Add_Server
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightModel_Add_Server
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModel_Add_Server
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelInit
</UL>

<P><STRONG><a name="[409]"></a>MobleApplicationAddVendorModel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, library.o(i.MobleApplicationAddVendorModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleApplicationAddVendorModel
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryInit
</UL>

<P><STRONG><a name="[3c3]"></a>MobleApplicationGetSigModelList</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, library.o(i.MobleApplicationGetSigModelList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MobleApplicationGetSigModelList
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessDeviceCompositionDataGet
</UL>

<P><STRONG><a name="[3c4]"></a>MobleApplicationGetVendorModelList</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, library.o(i.MobleApplicationGetVendorModelList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MobleApplicationGetVendorModelList
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessDeviceCompositionDataGet
</UL>

<P><STRONG><a name="[38a]"></a>MobleApplicationInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, library.o(i.MobleApplicationInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MobleApplicationInit &rArr; MobleTransportInit &rArr; MobleNetworkLayerInit &rArr; MobleNetworkReplayCacheClearAll &rArr; MobleNetworkReplayCacheClear &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryInit
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>

<P><STRONG><a name="[38c]"></a>MobleApplicationModelSupported</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, library.o(i.MobleApplicationModelSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MobleApplicationModelSupported &rArr; MobleApplicationVendorModelActive
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationVendorModelActive
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationSigModelActive
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionDelete
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionAdd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationVirtualAddressSet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationSet
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppUnbind
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppBind
</UL>

<P><STRONG><a name="[390]"></a>MobleApplicationPassPacketsToModels</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, library.o(i.MobleApplicationPassPacketsToModels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MobleApplicationPassPacketsToModels
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationSendPacket
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationProcess
</UL>

<P><STRONG><a name="[391]"></a>MobleApplicationPassPacketsToVendorModels</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, library.o(i.MobleApplicationPassPacketsToVendorModels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MobleApplicationPassPacketsToVendorModels
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationSendPacket
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationProcess
</UL>

<P><STRONG><a name="[38f]"></a>MobleApplicationProcess</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, library.o(i.MobleApplicationProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MobleApplicationProcess &rArr; MobleApplicationPassPacketsToVendorModels
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationPassPacketsToVendorModels
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationPassPacketsToModels
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcess
</UL>

<P><STRONG><a name="[392]"></a>MobleApplicationProcessPacket</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, library.o(i.MobleApplicationProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MobleApplicationProcessPacket &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessUnseg
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
</UL>

<P><STRONG><a name="[393]"></a>MobleApplicationSendPacket</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, library.o(i.MobleApplicationSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1524 + Unknown Stack Size
<LI>Call Chain = MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetSecurityKeys
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_KR_UseNewKeyEnc
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationPassPacketsToVendorModels
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationPassPacketsToModels
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportSendData
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetContains
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelResponse
</UL>

<P><STRONG><a name="[38e]"></a>MobleApplicationSigModelActive</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, library.o(i.MobleApplicationSigModelActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleApplicationSigModelActive
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessSigModelSubscriptionGet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessSigModelAppGet
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationModelSupported
</UL>

<P><STRONG><a name="[38d]"></a>MobleApplicationVendorModelActive</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, library.o(i.MobleApplicationVendorModelActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MobleApplicationVendorModelActive
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessVendorModelSubscriptionGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessVendorModelAppGet
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationModelSupported
</UL>

<P><STRONG><a name="[396]"></a>MobleBeaconSetGeneric</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, library.o(i.MobleBeaconSetGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleBeaconSetGeneric &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetUnprovisioned
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetSecure
</UL>

<P><STRONG><a name="[250]"></a>MobleBeaconSetSecure</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, library.o(i.MobleBeaconSetSecure))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAuthenticateSecureNetworkBeacon
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetGeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSendBeaconOverGatt
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackBeaconGenerator
</UL>

<P><STRONG><a name="[398]"></a>MobleBeaconSetUnprovisioned</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, library.o(i.MobleBeaconSetUnprovisioned))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MobleBeaconSetUnprovisioned &rArr; MobleBeaconSetGeneric &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetGeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackBeaconGenerator
</UL>

<P><STRONG><a name="[399]"></a>MobleBluemeshModelProcessCommand</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, library.o(i.MobleBluemeshModelProcessCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MobleBluemeshModelProcessCommand &rArr; MobleBluemeshModelProcessWrite &rArr; MobleLibraryOnWriteLocalData
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelProcessWrite
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelProcessResponse
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelProcessRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelBluemeshNewPacket
</UL>

<P><STRONG><a name="[39a]"></a>MobleBluemeshModelProcessRead</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, library.o(i.MobleBluemeshModelProcessRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MobleBluemeshModelProcessRead &rArr; MobleLibraryOnReadLocalData
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryOnReadLocalData
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelProcessCommand
</UL>

<P><STRONG><a name="[39c]"></a>MobleBluemeshModelProcessResponse</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, library.o(i.MobleBluemeshModelProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleBluemeshModelProcessResponse &rArr; MobleLibraryOnResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryOnResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelProcessCommand
</UL>

<P><STRONG><a name="[39b]"></a>MobleBluemeshModelProcessWrite</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, library.o(i.MobleBluemeshModelProcessWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MobleBluemeshModelProcessWrite &rArr; MobleLibraryOnWriteLocalData
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryOnWriteLocalData
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelProcessCommand
</UL>

<P><STRONG><a name="[3a0]"></a>MobleBluemeshModelResponse</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, library.o(i.MobleBluemeshModelResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1572 + Unknown Stack Size
<LI>Call Chain = MobleBluemeshModelResponse &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutArray
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibrarySendResponse
</UL>

<P><STRONG><a name="[3a2]"></a>MobleBtReset</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, library.o(i.MobleBtReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = MobleBtReset &rArr; hci_reset &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_read_config_data
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothFreeAllNotifications
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothSleep
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcess
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothGracefulReset
</UL>

<P><STRONG><a name="[3ed]"></a>MobleConfigCheck</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, library.o(i.MobleConfigCheck))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
</UL>

<P><STRONG><a name="[3ac]"></a>MobleConfigCrc32</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, library.o(i.MobleConfigCrc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MobleConfigCrc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSavedSeqEncode
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkEncode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigLoad
</UL>

<P><STRONG><a name="[3a8]"></a>MobleConfigInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, library.o(i.MobleConfigInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MobleConfigInit &rArr; MobleConfigLoad &rArr; MoblePalNvmRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmIsWriteProtected
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryInit
</UL>

<P><STRONG><a name="[3aa]"></a>MobleConfigLoad</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, library.o(i.MobleConfigLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MobleConfigLoad &rArr; MoblePalNvmRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmRead
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigCrc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigInit
</UL>

<P><STRONG><a name="[417]"></a>MobleConfigLoadSeq</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, library.o(i.MobleConfigLoadSeq))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkLayerInit
</UL>

<P><STRONG><a name="[407]"></a>MobleConfigModelCreate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, library.o(i.MobleConfigModelCreate))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryInit
</UL>

<P><STRONG><a name="[467]"></a>MobleConfigModelGetConfigBeacon</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, library.o(i.MobleConfigModelGetConfigBeacon))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackBeaconGenerator
</UL>

<P><STRONG><a name="[1d0]"></a>MobleConfigModelGetNetworkTransmitCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, library.o(i.MobleConfigModelGetNetworkTransmitCount))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndClear
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendAck
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendFrndClear
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndClear
</UL>

<P><STRONG><a name="[218]"></a>MobleConfigModelGetPublicationState</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, library.o(i.MobleConfigModelGetPublicationState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MobleConfigModelGetPublicationState &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetPublishTimer
</UL>

<P><STRONG><a name="[414]"></a>MobleConfigModelGetRelayEnableStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, library.o(i.MobleConfigModelGetRelayEnableStatus))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkDecideRetransmission
</UL>

<P><STRONG><a name="[41c]"></a>MobleConfigModelGetRelayRetransmitCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, library.o(i.MobleConfigModelGetRelayRetransmitCount))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
</UL>

<P><STRONG><a name="[3b0]"></a>MobleConfigModelInit</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, library.o(i.MobleConfigModelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MobleConfigModelInit &rArr; BnrgmConfigModelSetFeatures &rArr; BnrgmFrndMgmtFnInit &rArr; BnrgmFrndFnInit &rArr; BnrgmPalCryptoInitFriendshipKeysP
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationAddModel
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSetFeatures
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryInit
</UL>

<P><STRONG><a name="[24d]"></a>MobleConfigModelSetNodeIdentity</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, library.o(i.MobleConfigModelSetNodeIdentity))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetNodeIdentityState
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackNodeIdentityTimerCallback
</UL>

<P><STRONG><a name="[483]"></a>MobleConfigModel_KR_UseNewKeyDec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, library.o(i.MobleConfigModel_KR_UseNewKeyDec))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessUnseg
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
</UL>

<P><STRONG><a name="[1cb]"></a>MobleConfigModel_KR_UseNewKeyEnc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, library.o(i.MobleConfigModel_KR_UseNewKeyEnc))
<BR><BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendDataEx
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendData
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationSendPacket
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSendBeaconOverGatt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnInsertFriendUpdate
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattBeaconGenerator
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackBeaconGenerator
</UL>

<P><STRONG><a name="[3ec]"></a>MobleConfigNetworkDecode</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, library.o(i.MobleConfigNetworkDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleConfigNetworkDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkLoad
</UL>

<P><STRONG><a name="[3e6]"></a>MobleConfigNetworkEncode</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, library.o(i.MobleConfigNetworkEncode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MobleConfigNetworkEncode &rArr; MoblePalBluetoothRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothRandom
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigCrc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkLoad
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkInvalidate
</UL>

<P><STRONG><a name="[3e8]"></a>MobleConfigNetworkInvalidate</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, library.o(i.MobleConfigNetworkInvalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = MobleConfigNetworkInvalidate &rArr; MobleConfigSave &rArr; MoblePalNvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSavedSeqEncode
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSave
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkEncode
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigInvalidate
</UL>

<P><STRONG><a name="[3eb]"></a>MobleConfigNetworkLoad</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, library.o(i.MobleConfigNetworkLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = MobleConfigNetworkLoad &rArr; MobleConfigNetworkEncode &rArr; MoblePalBluetoothRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkEncode
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkDecode
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetInit
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
</UL>

<P><STRONG><a name="[3b9]"></a>MobleConfigNetworkSave</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, library.o(i.MobleConfigNetworkSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = MobleConfigNetworkSave &rArr; MobleConfigSave &rArr; MoblePalNvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSavedSeqEncode
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSave
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkEncode
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionOverwrite
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionDelete
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionAdd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionDeleteAll
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationSet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyAdd
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSetIvIndex
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>

<P><STRONG><a name="[3ea]"></a>MobleConfigSave</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, library.o(i.MobleConfigSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MobleConfigSave &rArr; MoblePalNvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmWrite
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmErase
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSaveSeq
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkInvalidate
</UL>

<P><STRONG><a name="[3f1]"></a>MobleConfigSaveSeq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, library.o(i.MobleConfigSaveSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MobleConfigSaveSeq &rArr; MobleConfigSave &rArr; MoblePalNvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSavedSeqEncode
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSave
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSaveSeqNum
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackResetSeq
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>

<P><STRONG><a name="[3e9]"></a>MobleConfigSavedSeqEncode</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, library.o(i.MobleConfigSavedSeqEncode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MobleConfigSavedSeqEncode &rArr; MobleConfigCrc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigCrc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSaveSeq
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkInvalidate
</UL>

<P><STRONG><a name="[3f2]"></a>MobleGattBeaconSetSectionGeneric</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, library.o(i.MobleGattBeaconSetSectionGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleGattBeaconSetSectionGeneric &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattBeaconGenerator
</UL>

<P><STRONG><a name="[3f9]"></a>MobleGattGetAttCount</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, library.o(i.MobleGattGetAttCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MobleGattGetAttCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattSetup
</UL>

<P><STRONG><a name="[3f3]"></a>MobleGattInit</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, library.o(i.MobleGattInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MobleGattInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattInit
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
</UL>

<P><STRONG><a name="[3f5]"></a>MobleGattOnConnectDisconnect</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, library.o(i.MobleGattOnConnectDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028 + Unknown Stack Size
<LI>Call Chain = MobleGattOnConnectDisconnect &rArr; MobleProvisionBearerGatt_Init &rArr; MobleProvisionBearerGatt_FSM &rArr;  MobleProvisionBearerGatt_FSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_DeInit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetProxyClientAddress
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_Init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConnectionCallback
</UL>

<P><STRONG><a name="[2e]"></a>MobleGattReadCallback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, library.o(i.MobleGattReadCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MobleGattReadCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleGattInit)
</UL>
<P><STRONG><a name="[3f8]"></a>MobleGattSetup</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, library.o(i.MobleGattSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = MobleGattSetup &rArr; MoblePalGattAddCharacteristic &rArr; aci_gatt_add_char &rArr; Gatt_Add_Characteristic &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattAddService
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattAddCharacteristic
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattGetAttCount
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattSetup
</UL>

<P><STRONG><a name="[2d]"></a>MobleGattWriteCallback</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, library.o(i.MobleGattWriteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372 + Unknown Stack Size
<LI>Call Chain = MobleGattWriteCallback &rArr; BnrgmProxyProtocol_ProcessPacket &rArr; MobleStackProcessData &rArr; MobleNetworkProcessData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_ProcessPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleGattInit)
</UL>
<P><STRONG><a name="[400]"></a>MobleGenericModelReplyStatus</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, library.o(i.MobleGenericModelReplyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1652 + Unknown Stack Size
<LI>Call Chain = MobleGenericModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetResponseOpCode
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMinResponseLength
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMaxResponseLength
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryGenericSendResponse
</UL>

<P><STRONG><a name="[1a6]"></a>MobleGenericOnOffModelCreate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, library.o(i.MobleGenericOnOffModelCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MobleGenericOnOffModelCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SetModelGenericCbMap
</UL>

<P><STRONG><a name="[404]"></a>MobleInitRGN</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, library.o(i.MobleInitRGN))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleQIInit
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSplitRGN
</UL>

<P><STRONG><a name="[1cf]"></a>MobleInputStreamGetBigEndian</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, library.o(i.MobleInputStreamGetBigEndian))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MobleInputStreamGetBigEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_RemoveAddr_Filter
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_AddAddr_Filter
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransControlProcessHeartbeat
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnValidateFrndOffer
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndUpdate
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndSubscrListRem
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndSubscrListAdd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndRequest
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndClearConf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndClear
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessBeacon
</UL>

<P><STRONG><a name="[1b7]"></a>MobleInputStreamGetLittleEndian</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, library.o(i.MobleInputStreamGetLittleEndian))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleInputStreamGetLittleEndian &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultTestUnack
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultTest
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultGet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultClearUnack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultClear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatSubscriptionSet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatPublicationSet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessVendorModelSubscriptionGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessVendorModelAppGet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessSigModelSubscriptionGet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessSigModelAppGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionOverwrite
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionDeleteAll
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionDelete
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionAdd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationVirtualAddressSet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationSet
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppUnbind
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppBind
</UL>

<P><STRONG><a name="[187]"></a>MobleLibraryBleHardwareInitCallBack</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, library.o(i.MobleLibraryBleHardwareInitCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_BleHardwareInitCallBack
</UL>

<P><STRONG><a name="[30e]"></a>MobleLibraryGenericSendResponse</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, library.o(i.MobleLibraryGenericSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660 + Unknown Stack Size
<LI>Call Chain = MobleLibraryGenericSendResponse &rArr; MobleGenericModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelReplyStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generic_SendResponse
</UL>

<P><STRONG><a name="[189]"></a>MobleLibraryGetAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, library.o(i.MobleLibraryGetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_GetAddress
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendData
</UL>

<P><STRONG><a name="[18b]"></a>MobleLibraryGetSubscriptionAddress</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, library.o(i.MobleLibraryGetSubscriptionAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MobleLibraryGetSubscriptionAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_GetSubscriptionAddress
</UL>

<P><STRONG><a name="[18f]"></a>MobleLibraryInit</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, library.o(i.MobleLibraryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = MobleLibraryInit &rArr; MobleStackInit &rArr; MoblePalCryptoSetNetworkKey &rArr; MoblePalCryptoUpdateVectors &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelInit
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelCreate
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigInit
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationInit
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationAddVendorModel
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitSetAutoScanState
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelInit
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelCreate
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_Init
</UL>

<P><STRONG><a name="[378]"></a>MobleLibraryLightSendResponse</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, library.o(i.MobleLibraryLightSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660 + Unknown Stack Size
<LI>Call Chain = MobleLibraryLightSendResponse &rArr; MobleLightModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelReplyStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_SendResponse
</UL>

<P><STRONG><a name="[39d]"></a>MobleLibraryOnReadLocalData</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, library.o(i.MobleLibraryOnReadLocalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleLibraryOnReadLocalData
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelProcessRead
</UL>

<P><STRONG><a name="[39e]"></a>MobleLibraryOnResponse</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, library.o(i.MobleLibraryOnResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleLibraryOnResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelProcessResponse
</UL>

<P><STRONG><a name="[39f]"></a>MobleLibraryOnWriteLocalData</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, library.o(i.MobleLibraryOnWriteLocalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleLibraryOnWriteLocalData
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelProcessWrite
</UL>

<P><STRONG><a name="[1a2]"></a>MobleLibraryProcess</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, library.o(i.MobleLibraryProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 988 + Unknown Stack Size
<LI>Call Chain = MobleLibraryProcess &rArr; MobleStackProcess &rArr; BnrgmFrndMgmtFriendshipProcess &rArr; BnrgmFrndFnProcess &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_Process
</UL>

<P><STRONG><a name="[1a3]"></a>MobleLibrarySendResponse</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, library.o(i.MobleLibrarySendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1596 + Unknown Stack Size
<LI>Call Chain = MobleLibrarySendResponse &rArr; MobleBluemeshModelResponse &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SendResponse
</UL>

<P><STRONG><a name="[40c]"></a>MobleLibrarySensorSendResponse</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, library.o(i.MobleLibrarySensorSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684 + Unknown Stack Size
<LI>Call Chain = MobleLibrarySensorSendResponse &rArr; MobleSensorModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelReplyStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SendResponse
</UL>

<P><STRONG><a name="[1a9]"></a>MobleLibrarySetVendorCbMap</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, library.o(i.MobleLibrarySetVendorCbMap))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SetVendorCbMap
</UL>

<P><STRONG><a name="[1aa]"></a>MobleLibraryUnprovision</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, library.o(i.MobleLibraryUnprovision))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = MobleLibraryUnprovision &rArr; MoblePalBluetoothGracefulReset &rArr; MobleBtReset &rArr; hci_reset &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothGracefulReset
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigInvalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_Unprovision
</UL>

<P><STRONG><a name="[1a7]"></a>MobleLightModelCreate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, library.o(i.MobleLightModelCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MobleLightModelCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SetModelLightCbMap
</UL>

<P><STRONG><a name="[40a]"></a>MobleLightModelReplyStatus</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, library.o(i.MobleLightModelReplyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1652 + Unknown Stack Size
<LI>Call Chain = MobleLightModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetResponseOpCode
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMinResponseLength
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMaxResponseLength
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryLightSendResponse
</UL>

<P><STRONG><a name="[214]"></a>MobleMemAlloc</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, library.o(i.MobleMemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleQIRemove
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInitRGN
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSplitRGN
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelPublish_TimerCallback
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelNewPacket
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessUnseg
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelNewPacket
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_Init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_ProvisionerNode_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattSendNotification
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelReplyStatus
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelReplyStatus
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelResponse
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationProcessPacket
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarInit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelReplyStatus
</UL>

<P><STRONG><a name="[215]"></a>MobleMemFree</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, library.o(i.MobleMemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MobleMemFree &rArr; MobleQIRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleQIRemove
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleQIInsertAfter
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelPublish_TimerCallback
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelNewPacket
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessUnseg
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelNewPacket
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_DeInit
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcessNotifications
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothFreeAllNotifications
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelReplyStatus
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelReplyStatus
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelResponse
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationProcess
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelReplyStatus
</UL>

<P><STRONG><a name="[2f]"></a>MobleModelBluemeshNewPacket</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, library.o(i.MobleModelBluemeshNewPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MobleModelBluemeshNewPacket &rArr; MobleBluemeshModelProcessCommand &rArr; MobleBluemeshModelProcessWrite &rArr; MobleLibraryOnWriteLocalData
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelProcessCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleLibraryInit)
</UL>
<P><STRONG><a name="[3ff]"></a>MobleModelCheckOpCodeReliable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, library.o(i.MobleModelCheckOpCodeReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleModelCheckOpCodeReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelNewPacket
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelNewPacket
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelNewPacket
</UL>

<P><STRONG><a name="[3fc]"></a>MobleModelCheckOpcodeValid</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, library.o(i.MobleModelCheckOpcodeValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleModelCheckOpcodeValid
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelNewPacket
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelNewPacket
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelNewPacket
</UL>

<P><STRONG><a name="[3fe]"></a>MobleModelGetMaxParamLength</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, library.o(i.MobleModelGetMaxParamLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleModelGetMaxParamLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelNewPacket
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelNewPacket
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelNewPacket
</UL>

<P><STRONG><a name="[403]"></a>MobleModelGetMaxResponseLength</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, library.o(i.MobleModelGetMaxResponseLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleModelGetMaxResponseLength
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelReplyStatus
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelReplyStatus
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelReplyStatus
</UL>

<P><STRONG><a name="[3fd]"></a>MobleModelGetMinParamLength</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, library.o(i.MobleModelGetMinParamLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleModelGetMinParamLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelNewPacket
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelNewPacket
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelNewPacket
</UL>

<P><STRONG><a name="[402]"></a>MobleModelGetMinResponseLength</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, library.o(i.MobleModelGetMinResponseLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleModelGetMinResponseLength
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelReplyStatus
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelReplyStatus
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelReplyStatus
</UL>

<P><STRONG><a name="[213]"></a>MobleModelGetOpcodeIdx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, library.o(i.MobleModelGetOpcodeIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleModelGetOpcodeIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelNewPacket
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelNewPacket
</UL>

<P><STRONG><a name="[212]"></a>MobleModelGetOpcodeValue</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, library.o(i.MobleModelGetOpcodeValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleModelGetOpcodeValue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htobe32
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htobe16
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelNewPacket
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessUnseg
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelNewPacket
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelNewPacket
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelNewPacket
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelNewPacket
</UL>

<P><STRONG><a name="[401]"></a>MobleModelGetResponseOpCode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, library.o(i.MobleModelGetResponseOpCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MobleModelGetResponseOpCode
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelReplyStatus
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelReplyStatus
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelReplyStatus
</UL>

<P><STRONG><a name="[1bf]"></a>MobleModelSendPacket</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, library.o(i.MobleModelSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1572 + Unknown Stack Size
<LI>Call Chain = MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendPeriodStatus
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendFaultStatus
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendCurrentStatus
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendAttentionStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendVendorModelSubscriptionList
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendVendorModelAppList
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendSigModelSubscriptionList
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendSigModelAppList
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendRelayStatus
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendNodeIdentityStatus
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendNetKeyStatus
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelSubscriptionStatus
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelPublicationStatus
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendKeyRefreshPhaseStatus
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendGattProxyStatus
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendFriendStatus
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendDefaultTTLStatus
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendBeaconStatus
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppStatus
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppKeyStatus
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppKeyList
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeReset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyGet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessDeviceCompositionDataGet
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLightModelReplyStatus
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGenericModelReplyStatus
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigNetworkTransmitStatus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigHeartbeatPublicationStatus
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSensorModelReplyStatus
</UL>

<P><STRONG><a name="[413]"></a>MobleNetworkDecideRetransmission</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, library.o(i.MobleNetworkDecideRetransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MobleNetworkDecideRetransmission &rArr; BnrgmFrndMgmtGetSubscrStatus &rArr; BnrgmFrndFnGetSubscrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetRelayEnableStatus
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtGetSubscrStatus
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtGetFriendshipStatus
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetContains
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
</UL>

<P><STRONG><a name="[415]"></a>MobleNetworkLayerInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, library.o(i.MobleNetworkLayerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MobleNetworkLayerInit &rArr; MobleNetworkReplayCacheClearAll &rArr; MobleNetworkReplayCacheClear &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkReplayCacheClearAll
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigLoadSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportInit
</UL>

<P><STRONG><a name="[418]"></a>MobleNetworkProcessData</STRONG> (Thumb, 606 bytes, Stack size 144 bytes, library.o(i.MobleNetworkProcessData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292 + Unknown Stack Size
<LI>Call Chain = MobleNetworkProcessData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendDataEx
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoParseNetHdr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkDecideRetransmission
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetRelayRetransmitCount
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetRelayEnableStatus
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetProxyClientAddress
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_AddProxyClient_Filter
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoMatchNid
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoDecryptNetwork
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessData
</UL>

<P><STRONG><a name="[41d]"></a>MobleNetworkReplayCacheClear</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, library.o(i.MobleNetworkReplayCacheClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MobleNetworkReplayCacheClear &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkReplayCacheClearAll
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackIvUpdateSwitchToProgress
</UL>

<P><STRONG><a name="[416]"></a>MobleNetworkReplayCacheClearAll</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, library.o(i.MobleNetworkReplayCacheClearAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MobleNetworkReplayCacheClearAll &rArr; MobleNetworkReplayCacheClear &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkReplayCacheClear
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkLayerInit
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackForcedSetIvIndex
</UL>

<P><STRONG><a name="[24b]"></a>MobleNetworkSaveSeqNum</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, library.o(i.MobleNetworkSaveSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MobleNetworkSaveSeqNum &rArr; MobleConfigSaveSeq &rArr; MobleConfigSave &rArr; MoblePalNvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSaveSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendData
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackConsumeSeqNo
</UL>

<P><STRONG><a name="[41e]"></a>MobleNetworkSendData</STRONG> (Thumb, 160 bytes, Stack size 112 bytes, library.o(i.MobleNetworkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1260 + Unknown Stack Size
<LI>Call Chain = MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendDataEx
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSaveSeqNum
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtGetSubscrStatus
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendAck
</UL>

<P><STRONG><a name="[420]"></a>MobleNetworkUpdateNeighbours</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, library.o(i.MobleNetworkUpdateNeighbours))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MobleNetworkUpdateNeighbours &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessBeacon
</UL>

<P><STRONG><a name="[3a1]"></a>MobleOutputStreamPutArray</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, library.o(i.MobleOutputStreamPutArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MobleOutputStreamPutArray &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoPrepHeaderAndNonceNetwork
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptNetwork
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBluemeshModelResponse
</UL>

<P><STRONG><a name="[1ae]"></a>MobleOutputStreamPutBigEndian</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, library.o(i.MobleOutputStreamPutBigEndian))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndSubscrListRem
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndSubscrListAdd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndRequest
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndClear
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendFilterStatus
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoPrepHeaderAndNonceNetwork
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptNetwork
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptApp
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDecryptApp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetUnprovisioned
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetSecure
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendFrndClear
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndClear
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnInsertFriendUpdate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSendHeartbeat
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattBeaconGenerator
</UL>

<P><STRONG><a name="[1be]"></a>MobleOutputStreamPutLittleEndian</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, library.o(i.MobleOutputStreamPutLittleEndian))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendVendorModelSubscriptionList
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendVendorModelAppList
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendSigModelSubscriptionList
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendSigModelAppList
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelSubscriptionStatus
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelPublicationStatus
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppStatus
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessDeviceCompositionDataGet
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_Init
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionGenerateAuthValue
</UL>

<P><STRONG><a name="[421]"></a>MoblePalBluetoothCheckManufacturerID</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, library.o(i.MoblePalBluetoothCheckManufacturerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = MoblePalBluetoothCheckManufacturerID
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_local_version_information
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothInit
</UL>

<P><STRONG><a name="[3a4]"></a>MoblePalBluetoothFreeAllNotifications</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, library.o(i.MoblePalBluetoothFreeAllNotifications))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MoblePalBluetoothFreeAllNotifications &rArr; MobleMemFree &rArr; MobleQIRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothPopNotification
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcess
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBtReset
</UL>

<P><STRONG><a name="[24a]"></a>MoblePalBluetoothGracefulReset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, library.o(i.MoblePalBluetoothGracefulReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = MoblePalBluetoothGracefulReset &rArr; MobleBtReset &rArr; hci_reset &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBtReset
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeReset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessGattProxySet
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxy_SarTimeoutCallback
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_TimerCallback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryUnprovision
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackDummyProxyModeTimerCallback
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
</UL>

<P><STRONG><a name="[424]"></a>MoblePalBluetoothInit</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, library.o(i.MoblePalBluetoothInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = MoblePalBluetoothInit &rArr; MobleBtReset &rArr; hci_reset &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalSetBluetoothAddress
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothCheckManufacturerID
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBtReset
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
</UL>

<P><STRONG><a name="[423]"></a>MoblePalBluetoothPopNotification</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, library.o(i.MoblePalBluetoothPopNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MoblePalBluetoothPopNotification &rArr; MobleQIRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleQIRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcessNotifications
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothFreeAllNotifications
</UL>

<P><STRONG><a name="[426]"></a>MoblePalBluetoothProcess</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, library.o(i.MoblePalBluetoothProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = MoblePalBluetoothProcess &rArr; MoblePalBluetoothProcessNotifications &rArr; MoblePalGattSendNotification &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_req
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBtQueueTop
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBtQueuePop
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcessNotifications
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcessDisconnection
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothFreeAllNotifications
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBtReset
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalProcess
</UL>

<P><STRONG><a name="[42a]"></a>MoblePalBluetoothProcessDisconnection</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, library.o(i.MoblePalBluetoothProcessDisconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = MoblePalBluetoothProcessDisconnection
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcess
</UL>

<P><STRONG><a name="[42b]"></a>MoblePalBluetoothProcessNotifications</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, library.o(i.MoblePalBluetoothProcessNotifications))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = MoblePalBluetoothProcessNotifications &rArr; MoblePalGattSendNotification &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattSendNotification
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothPopNotification
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcess
</UL>

<P><STRONG><a name="[42d]"></a>MoblePalBluetoothPushNotification</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, library.o(i.MoblePalBluetoothPushNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MoblePalBluetoothPushNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleQIInsertAfter
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattSendNotification
</UL>

<P><STRONG><a name="[3e7]"></a>MoblePalBluetoothRandom</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, library.o(i.MoblePalBluetoothRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MoblePalBluetoothRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_CompleteOperation
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkEncode
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSetupBeacon
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattBeaconGenerator
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFastAdvTimeoutTimerCallback
</UL>

<P><STRONG><a name="[42e]"></a>MoblePalBluetoothSleep</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, library.o(i.MoblePalBluetoothSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = MoblePalBluetoothSleep &rArr; MobleBtReset &rArr; hci_reset &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBtReset
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFSM
</UL>

<P><STRONG><a name="[428]"></a>MoblePalBtQueuePop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, library.o(i.MoblePalBtQueuePop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MoblePalBtQueuePop &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcess
</UL>

<P><STRONG><a name="[42f]"></a>MoblePalBtQueuePush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, library.o(i.MoblePalBtQueuePush))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MoblePalBtQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event
</UL>

<P><STRONG><a name="[429]"></a>MoblePalBtQueueTop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, library.o(i.MoblePalBtQueueTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MoblePalBtQueueTop &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcess
</UL>

<P><STRONG><a name="[57a]"></a>MoblePalBtSetConnectionInterval</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, library.o(i.MoblePalBtSetConnectionInterval))
<BR><BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event
</UL>

<P><STRONG><a name="[430]"></a>MoblePalCryptoAesCcmDecrypt</STRONG> (Thumb, 112 bytes, Stack size 312 bytes, library.o(i.MoblePalCryptoAesCcmDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = MoblePalCryptoAesCcmDecrypt &rArr; AES_CCM_Decrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Header_Append
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Decrypt_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Decrypt_Finish
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Decrypt_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDecryptNetworkEx
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDecryptApp
</UL>

<P><STRONG><a name="[431]"></a>MoblePalCryptoAesCcmEncrypt</STRONG> (Thumb, 108 bytes, Stack size 312 bytes, library.o(i.MoblePalCryptoAesCcmEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Header_Append
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Encrypt_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Encrypt_Finish
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Encrypt_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptNetwork
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptApp
</UL>

<P><STRONG><a name="[3af]"></a>MoblePalCryptoAesCmac</STRONG> (Thumb, 82 bytes, Stack size 248 bytes, library.o(i.MoblePalCryptoAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Finish
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetAddressFromVirtual
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoS1
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK4
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK3
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK2
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK1
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAuthenticateSecureNetworkBeacon
</UL>

<P><STRONG><a name="[230]"></a>MoblePalCryptoAesEcb</STRONG> (Thumb, 80 bytes, Stack size 240 bytes, library.o(i.MoblePalCryptoAesEcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = MoblePalCryptoAesEcb &rArr; AES_ECB_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_Encrypt_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_Encrypt_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoPrepHeaderAndNonceNetwork
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptNetwork
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoCalcNodeIdentityHash
</UL>

<P><STRONG><a name="[397]"></a>MoblePalCryptoAuthenticateSecureNetworkBeacon</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, library.o(i.MoblePalCryptoAuthenticateSecureNetworkBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetSecurityKeys
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoBeaconKey
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetSecure
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessBeacon
</UL>

<P><STRONG><a name="[432]"></a>MoblePalCryptoBeaconKey</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, library.o(i.MoblePalCryptoBeaconKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoS1
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK1
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAuthenticateSecureNetworkBeacon
</UL>

<P><STRONG><a name="[434]"></a>MoblePalCryptoDecryptApp</STRONG> (Thumb, 304 bytes, Stack size 88 bytes, library.o(i.MoblePalCryptoDecryptApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = MoblePalCryptoDecryptApp &rArr; MoblePalCryptoAesCcmDecrypt &rArr; AES_CCM_Decrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetSecurityKeys
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmDecrypt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessUnseg
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
</UL>

<P><STRONG><a name="[232]"></a>MoblePalCryptoDecryptNetworkEx</STRONG> (Thumb, 136 bytes, Stack size 112 bytes, library.o(i.MoblePalCryptoDecryptNetworkEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = MoblePalCryptoDecryptNetworkEx &rArr; MoblePalCryptoAesCcmDecrypt &rArr; AES_CCM_Decrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htobe16
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoPrepHeaderAndNonceNetwork
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmDecrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoDecryptNetwork
</UL>

<P><STRONG><a name="[3ba]"></a>MoblePalCryptoDeleteAppKey</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, library.o(i.MoblePalCryptoDeleteAppKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MoblePalCryptoDeleteAppKey
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyDelete
</UL>

<P><STRONG><a name="[3d2]"></a>MoblePalCryptoDeleteNetworkKey</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, library.o(i.MoblePalCryptoDeleteNetworkKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MoblePalCryptoDeleteNetworkKey
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyDelete
</UL>

<P><STRONG><a name="[436]"></a>MoblePalCryptoEncryptApp</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, library.o(i.MoblePalCryptoEncryptApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = MoblePalCryptoEncryptApp &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetSecurityKeys
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmEncrypt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
</UL>

<P><STRONG><a name="[23e]"></a>MoblePalCryptoEncryptNetwork</STRONG> (Thumb, 522 bytes, Stack size 192 bytes, library.o(i.MoblePalCryptoEncryptNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoXor
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesEcb
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmEncrypt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutArray
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendDataEx
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendData
</UL>

<P><STRONG><a name="[468]"></a>MoblePalCryptoForgetKeys</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, library.o(i.MoblePalCryptoForgetKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MoblePalCryptoForgetKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigInvalidate
</UL>

<P><STRONG><a name="[3bb]"></a>MoblePalCryptoGetAppKeyIndex</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, library.o(i.MoblePalCryptoGetAppKeyIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MoblePalCryptoGetAppKeyIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyGet
</UL>

<P><STRONG><a name="[438]"></a>MoblePalCryptoGetEccGenSecret</STRONG> (Thumb, 82 bytes, Stack size 104 bytes, library.o(i.MoblePalCryptoGetEccGenSecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MoblePalCryptoGetEccGenSecret &rArr; MoblePalCrypto_PK_convert_le
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_WaitProcess
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_VerifyProcess
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_StartProcessing
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_SetData
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_GetData
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCrypto_PK_convert_le
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
</UL>

<P><STRONG><a name="[43f]"></a>MoblePalCryptoGetEccPublicKey</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, library.o(i.MoblePalCryptoGetEccPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MoblePalCryptoGetEccPublicKey &rArr; MoblePalCrypto_PK_convert_le
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_WaitProcess
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_VerifyProcess
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_StartProcessing
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_GetData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCrypto_PK_convert_le
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
</UL>

<P><STRONG><a name="[3b6]"></a>MoblePalCryptoGetNetKeyIndexforAppKeyIndex</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, library.o(i.MoblePalCryptoGetNetKeyIndexforAppKeyIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MoblePalCryptoGetNetKeyIndexforAppKeyIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyAdd
</UL>

<P><STRONG><a name="[472]"></a>MoblePalCryptoGetNetworkIdToBeAdvt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, library.o(i.MoblePalCryptoGetNetworkIdToBeAdvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MoblePalCryptoGetNetworkIdToBeAdvt
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattBeaconGenerator
</UL>

<P><STRONG><a name="[3d6]"></a>MoblePalCryptoGetNodeIdntyState</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, library.o(i.MoblePalCryptoGetNodeIdntyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MoblePalCryptoGetNodeIdntyState
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeIdentityGet
</UL>

<P><STRONG><a name="[473]"></a>MoblePalCryptoGetNodeIdntyToBeAdvt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, library.o(i.MoblePalCryptoGetNodeIdntyToBeAdvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MoblePalCryptoGetNodeIdntyToBeAdvt
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattBeaconGenerator
</UL>

<P><STRONG><a name="[24f]"></a>MoblePalCryptoGetSecurityKeys</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, library.o(i.MoblePalCryptoGetSecurityKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MoblePalCryptoGetSecurityKeys &rArr; MoblePalCryptoHasNetworkKey
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNetworkKey
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessVendorModelAppGet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessSigModelAppGet
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptApp
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDecryptApp
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAuthenticateSecureNetworkBeacon
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationSendPacket
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSendBeaconOverGatt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessBeacon
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackBeaconGenerator
</UL>

<P><STRONG><a name="[3b5]"></a>MoblePalCryptoHasAppKey</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, library.o(i.MoblePalCryptoHasAppKey))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationVirtualAddressSet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyUpdate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyAdd
</UL>

<P><STRONG><a name="[3c8]"></a>MoblePalCryptoHasAppKeyBind</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, library.o(i.MoblePalCryptoHasAppKeyBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MoblePalCryptoHasAppKeyBind
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationGet
</UL>

<P><STRONG><a name="[3be]"></a>MoblePalCryptoHasAppKeyIndex</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, library.o(i.MoblePalCryptoHasAppKeyIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MoblePalCryptoHasAppKeyIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyUpdate
</UL>

<P><STRONG><a name="[3b4]"></a>MoblePalCryptoHasNetworkKey</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, library.o(i.MoblePalCryptoHasNetworkKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MoblePalCryptoHasNetworkKey
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeIdentitySet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeIdentityGet
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyUpdate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyDelete
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyAdd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyGet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyAdd
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNodeIdntyState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetSecurityKeys
</UL>

<P><STRONG><a name="[3bd]"></a>MoblePalCryptoHasNewNetworkKey</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, library.o(i.MoblePalCryptoHasNewNetworkKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MoblePalCryptoHasNewNetworkKey
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyUpdate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyUpdate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelConfigUpdateKRState
</UL>

<P><STRONG><a name="[440]"></a>MoblePalCryptoIdentityKey</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, library.o(i.MoblePalCryptoIdentityKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = MoblePalCryptoIdentityKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoS1
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK1
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattBeaconGenerator
</UL>

<P><STRONG><a name="[476]"></a>MoblePalCryptoInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, library.o(i.MoblePalCryptoInit))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
</UL>

<P><STRONG><a name="[441]"></a>MoblePalCryptoInitEcc</STRONG> (Thumb, 74 bytes, Stack size 104 bytes, library.o(i.MoblePalCryptoInitEcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MoblePalCryptoInitEcc &rArr; PKA_SetData
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_SetData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
</UL>

<P><STRONG><a name="[433]"></a>MoblePalCryptoK1</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, library.o(i.MoblePalCryptoK1))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoIdentityKey
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoBeaconKey
</UL>

<P><STRONG><a name="[233]"></a>MoblePalCryptoK2</STRONG> (Thumb, 184 bytes, Stack size 128 bytes, library.o(i.MoblePalCryptoK2))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoS1
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoUpdateVectors
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoSetFriendshipKeys
</UL>

<P><STRONG><a name="[442]"></a>MoblePalCryptoK3</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, library.o(i.MoblePalCryptoK3))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = MoblePalCryptoK3 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoS1
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoUpdateVectors
</UL>

<P><STRONG><a name="[443]"></a>MoblePalCryptoK4</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, library.o(i.MoblePalCryptoK4))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = MoblePalCryptoK4 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoS1
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNewAppKey
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetAppKey
</UL>

<P><STRONG><a name="[3b1]"></a>MoblePalCryptoModelAppBind</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, library.o(i.MoblePalCryptoModelAppBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MoblePalCryptoModelAppBind
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppBind
</UL>

<P><STRONG><a name="[3c0]"></a>MoblePalCryptoModelAppUnBind</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, library.o(i.MoblePalCryptoModelAppUnBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MoblePalCryptoModelAppUnBind
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppUnbind
</UL>

<P><STRONG><a name="[237]"></a>MoblePalCryptoParseNetHdr</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, library.o(i.MoblePalCryptoParseNetHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MoblePalCryptoParseNetHdr
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htobe16
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoPrepHeaderAndNonceNetwork
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ProcessData
</UL>

<P><STRONG><a name="[435]"></a>MoblePalCryptoPrepHeaderAndNonceNetwork</STRONG> (Thumb, 242 bytes, Stack size 96 bytes, library.o(i.MoblePalCryptoPrepHeaderAndNonceNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = MoblePalCryptoPrepHeaderAndNonceNetwork &rArr; MoblePalCryptoAesEcb &rArr; AES_ECB_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoXor
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoParseNetHdr
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesEcb
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutArray
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDecryptNetworkEx
</UL>

<P><STRONG><a name="[3ae]"></a>MoblePalCryptoS1</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, library.o(i.MoblePalCryptoS1))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetAddressFromVirtual
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK4
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK3
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK2
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoIdentityKey
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoBeaconKey
</UL>

<P><STRONG><a name="[3b7]"></a>MoblePalCryptoSetAppKey</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, library.o(i.MoblePalCryptoSetAppKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = MoblePalCryptoSetAppKey &rArr; MoblePalCryptoK4 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyAdd
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSwitchKeys
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>

<P><STRONG><a name="[444]"></a>MoblePalCryptoSetDevKey</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, library.o(i.MoblePalCryptoSetDevKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MoblePalCryptoSetDevKey &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>

<P><STRONG><a name="[445]"></a>MoblePalCryptoSetEccPublicKey</STRONG> (Thumb, 30 bytes, Stack size 72 bytes, library.o(i.MoblePalCryptoSetEccPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MoblePalCryptoSetEccPublicKey &rArr; MoblePalCrypto_PK_convert_le
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_SetData
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCrypto_PK_convert_le
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
</UL>

<P><STRONG><a name="[446]"></a>MoblePalCryptoSetIvIndex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, library.o(i.MoblePalCryptoSetIvIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = MoblePalCryptoSetIvIndex &rArr; MoblePalCryptoUpdateVectors &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoUpdateVectors
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSetIvIndex
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>

<P><STRONG><a name="[3cf]"></a>MoblePalCryptoSetNetworkKey</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, library.o(i.MoblePalCryptoSetNetworkKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = MoblePalCryptoSetNetworkKey &rArr; MoblePalCryptoUpdateVectors &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoUpdateVectors
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyAdd
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSwitchKeys
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>

<P><STRONG><a name="[3bf]"></a>MoblePalCryptoSetNewAppKey</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, library.o(i.MoblePalCryptoSetNewAppKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = MoblePalCryptoSetNewAppKey &rArr; MoblePalCryptoK4 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyUpdate
</UL>

<P><STRONG><a name="[3d5]"></a>MoblePalCryptoSetNewNetworkKey</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, library.o(i.MoblePalCryptoSetNewNetworkKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = MoblePalCryptoSetNewNetworkKey &rArr; MoblePalCryptoUpdateVectors &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoUpdateVectors
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyUpdate
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
</UL>

<P><STRONG><a name="[3d8]"></a>MoblePalCryptoSetNodeIdntyState</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, library.o(i.MoblePalCryptoSetNodeIdntyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MoblePalCryptoSetNodeIdntyState &rArr; MoblePalCryptoHasNetworkKey
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNetworkKey
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeIdentitySet
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>

<P><STRONG><a name="[448]"></a>MoblePalCryptoSwitchKeys</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, library.o(i.MoblePalCryptoSwitchKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = MoblePalCryptoSwitchKeys &rArr; MoblePalCryptoSetNetworkKey &rArr; MoblePalCryptoUpdateVectors &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNetworkKey
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetAppKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelConfigUpdateKRState
</UL>

<P><STRONG><a name="[447]"></a>MoblePalCryptoUpdateVectors</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, library.o(i.MoblePalCryptoUpdateVectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = MoblePalCryptoUpdateVectors &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK3
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK2
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNewNetworkKey
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNetworkKey
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetIvIndex
</UL>

<P><STRONG><a name="[437]"></a>MoblePalCryptoXor</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, library.o(i.MoblePalCryptoXor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MoblePalCryptoXor
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoPrepHeaderAndNonceNetwork
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptNetwork
</UL>

<P><STRONG><a name="[3dc]"></a>MoblePalCrypto_GetAppBind_SIGModel</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, library.o(i.MoblePalCrypto_GetAppBind_SIGModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MoblePalCrypto_GetAppBind_SIGModel
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessSigModelAppGet
</UL>

<P><STRONG><a name="[3df]"></a>MoblePalCrypto_GetAppBind_VendorModel</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, library.o(i.MoblePalCrypto_GetAppBind_VendorModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MoblePalCrypto_GetAppBind_VendorModel
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessVendorModelAppGet
</UL>

<P><STRONG><a name="[3d1]"></a>MoblePalCrypto_GetNetKeyCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, library.o(i.MoblePalCrypto_GetNetKeyCount))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyDelete
</UL>

<P><STRONG><a name="[3d3]"></a>MoblePalCrypto_GetNetKeyIndexes</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, library.o(i.MoblePalCrypto_GetNetKeyIndexes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MoblePalCrypto_GetNetKeyIndexes
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyGet
</UL>

<P><STRONG><a name="[439]"></a>MoblePalCrypto_PK_convert_le</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, library.o(i.MoblePalCrypto_PK_convert_le))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MoblePalCrypto_PK_convert_le
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetEccPublicKey
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccPublicKey
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccGenSecret
</UL>

<P><STRONG><a name="[3fb]"></a>MoblePalGattAddCharacteristic</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, library.o(i.MoblePalGattAddCharacteristic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MoblePalGattAddCharacteristic &rArr; aci_gatt_add_char &rArr; Gatt_Add_Characteristic &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattSetup
</UL>

<P><STRONG><a name="[3fa]"></a>MoblePalGattAddService</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, library.o(i.MoblePalGattAddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = MoblePalGattAddService &rArr; aci_gatt_add_service &rArr; Gatt_Add_Service &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattSetup
</UL>

<P><STRONG><a name="[3f4]"></a>MoblePalGattInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, library.o(i.MoblePalGattInit))
<BR><BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattInit
</UL>

<P><STRONG><a name="[244]"></a>MoblePalGattSendNotification</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, library.o(i.MoblePalGattSendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = MoblePalGattSendNotification &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleQIInit
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothPushNotification
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcessNotifications
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_Notify
</UL>

<P><STRONG><a name="[44c]"></a>MoblePalGetBluetoothAddress</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, library.o(i.MoblePalGetBluetoothAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MoblePalGetBluetoothAddress &rArr; hci_read_bd_addr &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_bd_addr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackBeaconGenerator
</UL>

<P><STRONG><a name="[24c]"></a>MoblePalGetConnectionState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, library.o(i.MoblePalGetConnectionState))
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalIsBtDisconnected
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackDummyProxyModeTimerCallback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackGattBeaconGenerator
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConnectionCallback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackBeaconGenerator
</UL>

<P><STRONG><a name="[44e]"></a>MoblePalGetIsFlashEraseOk</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, library.o(i.MoblePalGetIsFlashEraseOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = MoblePalGetIsFlashEraseOk
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerDiff_ms_sysT32
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmProcess
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmBackupProcess
</UL>

<P><STRONG><a name="[474]"></a>MoblePalInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, library.o(i.MoblePalInit))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
</UL>

<P><STRONG><a name="[44f]"></a>MoblePalIsBtDisconnected</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, library.o(i.MoblePalIsBtDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MoblePalIsBtDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetConnectionState
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmProcess
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmBackupProcess
</UL>

<P><STRONG><a name="[3ee]"></a>MoblePalNvmCompare</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, pal_nvm.o(i.MoblePalNvmCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MoblePalNvmCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSave
</UL>

<P><STRONG><a name="[3ef]"></a>MoblePalNvmErase</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pal_nvm.o(i.MoblePalNvmErase))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSave
</UL>

<P><STRONG><a name="[3a9]"></a>MoblePalNvmIsWriteProtected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pal_nvm.o(i.MoblePalNvmIsWriteProtected))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigInit
</UL>

<P><STRONG><a name="[452]"></a>MoblePalNvmProcess</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, pal_nvm.o(i.MoblePalNvmProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MoblePalNvmProcess &rArr; MoblePalNvmBackupProcess &rArr; BnrgmPalAdvStop &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordBurst
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetFlagStatus
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalIsBtDisconnected
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetIsFlashEraseOk
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalAdvStop
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmBackupProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalProcess
</UL>

<P><STRONG><a name="[3ab]"></a>MoblePalNvmRead</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pal_nvm.o(i.MoblePalNvmRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MoblePalNvmRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigLoad
</UL>

<P><STRONG><a name="[3f0]"></a>MoblePalNvmWrite</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, pal_nvm.o(i.MoblePalNvmWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MoblePalNvmWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSave
</UL>

<P><STRONG><a name="[453]"></a>MoblePalProcess</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, library.o(i.MoblePalProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = MoblePalProcess &rArr; MoblePalNvmProcess &rArr; MoblePalNvmBackupProcess &rArr; BnrgmPalAdvStop &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmProcess
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerProcess
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcess
</UL>

<P><STRONG><a name="[425]"></a>MoblePalSetBluetoothAddress</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, library.o(i.MoblePalSetBluetoothAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MoblePalSetBluetoothAddress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothInit
</UL>

<P><STRONG><a name="[1e5]"></a>MoblePalTimerCreate</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, library.o(i.MoblePalTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MoblePalTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerFindFreeSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetPublishTimer
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetAttentionTimer
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_Init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetNodeIdentityState
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetDummyProxyModeState
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_Init
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitSetup
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessSeg
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessAck
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackCreateStartFastAdvTimer
</UL>

<P><STRONG><a name="[1c2]"></a>MoblePalTimerDestroy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, library.o(i.MoblePalTimerDestroy))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetPublishTimer
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelPublish_TimerCallback
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelAttention_TimerCallback
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnClear_TimerCallback
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransEraseTimer
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_DeleteTimer
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetNodeIdentityState
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetDummyProxyModeState
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackNodeIdentityTimerCallback
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackDummyProxyModeTimerCallback
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_DeInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndRequest
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndClearConf
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitCancelSlot
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFastAdvTimeoutTimerCallback
</UL>

<P><STRONG><a name="[455]"></a>MoblePalTimerFindFreeSlot</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, library.o(i.MoblePalTimerFindFreeSlot))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
</UL>

<P><STRONG><a name="[475]"></a>MoblePalTimerInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, library.o(i.MoblePalTimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
</UL>

<P><STRONG><a name="[454]"></a>MoblePalTimerProcess</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, library.o(i.MoblePalTimerProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MoblePalTimerProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalProcess
</UL>

<P><STRONG><a name="[219]"></a>MoblePalTimerSetup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, library.o(i.MoblePalTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetPublishTimer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStart
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitChangeRegularlyGeneratedInterval
</UL>

<P><STRONG><a name="[1bb]"></a>MoblePalTimerStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, library.o(i.MoblePalTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MoblePalTimerStart &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetAttentionTimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatSubscriptionSet
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitRegularlyGenerated
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessSeg
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessAck
</UL>

<P><STRONG><a name="[1ac]"></a>MoblePalTimerStartOnce</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, library.o(i.MoblePalTimerStartOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MoblePalTimerStartOnce &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnClear_TimerCallback
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatPublicationSet
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelHeartbeatPublication_TimerCallback
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_Init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetNodeIdentityState
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetDummyProxyModeState
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_ProcessPacket
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessSeg
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackCreateStartFastAdvTimer
</UL>

<P><STRONG><a name="[1ad]"></a>MoblePalTimerStop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, library.o(i.MoblePalTimerStop))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatSubscriptionSet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatPublicationSet
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelHeartbeatSubscription_TimerCallback
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelHeartbeatPublication_TimerCallback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyDelete
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitChangeRegularlyGeneratedInterval
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetNodeIdentityState
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_ProcessPacket
</UL>

<P><STRONG><a name="[3f6]"></a>MobleProvisionBearerGatt_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, library.o(i.MobleProvisionBearerGatt_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MobleProvisionBearerGatt_DeInit &rArr; MobleProvision_UnprovisionedNode_DeInit &rArr; BnrgmHealthModelAttentionTimerSet &rArr; BnrgmHealthModelSetAttentionTimer &rArr; MoblePalTimerStart &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_DeInit
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_DeleteTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattOnConnectDisconnect
</UL>

<P><STRONG><a name="[456]"></a>MobleProvisionBearerGatt_DeleteTimer</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, library.o(i.MobleProvisionBearerGatt_DeleteTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MobleProvisionBearerGatt_DeleteTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_DeInit
</UL>

<P><STRONG><a name="[458]"></a>MobleProvisionBearerGatt_FSM</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, library.o(i.MobleProvisionBearerGatt_FSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = MobleProvisionBearerGatt_FSM &rArr;  MobleProvisionBearerGatt_FSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_GetNextOperation
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_CompleteOperation
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_Transmit
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStop
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProvision_UnprovisionedGetState
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothPrvnCmpltReset
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_TimerCallback
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_ProcessPacket
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_Init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
</UL>

<P><STRONG><a name="[3f7]"></a>MobleProvisionBearerGatt_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, library.o(i.MobleProvisionBearerGatt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + Unknown Stack Size
<LI>Call Chain = MobleProvisionBearerGatt_Init &rArr; MobleProvisionBearerGatt_FSM &rArr;  MobleProvisionBearerGatt_FSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_Init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_DeleteTimer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattOnConnectDisconnect
</UL>

<P><STRONG><a name="[248]"></a>MobleProvisionBearerGatt_ProcessPacket</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, library.o(i.MobleProvisionBearerGatt_ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + Unknown Stack Size
<LI>Call Chain = MobleProvisionBearerGatt_ProcessPacket &rArr; MobleProvisionBearerGatt_FSM &rArr;  MobleProvisionBearerGatt_FSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_ProcessPacket
</UL>

<P><STRONG><a name="[31]"></a>MobleProvisionBearerGatt_RepeatTimerCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, library.o(i.MobleProvisionBearerGatt_RepeatTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = MobleProvisionBearerGatt_RepeatTimerCallback &rArr; MobleProvisionBearerGatt_Transmit &rArr; BnrgmProxyProtocol_SendData &rArr; BnrgmProxyProtocol_Notify &rArr; MoblePalGattSendNotification &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleProvisionBearerGatt_Init)
</UL>
<P><STRONG><a name="[30]"></a>MobleProvisionBearerGatt_TimerCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, library.o(i.MobleProvisionBearerGatt_TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + Unknown Stack Size
<LI>Call Chain = MobleProvisionBearerGatt_TimerCallback &rArr; MobleProvisionBearerGatt_FSM &rArr;  MobleProvisionBearerGatt_FSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothGracefulReset
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigInvalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleProvisionBearerGatt_Init)
</UL>
<P><STRONG><a name="[45a]"></a>MobleProvisionBearerGatt_Transmit</STRONG> (Thumb, 34 bytes, Stack size 136 bytes, library.o(i.MobleProvisionBearerGatt_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = MobleProvisionBearerGatt_Transmit &rArr; BnrgmProxyProtocol_SendData &rArr; BnrgmProxyProtocol_Notify &rArr; MoblePalGattSendNotification &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_GetOutputMessage
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_RepeatTimerCallback
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
</UL>

<P><STRONG><a name="[460]"></a>MobleProvisionGenerateAuthValue</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, library.o(i.MobleProvisionGenerateAuthValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleProvisionGenerateAuthValue &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
</UL>

<P><STRONG><a name="[469]"></a>MobleProvisionUpdateRole</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, library.o(i.MobleProvisionUpdateRole))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigInvalidate
</UL>

<P><STRONG><a name="[461]"></a>MobleProvision_CreateCommand</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, library.o(i.MobleProvision_CreateCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleProvision_CreateCommand &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_GetOutputMessage
</UL>

<P><STRONG><a name="[45e]"></a>MobleProvision_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, library.o(i.MobleProvision_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MobleProvision_Init &rArr; MobleProvision_UnprovisionedNode_Init &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_Init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_ProvisionerNode_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_Init
</UL>

<P><STRONG><a name="[463]"></a>MobleProvision_ProvisionerNode_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, library.o(i.MobleProvision_ProvisionerNode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MobleProvision_ProvisionerNode_Init &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_Init
</UL>

<P><STRONG><a name="[45b]"></a>MobleProvision_UnprovisionedNode_CompleteOperation</STRONG> (Thumb, 538 bytes, Stack size 32 bytes, library.o(i.MobleProvision_UnprovisionedNode_CompleteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = MobleProvision_UnprovisionedNode_CompleteOperation &rArr; MobleStackConfigValidate &rArr; MoblePalCryptoSetNetworkKey &rArr; MoblePalCryptoUpdateVectors &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothRandom
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFSM
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigValidate
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
</UL>

<P><STRONG><a name="[457]"></a>MobleProvision_UnprovisionedNode_DeInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, library.o(i.MobleProvision_UnprovisionedNode_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MobleProvision_UnprovisionedNode_DeInit &rArr; BnrgmHealthModelAttentionTimerSet &rArr; BnrgmHealthModelSetAttentionTimer &rArr; MoblePalTimerStart &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelAttentionTimerSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_DeInit
</UL>

<P><STRONG><a name="[459]"></a>MobleProvision_UnprovisionedNode_GetNextOperation</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, library.o(i.MobleProvision_UnprovisionedNode_GetNextOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MobleProvision_UnprovisionedNode_GetNextOperation &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
</UL>

<P><STRONG><a name="[45f]"></a>MobleProvision_UnprovisionedNode_GetOutputMessage</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, library.o(i.MobleProvision_UnprovisionedNode_GetOutputMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MobleProvision_UnprovisionedNode_GetOutputMessage &rArr; MobleProvision_CreateCommand &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_CreateCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_Transmit
</UL>

<P><STRONG><a name="[462]"></a>MobleProvision_UnprovisionedNode_Init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, library.o(i.MobleProvision_UnprovisionedNode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MobleProvision_UnprovisionedNode_Init &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutLittleEndian
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_Init
</UL>

<P><STRONG><a name="[45d]"></a>MobleProvision_UnprovisionedNode_SetInputMessage</STRONG> (Thumb, 1424 bytes, Stack size 224 bytes, library.o(i.MobleProvision_UnprovisionedNode_SetInputMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 988 + Unknown Stack Size
<LI>Call Chain = MobleProvision_UnprovisionedNode_SetInputMessage &rArr; MobleStackForcedSetIvIndex &rArr; MobleStackSetIvIndex &rArr; BnrgmStackSendBeaconOverGatt &rArr; MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionGenerateAuthValue
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNewNetworkKey
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetEccPublicKey
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoK1
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoInitEcc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccPublicKey
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccGenSecret
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCmac
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCcmDecrypt
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothRandom
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelAttentionTimerSet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelConfigUpdateKRState
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackForcedSetIvIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_FSM
</UL>

<P><STRONG><a name="[405]"></a>MobleQIInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, library.o(i.MobleQIInit))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleQIRemove
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattSendNotification
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInitRGN
</UL>

<P><STRONG><a name="[410]"></a>MobleQIInsertAfter</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, library.o(i.MobleQIInsertAfter))
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothPushNotification
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSplitRGN
</UL>

<P><STRONG><a name="[40f]"></a>MobleQIRemove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, library.o(i.MobleQIRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MobleQIRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleQIInit
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothPopNotification
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>

<P><STRONG><a name="[1a8]"></a>MobleSensorModelCreate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, library.o(i.MobleSensorModelCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MobleSensorModelCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SetModelSensorCbMap
</UL>

<P><STRONG><a name="[40d]"></a>MobleSensorModelReplyStatus</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, library.o(i.MobleSensorModelReplyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660 + Unknown Stack Size
<LI>Call Chain = MobleSensorModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetResponseOpCode
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMinResponseLength
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMaxResponseLength
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibrarySensorSendResponse
</UL>

<P><STRONG><a name="[3e3]"></a>MobleSetAdd</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, library.o(i.MobleSetAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleSetAdd &rArr; BnrgmFrndMgmtSubscriptionListAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSubscriptionListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionOverwrite
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionAdd
</UL>

<P><STRONG><a name="[395]"></a>MobleSetContains</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, library.o(i.MobleSetContains))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MobleSetContains
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkDecideRetransmission
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationSendPacket
</UL>

<P><STRONG><a name="[3e2]"></a>MobleSetGet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, library.o(i.MobleSetGet))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendVendorModelSubscriptionList
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendSigModelSubscriptionList
</UL>

<P><STRONG><a name="[3e5]"></a>MobleSetInit</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, library.o(i.MobleSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MobleSetInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionOverwrite
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkLoad
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkInvalidate
</UL>

<P><STRONG><a name="[3e4]"></a>MobleSetRemove</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, library.o(i.MobleSetRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleSetRemove &rArr; BnrgmFrndMgmtSubscriptionListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSubscriptionListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionDelete
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetRemoveAll
</UL>

<P><STRONG><a name="[3cd]"></a>MobleSetRemoveAll</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, library.o(i.MobleSetRemoveAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MobleSetRemoveAll &rArr; MobleSetRemove &rArr; BnrgmFrndMgmtSubscriptionListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionDeleteAll
</UL>

<P><STRONG><a name="[40e]"></a>MobleSplitRGN</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, library.o(i.MobleSplitRGN))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleQIInsertAfter
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInitRGN
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>

<P><STRONG><a name="[37]"></a>MobleStackBeaconGenerator</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, library.o(i.MobleStackBeaconGenerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = MobleStackBeaconGenerator &rArr; MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetConnectionState
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetBluetoothAddress
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetSecurityKeys
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_KR_UseNewKeyEnc
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetConfigBeacon
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetUnprovisioned
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBeaconSetSecure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleStackSetupBeacon)
</UL>
<P><STRONG><a name="[3d9]"></a>MobleStackConfigInvalidate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, library.o(i.MobleStackConfigInvalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = MobleStackConfigInvalidate &rArr; MobleConfigNetworkInvalidate &rArr; MobleConfigSave &rArr; MoblePalNvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionUpdateRole
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoForgetKeys
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkInvalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeReset
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionBearerGatt_TimerCallback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryUnprovision
</UL>

<P><STRONG><a name="[464]"></a>MobleStackConfigValidate</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, library.o(i.MobleStackConfigValidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = MobleStackConfigValidate &rArr; MoblePalCryptoSetNetworkKey &rArr; MoblePalCryptoUpdateVectors &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ProvisionCallback
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionUpdateRole
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNodeIdntyState
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNetworkKey
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetIvIndex
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetDevKey
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetAppKey
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoForgetKeys
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSaveSeq
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetNodeIdentityState
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetDummyProxyModeState
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_CompleteOperation
</UL>

<P><STRONG><a name="[36]"></a>MobleStackConnectionCallback</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, library.o(i.MobleStackConnectionCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = MobleStackConnectionCallback &rArr; MobleGattOnConnectDisconnect &rArr; MobleProvisionBearerGatt_Init &rArr; MobleProvisionBearerGatt_FSM &rArr;  MobleProvisionBearerGatt_FSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetConnectionState
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattOnConnectDisconnect
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSendBeaconOverGatt
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ResetFilter
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitSuspendAll
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitResumeAll
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFastAdvTimeoutTimerCallback
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFSM
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackCreateStartFastAdvTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleStackInit)
</UL>
<P><STRONG><a name="[46c]"></a>MobleStackCreateStartFastAdvTimer</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, library.o(i.MobleStackCreateStartFastAdvTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MobleStackCreateStartFastAdvTimer &rArr; MoblePalTimerStartOnce &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitChangeRegularlyGeneratedInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConnectionCallback
</UL>

<P><STRONG><a name="[465]"></a>MobleStackFSM</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, library.o(i.MobleStackFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = MobleStackFSM &rArr; MobleStackSetupBeacon &rArr; MobleTransmitRegularlyGenerated &rArr; MobleTransmitTimerCallback &rArr; MobleTransmitNow &rArr; BnrgmTransmitQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothSleep
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitResumeAll
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitOutOfTurn
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSetupBeacon
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_CompleteOperation
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackTimerCallback
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSendData
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConnectionCallback
</UL>

<P><STRONG><a name="[32]"></a>MobleStackFastAdvTimeoutTimerCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, library.o(i.MobleStackFastAdvTimeoutTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = MobleStackFastAdvTimeoutTimerCallback &rArr; BnrgmTransmitChangeRegularlyGeneratedInterval &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothRandom
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitChangeRegularlyGeneratedInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConnectionCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleStackCreateStartFastAdvTimer)
</UL>
<P><STRONG><a name="[466]"></a>MobleStackForcedSetIvIndex</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, library.o(i.MobleStackForcedSetIvIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = MobleStackForcedSetIvIndex &rArr; MobleStackSetIvIndex &rArr; BnrgmStackSendBeaconOverGatt &rArr; MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkReplayCacheClearAll
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSetIvIndex
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackResetSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessIvFromBeacon
</UL>

<P><STRONG><a name="[38]"></a>MobleStackGattBeaconGenerator</STRONG> (Thumb, 408 bytes, Stack size 112 bytes, library.o(i.MobleStackGattBeaconGenerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = MobleStackGattBeaconGenerator &rArr; MoblePalCryptoIdentityKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetConnectionState
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoIdentityKey
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetNodeIdntyToBeAdvt
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetNetworkIdToBeAdvt
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothRandom
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattBeaconSetSectionGeneric
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_KR_UseNewKeyEnc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoCalcNodeIdentityHash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleStackSetupBeacon)
</UL>
<P><STRONG><a name="[34]"></a>MobleStackGattSetup</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, library.o(i.MobleStackGattSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = MobleStackGattSetup &rArr; MobleGattSetup &rArr; MoblePalGattAddCharacteristic &rArr; aci_gatt_add_char &rArr; Gatt_Add_Characteristic &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleStackInit)
</UL>
<P><STRONG><a name="[406]"></a>MobleStackInit</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, library.o(i.MobleStackInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = MobleStackInit &rArr; MoblePalCryptoSetNetworkKey &rArr; MoblePalCryptoUpdateVectors &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvisionUpdateRole
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalInit
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNetworkKey
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetIvIndex
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetDevKey
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetAppKey
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoInit
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothGracefulReset
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleGattInit
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkLoad
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigCheck
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitInit
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFSM
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryInit
</UL>

<P><STRONG><a name="[478]"></a>MobleStackIvUpdateSwitchToNormal</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, library.o(i.MobleStackIvUpdateSwitchToNormal))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = MobleStackIvUpdateSwitchToNormal &rArr; BnrgmStackSendBeaconOverGatt &rArr; MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSendBeaconOverGatt
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSendSecurityUpdate
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackResetSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessIvUpdate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessIvFromBeacon
</UL>

<P><STRONG><a name="[479]"></a>MobleStackIvUpdateSwitchToProgress</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, library.o(i.MobleStackIvUpdateSwitchToProgress))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = MobleStackIvUpdateSwitchToProgress &rArr; MobleStackSetIvIndex &rArr; BnrgmStackSendBeaconOverGatt &rArr; MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkReplayCacheClear
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSetIvIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessIvUpdate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessIvFromBeacon
</UL>

<P><STRONG><a name="[40b]"></a>MobleStackProcess</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, library.o(i.MobleStackProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 980 + Unknown Stack Size
<LI>Call Chain = MobleStackProcess &rArr; BnrgmFrndMgmtFriendshipProcess &rArr; BnrgmFrndFnProcess &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalProcess
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationProcess
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtFriendshipProcess
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessIvUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryProcess
</UL>

<P><STRONG><a name="[247]"></a>MobleStackProcessBeacon</STRONG> (Thumb, 316 bytes, Stack size 72 bytes, library.o(i.MobleStackProcessBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + Unknown Stack Size
<LI>Call Chain = MobleStackProcessBeacon &rArr; MobleStackProcessIvFromBeacon &rArr; MobleStackIvUpdateSwitchToProgress &rArr; MobleStackSetIvIndex &rArr; BnrgmStackSendBeaconOverGatt &rArr; MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetSecurityKeys
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAuthenticateSecureNetworkBeacon
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkUpdateNeighbours
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelConfigUpdateKRState
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessIvFromBeacon
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_ProcessPacket
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackScanCallback
</UL>

<P><STRONG><a name="[246]"></a>MobleStackProcessData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, library.o(i.MobleStackProcessData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308 + Unknown Stack Size
<LI>Call Chain = MobleStackProcessData &rArr; MobleNetworkProcessData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_ProcessPacket
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackScanCallback
</UL>

<P><STRONG><a name="[1f4]"></a>MobleStackProcessIvFromBeacon</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, library.o(i.MobleStackProcessIvFromBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = MobleStackProcessIvFromBeacon &rArr; MobleStackIvUpdateSwitchToProgress &rArr; MobleStackSetIvIndex &rArr; BnrgmStackSendBeaconOverGatt &rArr; MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportIsBusy
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackIvUpdateSwitchToProgress
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackIvUpdateSwitchToNormal
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackForcedSetIvIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndUpdate
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessBeacon
</UL>

<P><STRONG><a name="[47a]"></a>MobleStackProcessIvUpdate</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, library.o(i.MobleStackProcessIvUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = MobleStackProcessIvUpdate &rArr; MobleStackIvUpdateSwitchToProgress &rArr; MobleStackSetIvIndex &rArr; BnrgmStackSendBeaconOverGatt &rArr; MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportIsBusy
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackIvUpdateSwitchToProgress
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackIvUpdateSwitchToNormal
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcess
</UL>

<P><STRONG><a name="[471]"></a>MobleStackResetSeq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, library.o(i.MobleStackResetSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MobleStackResetSeq &rArr; MobleConfigSaveSeq &rArr; MobleConfigSave &rArr; MoblePalNvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigSaveSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackIvUpdateSwitchToNormal
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackForcedSetIvIndex
</UL>

<P><STRONG><a name="[33]"></a>MobleStackScanCallback</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, library.o(i.MobleStackScanCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332 + Unknown Stack Size
<LI>Call Chain = MobleStackScanCallback &rArr; MobleStackProcessData &rArr; MobleNetworkProcessData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessBeacon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleStackInit)
</UL>
<P><STRONG><a name="[41f]"></a>MobleStackSendData</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, library.o(i.MobleStackSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = MobleStackSendData &rArr; MobleStackFSM &rArr; MobleStackSetupBeacon &rArr; MobleTransmitRegularlyGenerated &rArr; MobleTransmitTimerCallback &rArr; MobleTransmitNow &rArr; BnrgmTransmitQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitSend
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_SendData
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFSM
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendDataEx
</UL>

<P><STRONG><a name="[470]"></a>MobleStackSetIvIndex</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, library.o(i.MobleStackSetIvIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = MobleStackSetIvIndex &rArr; BnrgmStackSendBeaconOverGatt &rArr; MobleBeaconSetSecure &rArr; MoblePalCryptoAuthenticateSecureNetworkBeacon &rArr; MoblePalCryptoBeaconKey &rArr; MoblePalCryptoK1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetIvIndex
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSendBeaconOverGatt
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSendSecurityUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackIvUpdateSwitchToProgress
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackForcedSetIvIndex
</UL>

<P><STRONG><a name="[46e]"></a>MobleStackSetupBeacon</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, library.o(i.MobleStackSetupBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = MobleStackSetupBeacon &rArr; MobleTransmitRegularlyGenerated &rArr; MobleTransmitTimerCallback &rArr; MobleTransmitNow &rArr; BnrgmTransmitQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothRandom
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitRegularlyGenerated
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackStartPBADVUnprovisioned
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFSM
</UL>

<P><STRONG><a name="[47c]"></a>MobleStackStartPBADVUnprovisioned</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, library.o(i.MobleStackStartPBADVUnprovisioned))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleStackStartPBADVUnprovisioned
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSetupBeacon
</UL>

<P><STRONG><a name="[35]"></a>MobleStackTimerCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, library.o(i.MobleStackTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = MobleStackTimerCallback &rArr; MobleStackFSM &rArr; MobleStackSetupBeacon &rArr; MobleTransmitRegularlyGenerated &rArr; MobleTransmitTimerCallback &rArr; MobleTransmitNow &rArr; BnrgmTransmitQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleStackInit)
</UL>
<P><STRONG><a name="[47e]"></a>MobleTransControl_ProcessUnSegCtrlReq</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, library.o(i.MobleTransControl_ProcessUnSegCtrlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092 + Unknown Stack Size
<LI>Call Chain = MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransControlProcessHeartbeat
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransport_Parse_UnSegCtrlMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
</UL>

<P><STRONG><a name="[486]"></a>MobleTransSarInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, library.o(i.MobleTransSarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MobleTransSarInit &rArr; MobleMemAlloc &rArr; MobleSplitRGN &rArr; MobleInitRGN
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportInit
</UL>

<P><STRONG><a name="[488]"></a>MobleTransSarProcessAck</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, library.o(i.MobleTransSarProcessAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = MobleTransSarProcessAck &rArr;  MobleTransSarSendEx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htobe32
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransEraseTimer
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStart
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
</UL>

<P><STRONG><a name="[489]"></a>MobleTransSarProcessSeg</STRONG> (Thumb, 786 bytes, Stack size 56 bytes, library.o(i.MobleTransSarProcessSeg))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = MobleTransSarProcessSeg &rArr; MobleTransSarAssemble &rArr; MoblePalCryptoDecryptApp &rArr; MoblePalCryptoAesCcmDecrypt &rArr; AES_CCM_Decrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarCalcSeqAuth
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransEraseTimer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStart
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
</UL>

<P><STRONG><a name="[48b]"></a>MobleTransSarSend</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, library.o(i.MobleTransSarSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1460 + Unknown Stack Size
<LI>Call Chain = MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportSendData
</UL>

<P><STRONG><a name="[48c]"></a>MobleTrans_ProcessSegCtrlReq</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, library.o(i.MobleTrans_ProcessSegCtrlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MobleTrans_ProcessSegCtrlReq &rArr; MobleTransport_Parse_SegCtrlMsg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransport_Parse_SegCtrlMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
</UL>

<P><STRONG><a name="[48e]"></a>MobleTransmitCancelSlot</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, library.o(i.MobleTransmitCancelSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MobleTransmitCancelSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitRegularlyGenerated
</UL>

<P><STRONG><a name="[490]"></a>MobleTransmitFindFreeSlot</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, library.o(i.MobleTransmitFindFreeSlot))
<BR><BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitSetup
</UL>

<P><STRONG><a name="[477]"></a>MobleTransmitInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, library.o(i.MobleTransmitInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = MobleTransmitInit &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackInit
</UL>

<P><STRONG><a name="[263]"></a>MobleTransmitNow</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, library.o(i.MobleTransmitNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MobleTransmitNow &rArr; BnrgmTransmitQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitQueuePush
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitSend
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitTimerCallback
</UL>

<P><STRONG><a name="[46f]"></a>MobleTransmitOutOfTurn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, library.o(i.MobleTransmitOutOfTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MobleTransmitOutOfTurn &rArr; MobleTransmitTimerCallback &rArr; MobleTransmitNow &rArr; BnrgmTransmitQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitTimerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFSM
</UL>

<P><STRONG><a name="[47d]"></a>MobleTransmitRegularlyGenerated</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, library.o(i.MobleTransmitRegularlyGenerated))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MobleTransmitRegularlyGenerated &rArr; MobleTransmitTimerCallback &rArr; MobleTransmitNow &rArr; BnrgmTransmitQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStart
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitTimerCallback
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitSetup
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitCancelSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSetupBeacon
</UL>

<P><STRONG><a name="[46b]"></a>MobleTransmitResumeAll</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, library.o(i.MobleTransmitResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = MobleTransmitResumeAll &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFSM
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConnectionCallback
</UL>

<P><STRONG><a name="[48f]"></a>MobleTransmitSetup</STRONG> (Thumb, 90 bytes, Stack size 36 bytes, library.o(i.MobleTransmitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MobleTransmitSetup &rArr; MoblePalTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitFindFreeSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitRegularlyGenerated
</UL>

<P><STRONG><a name="[46d]"></a>MobleTransmitSuspendAll</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, library.o(i.MobleTransmitSuspendAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = MobleTransmitSuspendAll &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConnectionCallback
</UL>

<P><STRONG><a name="[3e]"></a>MobleTransmitTimerCallback</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, library.o(i.MobleTransmitTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MobleTransmitTimerCallback &rArr; MobleTransmitNow &rArr; BnrgmTransmitQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitNow
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitRegularlyGenerated
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransmitOutOfTurn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleTransmitSetup)
</UL>
<P><STRONG><a name="[38b]"></a>MobleTransportInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, library.o(i.MobleTransportInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MobleTransportInit &rArr; MobleNetworkLayerInit &rArr; MobleNetworkReplayCacheClearAll &rArr; MobleNetworkReplayCacheClear &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkLayerInit
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarInit
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationInit
</UL>

<P><STRONG><a name="[47b]"></a>MobleTransportIsBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, library.o(i.MobleTransportIsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessIvUpdate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessIvFromBeacon
</UL>

<P><STRONG><a name="[491]"></a>MobleTransportParseHdr</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, library.o(i.MobleTransportParseHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MobleTransportParseHdr
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
</UL>

<P><STRONG><a name="[41b]"></a>MobleTransportProcessData</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, library.o(i.MobleTransportProcessData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + Unknown Stack Size
<LI>Call Chain = MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessUnseg
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleAddressIsNew
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtTranspSegRecvd
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtQueLpnPkt
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportParseHdr
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTrans_ProcessSegCtrlReq
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessSeg
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessAck
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransControl_ProcessUnSegCtrlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendData
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
</UL>

<P><STRONG><a name="[484]"></a>MobleTransportRenderHdr</STRONG> (Thumb, 226 bytes, Stack size 12 bytes, library.o(i.MobleTransportRenderHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MobleTransportRenderHdr &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendAck
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
</UL>

<P><STRONG><a name="[394]"></a>MobleTransportSendData</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, library.o(i.MobleTransportSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1492 + Unknown Stack Size
<LI>Call Chain = MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSend
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationSendPacket
</UL>

<P><STRONG><a name="[1af]"></a>MobleTransportSendHeartbeat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, library.o(i.MobleTransportSendHeartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MobleTransportSendHeartbeat &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSendHeartbeat
</UL>

<P><STRONG><a name="[48d]"></a>MobleTransport_Parse_SegCtrlMsg</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, library.o(i.MobleTransport_Parse_SegCtrlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MobleTransport_Parse_SegCtrlMsg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTrans_ProcessSegCtrlReq
</UL>

<P><STRONG><a name="[47f]"></a>MobleTransport_Parse_UnSegCtrlMsg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, library.o(i.MobleTransport_Parse_UnSegCtrlMsg))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransControl_ProcessUnSegCtrlReq
</UL>

<P><STRONG><a name="[1f3]"></a>ModelConfigUpdateKRState</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, library.o(i.ModelConfigUpdateKRState))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = ModelConfigUpdateKRState &rArr; MoblePalCryptoSwitchKeys &rArr; MoblePalCryptoSetNetworkKey &rArr; MoblePalCryptoUpdateVectors &rArr; MoblePalCryptoK2 &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSwitchKeys
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNewNetworkKey
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSwitchKeys
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSendSecurityUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyUpdate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessKeyRefreshPhaseSet
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndUpdate
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackProcessBeacon
</UL>

<P><STRONG><a name="[150]"></a>Modify_PWM</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, pwm_handlers.o(i.Modify_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Modify_PWM &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Generic_OnOff_Set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Generic_Level_Set
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_PWM_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Vendor_LEDControl
</UL>

<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bluenrg1_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CrashHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[4a6]"></a>NVIC_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartIrqConfig
</UL>

<P><STRONG><a name="[e]"></a>NVM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.NVM_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[138]"></a>Osal_MemCmp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_search_blackList
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Cmp
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Repeated_Attacks_Timer_cb
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[130]"></a>Osal_MemCpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_local_identity_address
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_to_sdb
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_get_security_data_record
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_push
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_bd_addr
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StaticRandAddr
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advParamsCheckAndSet
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Read_ConfigData
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_validate_prepare_req
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_CSRK
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Connection_Complete_Handler
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Write
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Read
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Compact
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Clone
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_corrupted_acl_packet
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_Notif_Or_Ind
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event_push
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event_push
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Typ_Req_Pdu
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_Blob_Req_Pdu
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event_push
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Check_Not_Error_Resp
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_uuid
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Scanning_Initiating_Buffers
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Advertising_Buffers
</UL>

<P><STRONG><a name="[27f]"></a>Osal_MemSet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_MI_Start_Encryption
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_to_sdb
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Clear_White_List
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_HAL_Init
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_vInit_Struct
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Timer_cb
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
</UL>

<P><STRONG><a name="[43e]"></a>PKA_GetData</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bluenrg1_pka.o(i.PKA_GetData))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccPublicKey
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccGenSecret
</UL>

<P><STRONG><a name="[1b]"></a>PKA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.PKA_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[271]"></a>PKA_Offline_Processing_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, hci.o(i.PKA_Offline_Processing_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[50a]"></a>PKA_Reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluenrg1_pka.o(i.PKA_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[43a]"></a>PKA_SetData</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bluenrg1_pka.o(i.PKA_SetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PKA_SetData
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetEccPublicKey
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoInitEcc
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccGenSecret
</UL>

<P><STRONG><a name="[43b]"></a>PKA_StartProcessing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluenrg1_pka.o(i.PKA_StartProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccPublicKey
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccGenSecret
</UL>

<P><STRONG><a name="[43d]"></a>PKA_VerifyProcess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg1_pka.o(i.PKA_VerifyProcess))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccPublicKey
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccGenSecret
</UL>

<P><STRONG><a name="[43c]"></a>PKA_WaitProcess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg1_pka.o(i.PKA_WaitProcess))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccPublicKey
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetEccGenSecret
</UL>

<P><STRONG><a name="[495]"></a>PM_Clone_Pckt</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, pm.o(i.PM_Clone_Pckt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Clone_Pckt &rArr; Mem_Buff_Clone &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Clone
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
</UL>

<P><STRONG><a name="[333]"></a>PM_Compact</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, pm.o(i.PM_Compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Compact &rArr; Mem_Buff_Compact &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Get_Chain_Count
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Compact
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[284]"></a>PM_Copy_Pckt_Data</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, pm.o(i.PM_Copy_Pckt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Copy_Pckt_Data &rArr; Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_receiving
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event_push
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event_push
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event_push
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event_push
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event_push
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event_push
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[49a]"></a>PM_Eng_Config</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, pm.o(i.PM_Eng_Config))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
</UL>

<P><STRONG><a name="[331]"></a>PM_Extract_Pdu_MBuff</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, pm.o(i.PM_Extract_Pdu_MBuff))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[2de]"></a>PM_Get_Available_Buffer</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Available_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
</UL>

<P><STRONG><a name="[497]"></a>PM_Get_Mem_Buff_Count</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Mem_Buff_Count))
<BR><BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Get_Chain_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_head
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_full_on_packt
</UL>

<P><STRONG><a name="[2df]"></a>PM_Get_Pckt</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Check_And_Set
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_receive_data
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Connect_Update_Req
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_2octets_packet_send
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>

<P><STRONG><a name="[16e]"></a>PM_Init</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, pm.o(i.PM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Init
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Eng_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[28c]"></a>PM_Pckt_Cmp</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, pm.o(i.PM_Pckt_Cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = PM_Pckt_Cmp &rArr; Mem_Buff_Cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_receiving
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
</UL>

<P><STRONG><a name="[286]"></a>PM_Release_Acl_Pckt</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, pm.o(i.PM_Release_Acl_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Release
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Get_Chain_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Connect_Update_Req
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_corrupted_acl_packet
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Reset_To_Closed_State
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>

<P><STRONG><a name="[49d]"></a>PM_Resize_Pckt_Pdu_Size</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, pm.o(i.PM_Resize_Pckt_Pdu_Size))
<BR><BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Check_And_Set
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Resize
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Get_Chain_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
</UL>

<P><STRONG><a name="[132]"></a>PM_Write_Pckt_Data</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, pm.o(i.PM_Write_Pckt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Write_Pckt_Data &rArr; Mem_Buff_Write &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_type_val_entry
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_Notif_Or_Ind
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Typ_Req_Pdu
</UL>

<P><STRONG><a name="[342]"></a>PRIVWHIT_u8SearchAddrInList</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIVWHIT_u8SearchAddrInList))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[4a0]"></a>PRIVWHIT_vInit_Struct</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIVWHIT_vInit_Struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PRIVWHIT_vInit_Struct &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[581]"></a>PRIV_SearchAddrInWhiteList</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_SearchAddrInWhiteList))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_scan_state
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[508]"></a>PRIV_controller_privacy_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci.o(i.PRIV_controller_privacy_csr_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[580]"></a>PRIV_u32ProcessAdvPacket_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_u32ProcessAdvPacket_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_scan_state
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[270]"></a>PRIV_u8OfflineProcessing_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_u8OfflineProcessing_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[343]"></a>PRIV_vGeneratePrivateAddress_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_vGeneratePrivateAddress_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[58c]"></a>PRIV_vGenerate_hci_le_direct_advertising_report_event_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_vGenerate_hci_le_direct_advertising_report_event_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_scan_data
</UL>

<P><STRONG><a name="[589]"></a>PRIV_vGenerate_hci_le_enhanced_connection_complete_event_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_vGenerate_hci_le_enhanced_connection_complete_event_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[37d]"></a>PWM2_handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, pwm_handlers.o(i.PWM2_handler))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFT1B_Handler
</UL>

<P><STRONG><a name="[37e]"></a>PWM3_PWM4_handler</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, pwm_handlers.o(i.PWM3_PWM4_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PWM3_PWM4_handler &rArr; Ton_sorting
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ton_sorting
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFT2B_Handler
</UL>

<P><STRONG><a name="[4a2]"></a>PWM_Init</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, pwm_config.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PWM_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFT_TnXEN
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFT_StructInit
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFT_SetCounter2
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFT_Init
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFT_EnableIT
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.PendSV_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[4aa]"></a>Prepare_Write_Resp</STRONG> (Thumb, 370 bytes, Stack size unknown bytes, att.o(i.Prepare_Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Prepare_Write_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Clone_Pckt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_full_on_packt
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[2db]"></a>Process_Peer_Client_Data</STRONG> (Thumb, 502 bytes, Stack size unknown bytes, gatt_server.o(i.Process_Peer_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Process_Peer_Client_Data &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[2d9]"></a>Process_Peer_Server_Data</STRONG> (Thumb, 394 bytes, Stack size unknown bytes, gatt_server.o(i.Process_Peer_Server_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Process_Peer_Server_Data &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event_push
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[14f]"></a>PwmValueMapping</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, common.o(i.PwmValueMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PwmValueMapping &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Generic_Level_Set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Vendor_LEDControl
</UL>

<P><STRONG><a name="[17c]"></a>RAL_Isr</STRONG> (Thumb, 500 bytes, Stack size unknown bytes, ll_isr.o(i.RAL_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RAL_Isr &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rssi
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ExpiryCallback
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Flash_Write_On_Going
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Handler
</UL>

<P><STRONG><a name="[7]"></a>RESET_HANDLER</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_bluenrg1.o(i.RESET_HANDLER))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660 + Unknown Stack Size
<LI>Call Chain = RESET_HANDLER &rArr; main &rArr; BluenrgMesh_ModelsProcess &rArr; Vendor_Process &rArr; BluenrgMesh_ModelsSendDelayedPacket &rArr; BluenrgMesh_SendResponse &rArr; MobleLibrarySendResponse &rArr; MobleBluemeshModelResponse &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.RTC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[4ae]"></a>Read_Blob_Resp</STRONG> (Thumb, 320 bytes, Stack size unknown bytes, att.o(i.Read_Blob_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Read_Blob_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[4eb]"></a>Read_Buffer_Push</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdk_eval_com.o(i.Read_Buffer_Push))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOProcessInputData
</UL>

<P><STRONG><a name="[4b0]"></a>Read_By_Grp_Type_Resp</STRONG> (Thumb, 474 bytes, Stack size unknown bytes, att.o(i.Read_By_Grp_Type_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Read_By_Grp_Type_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_From_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[4ac]"></a>Read_By_Type_Resp</STRONG> (Thumb, 712 bytes, Stack size unknown bytes, att.o(i.Read_By_Type_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Read_By_Type_Resp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[4af]"></a>Read_Multi_Resp</STRONG> (Thumb, 398 bytes, Stack size unknown bytes, att.o(i.Read_Multi_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Read_Multi_Resp &rArr; PM_Write_Pckt_Data &rArr; Mem_Buff_Write &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[4ad]"></a>Read_Resp</STRONG> (Thumb, 298 bytes, Stack size unknown bytes, att.o(i.Read_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Read_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[4be]"></a>Reclassify_All_Channels</STRONG> (Thumb, 182 bytes, Stack size unknown bytes, ll_routines_master.o(i.Reclassify_All_Channels))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_All_Channels_ucfg
</UL>

<P><STRONG><a name="[4bf]"></a>Reclassify_All_Channels_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.Reclassify_All_Channels_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Reclassify_All_Channels_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_All_Channels
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[4c0]"></a>SDB_Add_Record</STRONG> (Thumb, 384 bytes, Stack size unknown bytes, sdb.o(i.SDB_Add_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_write_record
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_invalidate_record
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_to_sdb
</UL>

<P><STRONG><a name="[4c6]"></a>SDB_Find_Matching_LTK</STRONG> (Thumb, 154 bytes, Stack size unknown bytes, sdb.o(i.SDB_Find_Matching_LTK))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SDB_Find_Matching_LTK &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_get_security_data_record
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
</UL>

<P><STRONG><a name="[4ca]"></a>SDB_Find_Record</STRONG> (Thumb, 190 bytes, Stack size unknown bytes, sdb.o(i.SDB_Find_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Is_Device_Bonded
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
</UL>

<P><STRONG><a name="[2a8]"></a>SDB_Get_Number_Of_Valid_Records</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, sdb.o(i.SDB_Get_Number_Of_Valid_Records))
<BR><BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
</UL>

<P><STRONG><a name="[2eb]"></a>SDB_flash_write_client_data</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, sdb.o(i.SDB_flash_write_client_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SDB_flash_write_client_data &rArr; SM_Resolve_Private_Address &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[4c8]"></a>SDB_get_security_data_record</STRONG> (Thumb, 226 bytes, Stack size unknown bytes, sdb.o(i.SDB_get_security_data_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SDB_get_security_data_record &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[268]"></a>SDB_read_peer_bonded_data</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, sdb.o(i.SDB_read_peer_bonded_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SDB_read_peer_bonded_data &rArr; SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[4c9]"></a>SMA_Diversify</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_Diversify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMA_Diversify &rArr; LL_Encrypt_Plain_Data_ucfg &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_CSRK
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
</UL>

<P><STRONG><a name="[4ce]"></a>SMA_Generate_CSRK</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_Generate_CSRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMA_Generate_CSRK &rArr; SMA_Diversify &rArr; LL_Encrypt_Plain_Data_ucfg &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[4cf]"></a>SMA_Generate_IRK</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_Generate_IRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMA_Generate_IRK &rArr; SMA_Diversify &rArr; LL_Encrypt_Plain_Data_ucfg &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
</UL>

<P><STRONG><a name="[4d0]"></a>SMA_LP_s1_Generate_STK</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_LP_s1_Generate_STK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMA_LP_s1_Generate_STK &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
</UL>

<P><STRONG><a name="[4c7]"></a>SMA_generate_EDIV_recovery_DIV</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_generate_EDIV_recovery_DIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMA_generate_EDIV_recovery_DIV &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
</UL>

<P><STRONG><a name="[2d8]"></a>SMP_Check_Is_Device_Bonded</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, smp_common.o(i.SMP_Check_Is_Device_Bonded))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SMP_Check_Is_Device_Bonded &rArr; SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[2d7]"></a>SMP_Forget_Device_by_ConnHandle</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, smp_common.o(i.SMP_Forget_Device_by_ConnHandle))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[171]"></a>SMP_Init</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, smp_common.o(i.SMP_Init))
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_init
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_init_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[4d2]"></a>SMP_MI_PairingRequest_Send</STRONG> (Thumb, 300 bytes, Stack size unknown bytes, securitymgr.o(i.SMP_MI_PairingRequest_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SMP_MI_PairingRequest_Send &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_MI_Start_Encryption_ucfg
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_search_blackList
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_Pairing_ReqResp_Packet
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_AuthReq_Field
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_SecurityRequest_Receive
</UL>

<P><STRONG><a name="[167]"></a>SMP_Process_Q</STRONG> (Thumb, 288 bytes, Stack size unknown bytes, securitymgr.o(i.SMP_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SMP_Process_Q &rArr; smp_Process_Rx_Packet_wrt_Current_State &rArr; smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg &rArr; smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt &rArr; smp____MI_SecurityRequest_Receive &rArr; smp_pairing_failed_send &rArr; smp_pairing_2octets_packet_send &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_check_for_ecc_pk_generation_request_ucfg
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Receive
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_head
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_is_empty
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[4df]"></a>SMP_Repeated_Attacks_Timer_cb</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, smp_common.o(i.SMP_Repeated_Attacks_Timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SMP_Repeated_Attacks_Timer_cb &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[4e0]"></a>SMP_Timer_cb</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, smp_common.o(i.SMP_Timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_Timer_cb &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[4e2]"></a>SMP_Validate_Signed_Packet</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, smp_common.o(i.SMP_Validate_Signed_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SMP_Validate_Signed_Packet &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_CSRK
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[26e]"></a>SM_Check_Encryption_KeySize</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_common.o(i.SM_Check_Encryption_KeySize))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>

<P><STRONG><a name="[2ae]"></a>SM_Generate_Resolvable_Private_Address</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SM_Generate_Resolvable_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SM_Generate_Resolvable_Private_Address &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[26d]"></a>SM_Get_Link_Status</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, smp_common.o(i.SM_Get_Link_Status))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>

<P><STRONG><a name="[158]"></a>SM_Get_Remote_Device_Info</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, smp_common.o(i.SM_Get_Remote_Device_Info))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Check_Encryption_KeySize
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Forget_Device_by_ConnHandle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Is_Device_Bonded
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Link_Status
</UL>

<P><STRONG><a name="[338]"></a>SM_L2CAP_Encryption_changed_Handler_ISR</STRONG> (Thumb, 254 bytes, Stack size unknown bytes, smp_common.o(i.SM_L2CAP_Encryption_changed_Handler_ISR))
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[32f]"></a>SM_L2CAP_Handler</STRONG> (Thumb, 238 bytes, Stack size unknown bytes, smp_common.o(i.SM_L2CAP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SM_L2CAP_Handler &rArr; smp_Keys_Distribution_Complete &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[32a]"></a>SM_L2CAP_Handler_ISR</STRONG> (Thumb, 290 bytes, Stack size unknown bytes, smp_common.o(i.SM_L2CAP_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Connection_Complete_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[4cb]"></a>SM_Resolve_Private_Address</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SM_Resolve_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SM_Resolve_Private_Address &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
</UL>

<P><STRONG><a name="[10]"></a>SPI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.SPI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.SVC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[31f]"></a>SdkEvalComIOConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sdk_eval_com.o(i.SdkEvalComIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SdkEvalComIOConfig &rArr; SdkEvalComUartInit &rArr; UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartIrqConfig
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[27]"></a>SdkEvalComIOProcessInputData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sdk_eval_com.o(i.SdkEvalComIOProcessInputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdkEvalComIOProcessInputData
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Buffer_Push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(i.InitDevice)
</UL>
<P><STRONG><a name="[501]"></a>SdkEvalComIOReceiveData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdk_eval_com.o(i.SdkEvalComIOReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[4e9]"></a>SdkEvalComUartInit</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sdk_eval_com.o(i.SdkEvalComUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SdkEvalComUartInit &rArr; UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxFifoIrqLevelConfig
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOConfig
</UL>

<P><STRONG><a name="[4ea]"></a>SdkEvalComUartIrqConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sdk_eval_com.o(i.SdkEvalComUartIrqConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SdkEvalComUartIrqConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOConfig
</UL>

<P><STRONG><a name="[311]"></a>SdkEvalGetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdk_eval_config.o(i.SdkEvalGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ButtonGpioPin
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
</UL>

<P><STRONG><a name="[31e]"></a>SdkEvalIdentification</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdk_eval_config.o(i.SdkEvalIdentification))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[322]"></a>SdkEvalLedInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sdk_eval_led.o(i.SdkEvalLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SdkEvalLedInit &rArr; SdkEvalLedOff &rArr; Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOff
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[144]"></a>SdkEvalLedOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdk_eval_led.o(i.SdkEvalLedOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdkEvalLedOff &rArr; Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_BleGattDisconnectionCompleteCb
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed
</UL>

<P><STRONG><a name="[143]"></a>SdkEvalLedOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdk_eval_led.o(i.SdkEvalLedOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdkEvalLedOn &rArr; Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_BleGattConnectionCompleteCb
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed
</UL>

<P><STRONG><a name="[2c9]"></a>SdkEvalPushButtonClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdk_eval_button.o(i.SdkEvalPushButtonClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdkEvalPushButtonClearITPendingBit &rArr; Get_ButtonGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearITPendingBit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ButtonGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>

<P><STRONG><a name="[2c8]"></a>SdkEvalPushButtonGetITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdk_eval_button.o(i.SdkEvalPushButtonGetITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdkEvalPushButtonGetITPendingBit &rArr; Get_ButtonGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetITPendingBit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ButtonGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>

<P><STRONG><a name="[30f]"></a>SdkEvalPushButtonGetState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sdk_eval_button.o(i.SdkEvalPushButtonGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdkEvalPushButtonGetState &rArr; Get_ButtonGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ButtonGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetButtonState
</UL>

<P><STRONG><a name="[4f1]"></a>Select_Next_Notification_Client</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, gatt_server.o(i.Select_Next_Notification_Client))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
</UL>

<P><STRONG><a name="[2e8]"></a>Send_Notif_Or_Ind</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, gatt_server.o(i.Send_Notif_Or_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Next_Notification_Client
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>

<P><STRONG><a name="[55]"></a>SensorModelServer_GetOpcodeTableCb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sensors.o(i.SensorModelServer_GetOpcodeTableCb))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>SensorModelServer_GetStatusRequestCb</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sensors.o(i.SensorModelServer_GetStatusRequestCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SensorModelServer_GetStatusRequestCb &rArr; Sensor_Descriptor_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Descriptor_Status
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>SensorModelServer_ProcessMessageCb</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, sensors.o(i.SensorModelServer_ProcessMessageCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1740 + Unknown Stack Size
<LI>Call Chain = SensorModelServer_ProcessMessageCb &rArr; Sensor_SendResponse &rArr; MobleLibrarySensorSendResponse &rArr; MobleSensorModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_SendResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>SensorModel_Add_Server</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, library.o(i.SensorModel_Add_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SensorModel_Add_Server &rArr; MobleApplicationAddModel
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationAddModel
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_AddSensorModels
</UL>

<P><STRONG><a name="[4f3]"></a>Sensor_Data_Status</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sensors.o(i.Sensor_Data_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_Data_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorModelServer_GetStatusRequestCb
</UL>

<P><STRONG><a name="[4f2]"></a>Sensor_Descriptor_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sensors.o(i.Sensor_Descriptor_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_Descriptor_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorModelServer_GetStatusRequestCb
</UL>

<P><STRONG><a name="[19f]"></a>Sensor_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sensors.o(i.Sensor_Process))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsProcess
</UL>

<P><STRONG><a name="[4f4]"></a>Sensor_SendResponse</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, library.o(i.Sensor_SendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1700 + Unknown Stack Size
<LI>Call Chain = Sensor_SendResponse &rArr; MobleLibrarySensorSendResponse &rArr; MobleSensorModelReplyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibrarySensorSendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorModelServer_ProcessMessageCb
</UL>

<P><STRONG><a name="[14a]"></a>SetLed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal.o(i.SetLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetLed &rArr; SdkEvalLedOn &rArr; Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOn
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedOff
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Generic_OnOff_Set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Generic_LevelDelta_Set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_LedCtrl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_CheckForUnprovision
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Light_Lightness_Default_Set
</UL>

<P><STRONG><a name="[4fb]"></a>Set_Host_Timer_value</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, host_timer.o(i.Set_Host_Timer_value))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
</UL>

<P><STRONG><a name="[276]"></a>Set_RF_FrontEnd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_bluenrg1.o(i.Set_RF_FrontEnd))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
</UL>

<P><STRONG><a name="[2e7]"></a>Start_Gatt_Timer</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Start_Gatt_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Start_Gatt_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[2e6]"></a>Stop_Gatt_Timer</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Stop_Gatt_Timer))
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[4f5]"></a>SysCount_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock.o(i.SysCount_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[321]"></a>SysCtrl_PeripheralClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_sysctrl.o(i.SysCtrl_PeripheralClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_PWM
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedInit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg1_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCount_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[31d]"></a>SystemInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, system_bluenrg1.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SystemInit &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[325]"></a>SystemSleepCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(i.SystemSleepCmd))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>

<P><STRONG><a name="[4b5]"></a>Timer_ExpiryCallback</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, host_timer.o(i.Timer_ExpiryCallback))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[16c]"></a>Timer_Init</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, host_timer.o(i.Timer_Init))
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[15f]"></a>Timer_ProcessQ</STRONG> (Thumb, 274 bytes, Stack size unknown bytes, host_timer.o(i.Timer_ProcessQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Timer_ProcessQ &rArr; TimerCallback &rArr; GAP_LimDiscTimeoutcb_ucfg &rArr; GAP_LimDiscTimeoutcb &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans_ext
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Host_Timer_value
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[2b0]"></a>Timer_StartOneShot</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, host_timer.o(i.Timer_StartOneShot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerAcc_sysT32_ms
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Reset_Timer
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
</UL>

<P><STRONG><a name="[4fd]"></a>Timer_StartOneShot_sysTime32</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, host_timer.o(i.Timer_StartOneShot_sysTime32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>

<P><STRONG><a name="[2af]"></a>Timer_StopOneShot</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, host_timer.o(i.Timer_StopOneShot))
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Reset_Timer
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Terminate_Gap_Procedure
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Reset_To_Closed_State
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[319]"></a>Timer_sysTime32_convMachineTime</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, host_timer.o(i.Timer_sysTime32_convMachineTime))
<BR><BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_radio_activity_state
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
</UL>

<P><STRONG><a name="[4a1]"></a>Ton_sorting</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pwm_handlers.o(i.Ton_sorting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ton_sorting
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM3_PWM4_handler
</UL>

<P><STRONG><a name="[4ee]"></a>UART_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[502]"></a>UART_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[4ff]"></a>UART_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[f]"></a>UART_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdk_eval_com.o(i.UART_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[4ef]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartIrqConfig
</UL>

<P><STRONG><a name="[4ec]"></a>UART_Init</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, bluenrg1_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[500]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[4ed]"></a>UART_RxFifoIrqLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_RxFifoIrqLevelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[4e]"></a>Vendor_OnResponseDataCb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vendor.o(i.Vendor_OnResponseDataCb))
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>Vendor_Process</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vendor.o(i.Vendor_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1644 + Unknown Stack Size
<LI>Call Chain = Vendor_Process &rArr; BluenrgMesh_ModelsSendDelayedPacket &rArr; BluenrgMesh_SendResponse &rArr; MobleLibrarySendResponse &rArr; MobleBluemeshModelResponse &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsSendDelayedPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsProcess
</UL>

<P><STRONG><a name="[4d]"></a>Vendor_ReadLocalDataCb</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, vendor.o(i.Vendor_ReadLocalDataCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1652 + Unknown Stack Size
<LI>Call Chain = Vendor_ReadLocalDataCb &rArr; BluenrgMesh_SendResponse &rArr; MobleLibrarySendResponse &rArr; MobleBluemeshModelResponse &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsGetElementNumber
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsDelayPacket
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SendResponse
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>Vendor_WriteLocalDataCb</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, vendor.o(i.Vendor_WriteLocalDataCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1652 + Unknown Stack Size
<LI>Call Chain = Vendor_WriteLocalDataCb &rArr; BluenrgMesh_SendResponse &rArr; MobleLibrarySendResponse &rArr; MobleBluemeshModelResponse &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsGetElementNumber
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsDelayPacket
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsCheckSubscription
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SendResponse
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> models_if.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>WDG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.WDG_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[528]"></a>WindowWiden1</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.WindowWiden1))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[52c]"></a>WindowWiden2</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.WindowWiden2))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[4b2]"></a>Write_Cmd</STRONG> (Thumb, 300 bytes, Stack size unknown bytes, att.o(i.Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Write_Cmd &rArr; SMP_Validate_Signed_Packet &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[4b1]"></a>Write_Resp</STRONG> (Thumb, 316 bytes, Stack size unknown bytes, att.o(i.Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Write_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[169]"></a>_BlueNRG_Stack_Initialization</STRONG> (Thumb, 226 bytes, Stack size unknown bytes, bluenrg_main_func.o(i._BlueNRG_Stack_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Reset
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_func_call_init_csr_ucfg
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_ctx_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_controller_privacy_csr_ucfg
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_vInit_Struct
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_noRet
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_ConfigData
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connections_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
</UL>

<P><STRONG><a name="[115]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[582]"></a>__ARM_common_memcpy1_6</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, ll_isr.o(i.__ARM_common_memcpy1_6))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[156]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, appli_vendor.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_PWM
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vendor_ReadLocalDataCb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorModelServer_GetStatusRequestCb
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenericModelServer_ProcessMessageCb
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Vendor_Test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_Vendor_LEDControl
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_SetInputMessage
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_GetOutputMessage
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_GetNextOperation
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_CompleteOperation
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitRadioActivityEndCallback
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtProcessNewPacket
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportRenderHdr
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTrans_ProcessSegCtrlReq
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransControl_ProcessUnSegCtrlReq
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackFSM
</UL>

<P><STRONG><a name="[594]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[50c]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4ba]"></a>__low_level_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, system_bluenrg1.o(i.__low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[50e]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[50f]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[510]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[511]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[513]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[5e4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[5e5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[5e6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[593]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2b6]"></a>_gap_set_discoverable_connectable</STRONG> (Thumb, 368 bytes, Stack size unknown bytes, gap.o(i._gap_set_discoverable_connectable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _gap_set_discoverable_connectable &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapClearAllModeFlags
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advParamsCheckAndSet
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Non_Discoverable_Mode
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverable_Mode
</UL>

<P><STRONG><a name="[538]"></a>aci_att_exchange_mtu_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_exchange_mtu_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_exchange_mtu_resp_event
</UL>

<P><STRONG><a name="[539]"></a>aci_att_exec_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_exec_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_exec_write_resp_event
</UL>

<P><STRONG><a name="[53a]"></a>aci_att_find_by_type_value_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_find_by_type_value_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_find_by_type_value_resp_event
</UL>

<P><STRONG><a name="[53b]"></a>aci_att_find_info_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_find_info_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_find_info_resp_event
</UL>

<P><STRONG><a name="[53c]"></a>aci_att_prepare_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_prepare_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_prepare_write_resp_event
</UL>

<P><STRONG><a name="[53d]"></a>aci_att_read_blob_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_blob_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_read_blob_resp_event
</UL>

<P><STRONG><a name="[53e]"></a>aci_att_read_by_group_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_by_group_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_read_by_group_type_resp_event
</UL>

<P><STRONG><a name="[53f]"></a>aci_att_read_by_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_by_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_read_by_type_resp_event
</UL>

<P><STRONG><a name="[540]"></a>aci_att_read_multiple_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_multiple_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_read_multiple_resp_event
</UL>

<P><STRONG><a name="[541]"></a>aci_att_read_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_read_resp_event
</UL>

<P><STRONG><a name="[542]"></a>aci_att_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_write_resp_event
</UL>

<P><STRONG><a name="[13b]"></a>aci_event_fifo_push</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, aci_events.o(i.aci_event_fifo_push))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_push
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_push
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event_push
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_push
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_corrupted_acl_packet
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_SigChan_Req_TimeOut_Handler
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event_push
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event_push
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event_push
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event_push
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event_push
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event_push
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event_push
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event_push
</UL>

<P><STRONG><a name="[13a]"></a>aci_event_fifo_push_header</STRONG> (Thumb, 182 bytes, Stack size unknown bytes, aci_events.o(i.aci_event_fifo_push_header))
<BR><BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoBuf_getFreeHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_push
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_push
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event_push
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_push
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_corrupted_acl_packet
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_SigChan_Req_TimeOut_Handler
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event_push
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event_push
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event_push
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event_push
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event_push
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event_push
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event_push
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event_push
</UL>

<P><STRONG><a name="[543]"></a>aci_gap_addr_not_resolved_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_addr_not_resolved_event))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_addr_not_resolved_event
</UL>

<P><STRONG><a name="[544]"></a>aci_gap_authorization_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_authorization_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_authorization_req_event
</UL>

<P><STRONG><a name="[545]"></a>aci_gap_bond_lost_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_bond_lost_event))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_bond_lost_event
</UL>

<P><STRONG><a name="[546]"></a>aci_gap_device_found_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_device_found_event))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_device_found_event
</UL>

<P><STRONG><a name="[3a6]"></a>aci_gap_init</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gap_init &rArr; GAP_Init &rArr; Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBtReset
</UL>

<P><STRONG><a name="[547]"></a>aci_gap_keypress_notification_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_keypress_notification_event))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_keypress_notification_event
</UL>

<P><STRONG><a name="[548]"></a>aci_gap_limited_discoverable_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_limited_discoverable_event))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_limited_discoverable_event
</UL>

<P><STRONG><a name="[549]"></a>aci_gap_numeric_comparison_value_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_numeric_comparison_value_event))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_numeric_comparison_value_event
</UL>

<P><STRONG><a name="[54a]"></a>aci_gap_pairing_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_pairing_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_pairing_complete_event
</UL>

<P><STRONG><a name="[54b]"></a>aci_gap_pass_key_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_pass_key_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_pass_key_req_event
</UL>

<P><STRONG><a name="[54c]"></a>aci_gap_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_proc_complete_event
</UL>

<P><STRONG><a name="[225]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_discoverable &rArr; GAP_Set_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aci_gap_set_discoverable_param_check
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverable_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStartAdv
</UL>

<P><STRONG><a name="[224]"></a>aci_gap_set_non_discoverable</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i.aci_gap_set_non_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_non_discoverable &rArr; GAP_Set_Non_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Non_Discoverable_Mode
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStopAdv
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStartAdv
</UL>

<P><STRONG><a name="[54d]"></a>aci_gap_slave_security_initiated_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_slave_security_initiated_event))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_slave_security_initiated_event
</UL>

<P><STRONG><a name="[228]"></a>aci_gap_start_observation_proc</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, stack_user_cfg.o(i.aci_gap_start_observation_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = aci_gap_start_observation_proc &rArr; aci_gap_start_observation_proc_api &rArr; GAP_Start_Observation_Procedure &rArr; LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_start_observation_proc_api
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStartScan
</UL>

<P><STRONG><a name="[51b]"></a>aci_gap_start_observation_proc_api</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i.aci_gap_start_observation_proc_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gap_start_observation_proc_api &rArr; GAP_Start_Observation_Procedure &rArr; LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Start_Observation_Procedure
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_start_observation_proc
</UL>

<P><STRONG><a name="[22b]"></a>aci_gap_terminate_gap_proc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.aci_gap_terminate_gap_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = aci_gap_terminate_gap_proc &rArr; aci_gap_terminate_gap_proc_api &rArr; GAP_Terminate_Gap_Procedure &rArr; LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate_gap_proc_api
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStopScan
</UL>

<P><STRONG><a name="[51c]"></a>aci_gap_terminate_gap_proc_api</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i.aci_gap_terminate_gap_proc_api))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gap_terminate_gap_proc_api &rArr; GAP_Terminate_Gap_Procedure &rArr; LL_Enable_Disable_Scan &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Terminate_Gap_Procedure
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate_gap_proc
</UL>

<P><STRONG><a name="[449]"></a>aci_gatt_add_char</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, bluenrg_gatt_aci.o(i.aci_gatt_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gatt_add_char &rArr; Gatt_Add_Characteristic &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattAddCharacteristic
</UL>

<P><STRONG><a name="[44a]"></a>aci_gatt_add_service</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, bluenrg_gatt_aci.o(i.aci_gatt_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gatt_add_service &rArr; Gatt_Add_Service &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattAddService
</UL>

<P><STRONG><a name="[51d]"></a>aci_gatt_attribute_modified_event</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, library.o(i.aci_gatt_attribute_modified_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = aci_gatt_attribute_modified_event &rArr; MoblePalBtQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBtQueuePush
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_attribute_modified_event
</UL>

<P><STRONG><a name="[54e]"></a>aci_gatt_disc_read_char_by_uuid_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_disc_read_char_by_uuid_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_disc_read_char_by_uuid_resp_event
</UL>

<P><STRONG><a name="[54f]"></a>aci_gatt_error_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_error_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_error_resp_event
</UL>

<P><STRONG><a name="[550]"></a>aci_gatt_indication_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_indication_event))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_indication_event
</UL>

<P><STRONG><a name="[3a5]"></a>aci_gatt_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrg_gatt_aci.o(i.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gatt_init &rArr; Gatt_Server_Init &rArr; Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBtReset
</UL>

<P><STRONG><a name="[551]"></a>aci_gatt_notification_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_notification_event))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_notification_event
</UL>

<P><STRONG><a name="[552]"></a>aci_gatt_prepare_write_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_prepare_write_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_prepare_write_permit_req_event
</UL>

<P><STRONG><a name="[553]"></a>aci_gatt_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_proc_complete_event
</UL>

<P><STRONG><a name="[554]"></a>aci_gatt_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_proc_timeout_event
</UL>

<P><STRONG><a name="[555]"></a>aci_gatt_read_multi_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_read_multi_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_read_multi_permit_req_event
</UL>

<P><STRONG><a name="[556]"></a>aci_gatt_read_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_read_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_read_permit_req_event
</UL>

<P><STRONG><a name="[557]"></a>aci_gatt_server_confirmation_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_server_confirmation_event))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_server_confirmation_event
</UL>

<P><STRONG><a name="[558]"></a>aci_gatt_tx_pool_available_event</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, library.o(i.aci_gatt_tx_pool_available_event))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_tx_pool_available_event
</UL>

<P><STRONG><a name="[44b]"></a>aci_gatt_update_char_value</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, bluenrg_gatt_aci.o(i.aci_gatt_update_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gatt_update_char_value &rArr; Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGattSendNotification
</UL>

<P><STRONG><a name="[559]"></a>aci_gatt_write_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_write_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_write_permit_req_event
</UL>

<P><STRONG><a name="[576]"></a>aci_hal_end_of_radio_activity_event</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, library.o(i.aci_hal_end_of_radio_activity_event))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>

<P><STRONG><a name="[55a]"></a>aci_hal_fw_error_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_hal_fw_error_event))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_hal_fw_error_event
</UL>

<P><STRONG><a name="[3a7]"></a>aci_hal_read_config_data</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrg_hal_aci.o(i.aci_hal_read_config_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_hal_read_config_data &rArr; HAL_Read_ConfigData &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Read_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBtReset
</UL>

<P><STRONG><a name="[55b]"></a>aci_hal_scan_req_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_hal_scan_req_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_hal_scan_req_report_event
</UL>

<P><STRONG><a name="[259]"></a>aci_hal_set_radio_activity_mask</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, hal.o(i.aci_hal_set_radio_activity_mask))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBtReset
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitFsm
</UL>

<P><STRONG><a name="[145]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrg_hal_aci.o(i.aci_hal_set_tx_power_level))
<BR><BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_BleSetTxPowerCb
</UL>

<P><STRONG><a name="[55c]"></a>aci_l2cap_command_reject_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_command_reject_event))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_l2cap_command_reject_event
</UL>

<P><STRONG><a name="[427]"></a>aci_l2cap_connection_parameter_update_req</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, bluenrg_l2cap_aci.o(i.aci_l2cap_connection_parameter_update_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_l2cap_connection_parameter_update_req &rArr; L2C_Build_Connect_Update_Req &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Connect_Update_Req
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcess
</UL>

<P><STRONG><a name="[55d]"></a>aci_l2cap_connection_update_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_connection_update_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_l2cap_connection_update_req_event
</UL>

<P><STRONG><a name="[55e]"></a>aci_l2cap_connection_update_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_connection_update_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_l2cap_connection_update_resp_event
</UL>

<P><STRONG><a name="[55f]"></a>aci_l2cap_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_l2cap_proc_timeout_event
</UL>

<P><STRONG><a name="[282]"></a>acl_list_first</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_first))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
</UL>

<P><STRONG><a name="[4ab]"></a>acl_list_full_on_packt</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_full_on_packt))
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
</UL>

<P><STRONG><a name="[2e4]"></a>acl_list_init</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
</UL>

<P><STRONG><a name="[2dd]"></a>acl_list_insert_head</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_insert_head))
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[2c5]"></a>acl_list_insert_tail</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_insert_tail))
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
</UL>

<P><STRONG><a name="[2da]"></a>acl_list_is_empty</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[283]"></a>acl_list_remove</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_remove))
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
</UL>

<P><STRONG><a name="[2dc]"></a>acl_list_remove_head</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_remove_head))
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[515]"></a>advParamsCheckAndSet</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, gap.o(i.advParamsCheckAndSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = advParamsCheckAndSet &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[526]"></a>advance_slave_timing_MultiSlave</STRONG> (Thumb, 704 bytes, Stack size unknown bytes, multi_master_time.o(i.advance_slave_timing_MultiSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = advance_slave_timing_MultiSlave &rArr; cancel_slave &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulo_37
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_offset2
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_offset1
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sca
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowWiden2
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowWiden1
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[164]"></a>advance_transmit</STRONG> (Thumb, 246 bytes, Stack size unknown bytes, routines_support.o(i.advance_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = advance_transmit &rArr; copy_tx_data_packet &rArr; Mem_Buff_Block_Copy &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tx_data_packet
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[141]"></a>advance_wakeup_timer</STRONG> (Thumb, 1580 bytes, Stack size unknown bytes, advance_wakeup_time.o(i.advance_wakeup_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slave
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tx_data_packet
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microseconds_to_machine_time
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Scanning_Initiating_Buffers
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Advertising_Buffers
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Cancel_Connection_Req
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_unknown_state
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_scan_state
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_master_state
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[534]"></a>anchor_replace</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, multi_master_time.o(i.anchor_replace))
<BR><BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_connect_master
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_master_state
</UL>

<P><STRONG><a name="[174]"></a>ble_HAL_Init</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, hal.o(i.ble_HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_HAL_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[533]"></a>cancel_connect_master</STRONG> (Thumb, 230 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.cancel_connect_master))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anchor_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_connect_master_ucfg
</UL>

<P><STRONG><a name="[535]"></a>cancel_connect_master_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.cancel_connect_master_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cancel_connect_master_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_connect_master
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
</UL>

<P><STRONG><a name="[34c]"></a>cancel_current_master</STRONG> (Thumb, 414 bytes, Stack size unknown bytes, multi_master_time.o(i.cancel_current_master))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slave
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_master_state
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
</UL>

<P><STRONG><a name="[532]"></a>cancel_master</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.cancel_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_connect_master_ucfg
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[52f]"></a>cancel_slave</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, isr_routines.o(i.cancel_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = cancel_slave &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_update_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[dc]"></a>cb_aci_att_exchange_mtu_resp_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_exchange_mtu_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exchange_mtu_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>cb_aci_att_exec_write_resp_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_exec_write_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exec_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>cb_aci_att_find_by_type_value_resp_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_find_by_type_value_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_find_by_type_value_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>cb_aci_att_find_info_resp_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_find_info_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_find_info_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>cb_aci_att_prepare_write_resp_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_prepare_write_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_prepare_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>cb_aci_att_read_blob_resp_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_read_blob_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>cb_aci_att_read_by_group_type_resp_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_read_by_group_type_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_by_group_type_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>cb_aci_att_read_by_type_resp_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_read_by_type_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_by_type_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>cb_aci_att_read_multiple_resp_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_read_multiple_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>cb_aci_att_read_resp_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_read_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>cb_aci_att_write_resp_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_write_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>cb_aci_gap_addr_not_resolved_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_addr_not_resolved_event))
<BR><BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_addr_not_resolved_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>cb_aci_gap_authorization_req_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_authorization_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>cb_aci_gap_bond_lost_event</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_bond_lost_event))
<BR><BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_bond_lost_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>cb_aci_gap_device_found_event</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_device_found_event))
<BR><BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_device_found_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>cb_aci_gap_keypress_notification_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_keypress_notification_event))
<BR><BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_keypress_notification_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>cb_aci_gap_limited_discoverable_event</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_limited_discoverable_event))
<BR><BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>cb_aci_gap_numeric_comparison_value_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_numeric_comparison_value_event))
<BR><BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>cb_aci_gap_pairing_complete_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_pairing_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>cb_aci_gap_pass_key_req_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_pass_key_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>cb_aci_gap_proc_complete_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_proc_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>cb_aci_gap_slave_security_initiated_event</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_slave_security_initiated_event))
<BR><BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_slave_security_initiated_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>cb_aci_gatt_attribute_modified_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_attribute_modified_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = cb_aci_gatt_attribute_modified_event &rArr; aci_gatt_attribute_modified_event &rArr; MoblePalBtQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>cb_aci_gatt_disc_read_char_by_uuid_resp_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_disc_read_char_by_uuid_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>cb_aci_gatt_error_resp_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_error_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>cb_aci_gatt_indication_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_indication_event))
<BR><BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>cb_aci_gatt_notification_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_notification_event))
<BR><BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>cb_aci_gatt_prepare_write_permit_req_event</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_prepare_write_permit_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_prepare_write_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>cb_aci_gatt_proc_complete_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_proc_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>cb_aci_gatt_proc_timeout_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_proc_timeout_event))
<BR><BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>cb_aci_gatt_read_multi_permit_req_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_read_multi_permit_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>cb_aci_gatt_read_permit_req_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_read_permit_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>cb_aci_gatt_server_confirmation_event</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_server_confirmation_event))
<BR><BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_server_confirmation_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>cb_aci_gatt_tx_pool_available_event</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_tx_pool_available_event))
<BR><BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>cb_aci_gatt_write_permit_req_event</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_write_permit_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>cb_aci_hal_fw_error_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_hal_fw_error_event))
<BR><BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>cb_aci_hal_scan_req_report_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_hal_scan_req_report_event))
<BR><BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_scan_req_report_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>cb_aci_l2cap_command_reject_event</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_l2cap_command_reject_event))
<BR><BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>cb_aci_l2cap_connection_update_req_event</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_l2cap_connection_update_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>cb_aci_l2cap_connection_update_resp_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_l2cap_connection_update_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>cb_aci_l2cap_proc_timeout_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_l2cap_proc_timeout_event))
<BR><BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>cb_hci_data_buffer_overflow_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_data_buffer_overflow_event))
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>cb_hci_disconnection_complete_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_disconnection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = cb_hci_disconnection_complete_event &rArr; hci_disconnection_complete_event &rArr; MoblePalBtQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>cb_hci_encryption_change_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_encryption_change_event))
<BR><BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>cb_hci_encryption_key_refresh_complete_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_encryption_key_refresh_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>cb_hci_le_advertising_report_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_advertising_report_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = cb_hci_le_advertising_report_event &rArr; hci_le_advertising_report_event &rArr; MoblePalBtQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>cb_hci_le_connection_complete_event</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_connection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = cb_hci_le_connection_complete_event &rArr; hci_le_connection_complete_event
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>cb_hci_le_connection_update_complete_event</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_connection_update_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cb_hci_le_connection_update_complete_event &rArr; hci_le_connection_update_complete_event
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>cb_hci_le_data_length_change_event</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_data_length_change_event))
<BR><BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_length_change_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>cb_hci_le_direct_advertising_report_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_direct_advertising_report_event))
<BR><BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>cb_hci_le_enhanced_connection_complete_event</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_enhanced_connection_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>cb_hci_le_generate_dhkey_complete_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_generate_dhkey_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>cb_hci_le_long_term_key_request_event</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_long_term_key_request_event))
<BR><BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>cb_hci_le_read_local_p256_public_key_complete_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_read_local_p256_public_key_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>cb_hci_le_read_remote_used_features_complete_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_read_remote_used_features_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>cb_hci_number_of_completed_packets_event</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_number_of_completed_packets_event))
<BR><BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>cb_hci_read_remote_version_information_complete_event</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_read_remote_version_information_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>cb_hci_rx_acl_data_event</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_rx_acl_data_event))
<BR><BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>char_copy</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, hal.o(i.char_copy))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_scan_data
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_connect_master
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_All_Channels
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_scan_state
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_master_state
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Set_Radio_Config_Data
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_ScanAddress
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Scanning_Initiating_Buffers
</UL>

<P><STRONG><a name="[590]"></a>copy_4_u32</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_isr.o(i.copy_4_u32))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
</UL>

<P><STRONG><a name="[530]"></a>copy_tx_data_packet</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, ll_isr.o(i.copy_tx_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = copy_tx_data_packet &rArr; Mem_Buff_Block_Copy &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Block_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_master_state
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_transmit
</UL>

<P><STRONG><a name="[176]"></a>data_length_extension_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci.o(i.data_length_extension_csr_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_receive_data
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_test_tx_state
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_master_state
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_transmit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_check
</UL>

<P><STRONG><a name="[351]"></a>encrypt</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, ll_isr.o(i.encrypt))
<BR><BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc_encrypt_data
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
</UL>

<P><STRONG><a name="[5c5]"></a>full_state_func_call_init</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_isr.o(i.full_state_func_call_init))
<BR><BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_func_call_init_csr_ucfg
</UL>

<P><STRONG><a name="[514]"></a>gapClearAllModeFlags</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap.o(i.gapClearAllModeFlags))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[570]"></a>get_adv_addr</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.get_adv_addr))
<BR><BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_scan_data
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_scan_state
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[2b2]"></a>get_advertiser</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, multi_master_time.o(i.get_advertiser))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_AdvAddress
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[13e]"></a>get_connection_no</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, multi_master_time.o(i.get_connection_no))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[348]"></a>get_next_free_slot</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, multi_master_time.o(i.get_next_free_slot))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[571]"></a>get_scan_addr</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.get_scan_addr))
<BR><BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_scan_state
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[2b3]"></a>get_scan_connection</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, multi_master_time.o(i.get_scan_connection))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Cancel_Connection_Req
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Scan_Params
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_ScanAddress
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[572]"></a>go_to_connect</STRONG> (Thumb, 630 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.go_to_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = go_to_connect &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timebase_start_connect
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le2ByteToInt16
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[574]"></a>go_to_connect_master</STRONG> (Thumb, 428 bytes, Stack size unknown bytes, isr_routines.o(i.go_to_connect_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = go_to_connect_master &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timebase_start_connect
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_scan_state
</UL>

<P><STRONG><a name="[27c]"></a>hal_radio_activity_state_callback_check</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, hal.o(i.hal_radio_activity_state_callback_check))
<BR><BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_radio_activity_state
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_end_of_radio_activity_event
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
</UL>

<P><STRONG><a name="[27d]"></a>hal_radio_activity_state_init</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, hal.o(i.hal_radio_activity_state_init))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
</UL>

<P><STRONG><a name="[575]"></a>hal_read_radio_activity_state</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, hal.o(i.hal_read_radio_activity_state))
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>

<P><STRONG><a name="[160]"></a>hci_acl_Process_Q</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, hci.o(i.hci_acl_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = hci_acl_Process_Q &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_is_empty
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[42c]"></a>hci_disconnect</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, hci.o(i.hci_disconnect))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothProcessDisconnection
</UL>

<P><STRONG><a name="[560]"></a>hci_disconnection_complete_event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, library.o(i.hci_disconnection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hci_disconnection_complete_event &rArr; MoblePalBtQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBtQueuePush
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_disconnection_complete_event
</UL>

<P><STRONG><a name="[561]"></a>hci_encryption_change_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_encryption_change_event))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_encryption_change_event
</UL>

<P><STRONG><a name="[562]"></a>hci_encryption_key_refresh_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_encryption_key_refresh_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_encryption_key_refresh_complete_event
</UL>

<P><STRONG><a name="[27b]"></a>hci_hardware_error_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_hardware_error_event))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
</UL>

<P><STRONG><a name="[563]"></a>hci_le_advertising_report_event</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, library.o(i.hci_le_advertising_report_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hci_le_advertising_report_event &rArr; MoblePalBtQueuePush &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBtQueuePush
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_advertising_report_event
</UL>

<P><STRONG><a name="[564]"></a>hci_le_connection_complete_event</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, library.o(i.hci_le_connection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_le_connection_complete_event
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_connection_complete_event
</UL>

<P><STRONG><a name="[565]"></a>hci_le_connection_update_complete_event</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, library.o(i.hci_le_connection_update_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_le_connection_update_complete_event
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBtSetConnectionInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_connection_update_complete_event
</UL>

<P><STRONG><a name="[566]"></a>hci_le_data_length_change_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_data_length_change_event))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_data_length_change_event
</UL>

<P><STRONG><a name="[567]"></a>hci_le_direct_advertising_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_direct_advertising_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_direct_advertising_report_event
</UL>

<P><STRONG><a name="[568]"></a>hci_le_enhanced_connection_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_enhanced_connection_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_enhanced_connection_complete_event
</UL>

<P><STRONG><a name="[569]"></a>hci_le_generate_dhkey_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_generate_dhkey_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_generate_dhkey_complete_event
</UL>

<P><STRONG><a name="[56a]"></a>hci_le_long_term_key_request_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_long_term_key_request_event))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_long_term_key_request_event
</UL>

<P><STRONG><a name="[194]"></a>hci_le_rand</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, hci.o(i.hci_le_rand))
<BR><BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Random_data
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsDelayPacket
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleProvision_UnprovisionedNode_CompleteOperation
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothRandom
</UL>

<P><STRONG><a name="[56b]"></a>hci_le_read_local_p256_public_key_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_read_local_p256_public_key_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_read_local_p256_public_key_complete_event
</UL>

<P><STRONG><a name="[56c]"></a>hci_le_read_remote_used_features_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_read_remote_used_features_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_read_remote_used_features_complete_event
</UL>

<P><STRONG><a name="[226]"></a>hci_le_set_advertising_data</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, hci.o(i.hci_le_set_advertising_data))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeUpdateAdv
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalBluetoothModeStartAdv
</UL>

<P><STRONG><a name="[56d]"></a>hci_number_of_completed_packets_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_number_of_completed_packets_event))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_number_of_completed_packets_event
</UL>

<P><STRONG><a name="[44d]"></a>hci_read_bd_addr</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, hci.o(i.hci_read_bd_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = hci_read_bd_addr &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetBluetoothAddress
</UL>

<P><STRONG><a name="[422]"></a>hci_read_local_version_information</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, hci.o(i.hci_read_local_version_information))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothCheckManufacturerID
</UL>

<P><STRONG><a name="[56e]"></a>hci_read_remote_version_information_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_read_remote_version_information_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_read_remote_version_information_complete_event
</UL>

<P><STRONG><a name="[3a3]"></a>hci_reset</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, hci.o(i.hci_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = hci_reset &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleBtReset
</UL>

<P><STRONG><a name="[57c]"></a>hci_rx_acl_data</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, hci.o(i.hci_rx_acl_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = hci_rx_acl_data &rArr; PM_Copy_Pckt_Data &rArr; Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_acl_data_ind_event
</UL>

<P><STRONG><a name="[56f]"></a>hci_rx_acl_data_event</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, aci_events.o(i.hci_rx_acl_data_event))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_rx_acl_data_event
</UL>

<P><STRONG><a name="[57d]"></a>hci_tx_acl_data_done</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, hci.o(i.hci_tx_acl_data_done))
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_acl_data_tx_cmpl_event
</UL>

<P><STRONG><a name="[f3]"></a>int_cb_hci_acl_data_ind_event</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, acl.o(i.int_cb_hci_acl_data_ind_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_acl_data_ind_event &rArr; L2C_Rcv_Event_Handler &rArr; L2C_Rcv_Data &rArr; L2C_Mux_Acl_Packet &rArr; SM_L2CAP_Handler &rArr; smp_Keys_Distribution_Complete &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>int_cb_hci_acl_data_tx_cmpl_event</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, acl.o(i.int_cb_hci_acl_data_tx_cmpl_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_acl_data_tx_cmpl_event &rArr; L2C_Rcv_Event_Handler &rArr; L2C_Rcv_Data &rArr; L2C_Mux_Acl_Packet &rArr; SM_L2CAP_Handler &rArr; smp_Keys_Distribution_Complete &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>int_cb_hci_disconnection_complete_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_disconnection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_disconnection_complete_event &rArr; GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>int_cb_hci_encryption_change_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_encryption_change_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_encryption_change_event &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>int_cb_hci_encryption_key_refresh_complete_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_encryption_key_refresh_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_encryption_key_refresh_complete_event &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>int_cb_hci_le_advertising_report_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_advertising_report_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_le_advertising_report_event &rArr; GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>int_cb_hci_le_connection_complete_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_connection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_le_connection_complete_event &rArr; GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>int_cb_hci_le_data_length_change_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_data_length_change_event))
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>int_cb_hci_le_direct_advertising_report_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_direct_advertising_report_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_le_direct_advertising_report_event &rArr; GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>int_cb_hci_le_enhanced_connection_complete_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_enhanced_connection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_le_enhanced_connection_complete_event &rArr; GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>int_cb_hci_le_generate_dhkey_complete_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_generate_dhkey_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>int_cb_hci_le_long_term_key_request_event</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_long_term_key_request_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_le_long_term_key_request_event &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>int_cb_hci_le_read_local_p256_public_key_complete_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_read_local_p256_public_key_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[31b]"></a>is_Buffer_All_Set_To</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, utils.o(i.is_Buffer_All_Set_To))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[13f]"></a>is_slave</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, multi_master_time.o(i.is_slave))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_Disconnection_Req
</UL>

<P><STRONG><a name="[360]"></a>isr_Acl_Data_Indication_Queue_Full</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, acl.o(i.isr_Acl_Data_Indication_Queue_Full))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_receive_data
</UL>

<P><STRONG><a name="[585]"></a>isr_Acl_Data_TX_Cmpl_Queue_Full</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, acl.o(i.isr_Acl_Data_TX_Cmpl_Queue_Full))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_master_state
</UL>

<P><STRONG><a name="[4b8]"></a>isr_event_handler</STRONG> (Thumb, 1524 bytes, Stack size unknown bytes, ll_routines_master.o(i.isr_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_scan_data_ucfg
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_All_Channels_ucfg
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_vGenerate_hci_le_enhanced_connection_complete_event_ucfg
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Block_Write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_push
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
</UL>

<P><STRONG><a name="[58b]"></a>isr_event_handler_scan_data</STRONG> (Thumb, 492 bytes, Stack size unknown bytes, ll_routines_master.o(i.isr_event_handler_scan_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_vGenerate_hci_le_direct_advertising_report_event_ucfg
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_push
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_scan_data_ucfg
</UL>

<P><STRONG><a name="[58a]"></a>isr_event_handler_scan_data_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.isr_event_handler_scan_data_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_scan_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[4b9]"></a>isr_postproc</STRONG> (Thumb, 468 bytes, Stack size unknown bytes, isr_postproc.o(i.isr_postproc))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_Length_Resp_ucfg
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data_Length_Change_Event_ucfg
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[586]"></a>isr_postproc1</STRONG> (Thumb, 264 bytes, Stack size unknown bytes, rom_ll_isr_postproc.o(i.isr_postproc1))
<BR><BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc_encrypt_data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_4_u32
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_aes_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_master_state
</UL>

<P><STRONG><a name="[583]"></a>isr_postproc_encrypt_data</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_ll_isr_postproc.o(i.isr_postproc_encrypt_data))
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_scan_state
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[17b]"></a>machine_time_trans</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.machine_time_trans))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_test_tx_state
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_scan_state
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_freq
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[1d]"></a>main</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1652 + Unknown Stack Size
<LI>Call Chain = main &rArr; BluenrgMesh_ModelsProcess &rArr; Vendor_Process &rArr; BluenrgMesh_ModelsSendDelayedPacket &rArr; BluenrgMesh_SendResponse &rArr; MobleLibrarySendResponse &rArr; MobleBluemeshModelResponse &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CrashHandlerInfo
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_SetAttentionTimerCallback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_Process
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsProcess
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_ModelsInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_BleHardwareInitCallBack
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_PWM_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_LedBlink
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_CheckForUnprovision
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appli_CheckBdMacAddr
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[506]"></a>mem_alloc_ctx_init</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, mem_alloc.o(i.mem_alloc_ctx_init))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[18d]"></a>mem_alloc_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, library.o(i.mem_alloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_alloc_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_Init
</UL>

<P><STRONG><a name="[531]"></a>microseconds_to_machine_time</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, routines_support.o(i.microseconds_to_machine_time))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[52a]"></a>modulo_37</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.modulo_37))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[358]"></a>nsar_init</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_init))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[370]"></a>pow</STRONG> (Thumb, 2548 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Actual_LinearBinding
</UL>

<P><STRONG><a name="[4b7]"></a>read_rssi</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, ll_routines.o(i.read_rssi))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[34d]"></a>request_scan_slot</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, multi_master_time.o(i.request_scan_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = request_scan_slot &rArr; adapt_slot &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
</UL>

<P><STRONG><a name="[34b]"></a>schedule_advertise_slot</STRONG> (Thumb, 166 bytes, Stack size unknown bytes, multi_master_time.o(i.schedule_advertise_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[509]"></a>secure_connections_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.secure_connections_csr_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[516]"></a>setGapAdvData</STRONG> (Thumb, 250 bytes, Stack size unknown bytes, gap.o(i.setGapAdvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = setGapAdvData &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Adv_Tx_Power_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[17a]"></a>set_freq</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.set_freq))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
</UL>

<P><STRONG><a name="[527]"></a>set_sca</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.set_sca))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[52e]"></a>set_string</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, hal.o(i.set_string))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[140]"></a>slave_advance</STRONG> (Thumb, 406 bytes, Stack size unknown bytes, routines_support.o(i.slave_advance))
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_unknown_state
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_scan_state
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_master_state
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>

<P><STRONG><a name="[596]"></a>sm_RepeatedAttacks_Protection</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, securitymgr.o(i.sm_RepeatedAttacks_Protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = sm_RepeatedAttacks_Protection &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
</UL>

<P><STRONG><a name="[4d3]"></a>sm_search_blackList</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, smp_common.o(i.sm_search_blackList))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = sm_search_blackList &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
</UL>

<P><STRONG><a name="[4e4]"></a>sma_CMAC_generate_tag</STRONG> (Thumb, 202 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_CMAC_generate_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sma_CMAC_generate_tag &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
</UL>

<P><STRONG><a name="[5a2]"></a>smp_Execute_Actions_wrt_Current_State_MI_excerpt</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State_MI_excerpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp_Execute_Actions_wrt_Current_State_MI_excerpt &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_MI_Start_Encryption_ucfg
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_MI_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_distribution_start
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg
</UL>

<P><STRONG><a name="[59a]"></a>smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg &rArr; smp_Execute_Actions_wrt_Current_State_MI_excerpt &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_MI_excerpt
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[59b]"></a>smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase2as2_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase2as2_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[59f]"></a>smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase_1_to_2_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase_1_to_2_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[5a8]"></a>smp_MI_Start_Encryption</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, securitymgr.o(i.smp_MI_Start_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_MI_Start_Encryption_ucfg
</UL>

<P><STRONG><a name="[4d5]"></a>smp_MI_Start_Encryption_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.smp_MI_Start_Encryption_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_MI_Start_Encryption
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_MI_excerpt
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
</UL>

<P><STRONG><a name="[4de]"></a>smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[5b1]"></a>smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt &rArr; smp____MI_SecurityRequest_Receive &rArr; smp_pairing_failed_send &rArr; smp_pairing_2octets_packet_send &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_SecurityRequest_Receive
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg
</UL>

<P><STRONG><a name="[5b0]"></a>smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg &rArr; smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt &rArr; smp____MI_SecurityRequest_Receive &rArr; smp_pairing_failed_send &rArr; smp_pairing_2octets_packet_send &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[5a9]"></a>smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[4dd]"></a>smp____PairingFailed_Receive</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, smp_common.o(i.smp____PairingFailed_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp____PairingFailed_Receive &rArr; smp____Pairing_Process_Abort &rArr; sm_RepeatedAttacks_Protection &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[5c2]"></a>smp_add_to_sdb</STRONG> (Thumb, 326 bytes, Stack size unknown bytes, smp_common.o(i.smp_add_to_sdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_add_to_sdb &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[4e7]"></a>smp_find_remote_device_index</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, smp_common.o(i.smp_find_remote_device_index))
<BR><BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
</UL>

<P><STRONG><a name="[4e3]"></a>smp_get_CSRK</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, smp_common.o(i.smp_get_CSRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_get_CSRK &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
</UL>

<P><STRONG><a name="[5a5]"></a>smp_get_local_identity_address</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, smp_common.o(i.smp_get_local_identity_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_get_local_identity_address &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StaticRandAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[5a1]"></a>smp_keys_distribution_start</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, smp_common.o(i.smp_keys_distribution_start))
<BR><BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_MI_excerpt
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_receiving
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[5ab]"></a>smp_keys_receiving</STRONG> (Thumb, 214 bytes, Stack size unknown bytes, smp_common.o(i.smp_keys_receiving))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_keys_receiving &rArr; smp_pairing_completed &rArr; smp_add_to_sdb &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_distribution_start
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[4d6]"></a>smp_oob_check_is_remote_data_present</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, smp_common.o(i.smp_oob_check_is_remote_data_present))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_oob_check_is_remote_data_present &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
</UL>

<P><STRONG><a name="[5c4]"></a>smp_pairing_2octets_packet_send</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_2octets_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp_pairing_2octets_packet_send &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
</UL>

<P><STRONG><a name="[59e]"></a>smp_pairing_completed</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_pairing_completed &rArr; smp_add_to_sdb &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_to_sdb
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_update_statistics_on_pairing_complete_ucfg
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_receiving
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
</UL>

<P><STRONG><a name="[5aa]"></a>smp_pairing_failed_send</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_failed_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp_pairing_failed_send &rArr; smp_pairing_2octets_packet_send &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_2octets_packet_send
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_SecurityRequest_Receive
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[5b8]"></a>smp_sc_MI_PairingConfirm_Send_sc_excerpt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_MI_PairingConfirm_Send_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
</UL>

<P><STRONG><a name="[5b9]"></a>smp_sc_MI_PairingRandom_Receive_sc_excerpt1_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_MI_PairingRandom_Receive_sc_excerpt1_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
</UL>

<P><STRONG><a name="[5ba]"></a>smp_sc_MI_PairingRandom_Receive_sc_excerpt2_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_MI_PairingRandom_Receive_sc_excerpt2_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
</UL>

<P><STRONG><a name="[5bc]"></a>smp_sc_MI_PairingResponse_Receive_sc_excerpt_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_MI_PairingResponse_Receive_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
</UL>

<P><STRONG><a name="[5a3]"></a>smp_sc_MI_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_MI_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_MI_excerpt
</UL>

<P><STRONG><a name="[5c0]"></a>smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
</UL>

<P><STRONG><a name="[5c1]"></a>smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
</UL>

<P><STRONG><a name="[5a0]"></a>smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[4d9]"></a>smp_sc_check_for_ecc_pk_generation_request_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_check_for_ecc_pk_generation_request_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[5c3]"></a>smp_sc_continue_on_exclusive_sc_pairing_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_continue_on_exclusive_sc_pairing_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[57e]"></a>smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_generate_dhkey_complete_event
</UL>

<P><STRONG><a name="[57f]"></a>smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_read_local_p256_public_key_complete_event
</UL>

<P><STRONG><a name="[4d1]"></a>smp_sc_init_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_init_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
</UL>

<P><STRONG><a name="[5bf]"></a>smp_sc_update_statistics_on_pairing_complete_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_update_statistics_on_pairing_complete_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
</UL>

<P><STRONG><a name="[4d8]"></a>smp_send_packet</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, securitymgr.o(i.smp_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp_send_packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Reset_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
</UL>

<P><STRONG><a name="[377]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Linear_ActualBinding
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[34f]"></a>start_timebase</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, multi_master_time.o(i.start_timebase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
</UL>

<P><STRONG><a name="[507]"></a>state_func_call_init_csr_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.state_func_call_init_csr_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = state_func_call_init_csr_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_state_func_call_init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[2ea]"></a>store_data</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gatt_server.o(i.store_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = store_data &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[52b]"></a>swap_slaves</STRONG> (Thumb, 300 bytes, Stack size unknown bytes, routines_support.o(i.swap_slaves))
<BR><BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u8
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u32
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_offset2
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sca
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowWiden2
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[4fa]"></a>system_time_trans</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.system_time_trans))
<BR><BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_scan_state
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_write_record
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
</UL>

<P><STRONG><a name="[4f9]"></a>system_time_trans_ext</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.system_time_trans_ext))
<BR><BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
</UL>

<P><STRONG><a name="[529]"></a>time_offset1</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.time_offset1))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[52d]"></a>time_offset2</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.time_offset2))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[573]"></a>timebase_start_connect</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, multi_master_time.o(i.timebase_start_connect))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
</UL>

<P><STRONG><a name="[588]"></a>unpack_channel_map</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.unpack_channel_map))
<BR><BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le2ByteToInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[587]"></a>unpack_update_request</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.unpack_update_request))
<BR><BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le2ByteToInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4f6]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_bluenrg1.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[450]"></a>MoblePalNvmBackupProcess</STRONG> (Thumb, 160 bytes, Stack size 88 bytes, pal_nvm.o(i.MoblePalNvmBackupProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MoblePalNvmBackupProcess &rArr; BnrgmPalAdvStop &rArr; BnrgmTransmitFsm &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordBurst
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetFlagStatus
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalIsBtDisconnected
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalGetIsFlashEraseOk
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalAdvStop
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalNvmProcess
</UL>

<P><STRONG><a name="[51a]"></a>_aci_gap_set_discoverable_param_check</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i._aci_gap_set_discoverable_param_check))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>

<P><STRONG><a name="[16a]"></a>BlueNRG_Stack_Initialize_ConfigData</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_get_part_info
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[16b]"></a>BlueNRG_Stack_Initialize_Layers</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_Layers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Stack_Initialize_Layers &rArr; ble_HAL_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_HAL_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init_Context
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[168]"></a>BlueNRG_Stack_Initialize_RAM_check</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_RAM_check))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_noRet
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[163]"></a>BlueNRG_Stack_Perform_Crystal_Check</STRONG> (Thumb, 178 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Perform_Crystal_Check))
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_freq
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Start_Crystal_Measurement
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[179]"></a>BlueNRG_Start_Crystal_Measurement</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Start_Crystal_Measurement))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
</UL>

<P><STRONG><a name="[2a1]"></a>_GAP_Parse_Advertising_Report</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gap.o(i._GAP_Parse_Advertising_Report))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>

<P><STRONG><a name="[2a4]"></a>aci_gap_limited_discoverable_event_push</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, gap.o(i.aci_gap_limited_discoverable_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
</UL>

<P><STRONG><a name="[290]"></a>aci_gap_proc_complete_event_push</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, gap.o(i.aci_gap_proc_complete_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Internal_Evt_Handler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Terminate_Gap_Procedure
</UL>

<P><STRONG><a name="[1]"></a>isr_advertise_state</STRONG> (Thumb, 898 bytes, Stack size unknown bytes, ll_isr.o(i.isr_advertise_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = isr_advertise_state &rArr; go_to_connect &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc_encrypt_data
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u32ProcessAdvPacket_ucfg
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_SearchAddrInWhiteList
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>isr_connect_master_state</STRONG> (Thumb, 1718 bytes, Stack size unknown bytes, ll_isr.o(i.isr_connect_master_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = isr_connect_master_state &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Length_Update_Control_ISR_ucfg
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_Acl_Data_TX_Cmpl_Queue_Full
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anchor_replace
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_receive_data
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tx_data_packet
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(i.full_state_func_call_init)
</UL>
<P><STRONG><a name="[2]"></a>isr_connect_slave_state</STRONG> (Thumb, 1978 bytes, Stack size unknown bytes, ll_isr.o(i.isr_connect_slave_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = isr_connect_slave_state &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Length_Update_Control_ISR_ucfg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_update_request
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_channel_map
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulo_37
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_Acl_Data_TX_Cmpl_Queue_Full
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_update_proc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_receive_data
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tx_data_packet
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>isr_scan_state</STRONG> (Thumb, 1532 bytes, Stack size unknown bytes, ll_isr.o(i.isr_scan_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = isr_scan_state &rArr; go_to_connect_master &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc_encrypt_data
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u32ProcessAdvPacket_ucfg
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_SearchAddrInWhiteList
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(i.full_state_func_call_init)
</UL>
<P><STRONG><a name="[4]"></a>isr_test_rx_state</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, ll_isr.o(i.isr_test_rx_state))
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>isr_test_tx_state</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, ll_isr.o(i.isr_test_tx_state))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>isr_unknown_state</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, ll_isr.o(i.isr_unknown_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = isr_unknown_state &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(.data)
</UL>
<P><STRONG><a name="[577]"></a>hci_encryption_change_event_push</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_encryption_change_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[578]"></a>hci_encryption_key_refresh_complete_event_push</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_encryption_key_refresh_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[579]"></a>hci_le_advertising_report_event_push</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_le_advertising_report_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_scan_data
</UL>

<P><STRONG><a name="[346]"></a>hci_le_connection_complete_event_push</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_le_connection_complete_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = hci_le_connection_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Create_Connection_Cancel
</UL>

<P><STRONG><a name="[57b]"></a>hci_le_connection_update_complete_event_push</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_le_connection_update_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[34e]"></a>int32ToLe4Byte</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_routines_master.o(i.int32ToLe4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
</UL>

<P><STRONG><a name="[522]"></a>addr_u32_from_u8</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.addr_u32_from_u8))
<BR><BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le2ByteToInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
</UL>

<P><STRONG><a name="[524]"></a>le2ByteToInt16</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.le2ByteToInt16))
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_update_request
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_channel_map
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
</UL>

<P><STRONG><a name="[523]"></a>le4ByteToInt32</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.le4ByteToInt32))
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_channel_map
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
</UL>

<P><STRONG><a name="[35c]"></a>le4ByteToInt32</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_ll_ll_routines_master.o(i.le4ByteToInt32))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
</UL>

<P><STRONG><a name="[5a7]"></a>int32ToLe4Byte</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, securitymgr.o(i.int32ToLe4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
</UL>

<P><STRONG><a name="[4da]"></a>sm_Get_Long_Term_Key</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, securitymgr.o(i.sm_Get_Long_Term_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = sm_Get_Long_Term_Key &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[4d4]"></a>smp_Build_AuthReq_Field</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Build_AuthReq_Field))
<BR><BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
</UL>

<P><STRONG><a name="[4d7]"></a>smp_Build_Pairing_ReqResp_Packet</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Build_Pairing_ReqResp_Packet))
<BR><BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
</UL>

<P><STRONG><a name="[5bb]"></a>smp_Check_Incoming_Pairing_Parameters</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Check_Incoming_Pairing_Parameters))
<BR><BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
</UL>

<P><STRONG><a name="[599]"></a>smp_Determine_Key_Association_Method</STRONG> (Thumb, 174 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Determine_Key_Association_Method))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_Determine_Key_Association_Method &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
</UL>

<P><STRONG><a name="[4db]"></a>smp_Execute_Actions_wrt_Current_State</STRONG> (Thumb, 390 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_Execute_Actions_wrt_Current_State &rArr; smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg &rArr; smp_Execute_Actions_wrt_Current_State_MI_excerpt &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase_1_to_2_ucfg
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase2as2_ucfg
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_distribution_start
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_get_security_data_record
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Valid_Records
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapIsPrivacySupported
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[5bd]"></a>smp_Get_Pairing_Parameters_From_Peer_Packet</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Get_Pairing_Parameters_From_Peer_Packet))
<BR><BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
</UL>

<P><STRONG><a name="[59d]"></a>smp_Keys_Distribution_Send</STRONG> (Thumb, 280 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Keys_Distribution_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp_Keys_Distribution_Send &rArr; smp_send_packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_local_identity_address
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_CSRK
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[5a6]"></a>smp_LP_MI_Compute_c1_Confirm_Value</STRONG> (Thumb, 348 bytes, Stack size unknown bytes, securitymgr.o(i.smp_LP_MI_Compute_c1_Confirm_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_LP_MI_Compute_c1_Confirm_Value &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
</UL>

<P><STRONG><a name="[4dc]"></a>smp_Process_Rx_Packet_wrt_Current_State</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = smp_Process_Rx_Packet_wrt_Current_State &rArr; smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg &rArr; smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt &rArr; smp____MI_SecurityRequest_Receive &rArr; smp_pairing_failed_send &rArr; smp_pairing_2octets_packet_send &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_receiving
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Reset_Timer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[5ac]"></a>smp_Reset_Timer</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Reset_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_Reset_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[5b6]"></a>smp_SR_Compute_c1_Confirm_Value</STRONG> (Thumb, 364 bytes, Stack size unknown bytes, securitymgr.o(i.smp_SR_Compute_c1_Confirm_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_SR_Compute_c1_Confirm_Value &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
</UL>

<P><STRONG><a name="[5b7]"></a>smp_Set_Key_Association_Method</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Set_Key_Association_Method))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_Set_Key_Association_Method &rArr; smp_Determine_Key_Association_Method &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Determine_Key_Association_Method
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
</UL>

<P><STRONG><a name="[5b5]"></a>smp____MI_PairingConfirm_Receive</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, securitymgr.o(i.smp____MI_PairingConfirm_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp____MI_PairingConfirm_Receive &rArr; smp_send_packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt
</UL>

<P><STRONG><a name="[5a4]"></a>smp____MI_PairingConfirm_Send</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, securitymgr.o(i.smp____MI_PairingConfirm_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp____MI_PairingConfirm_Send &rArr; smp_send_packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_MI_PairingConfirm_Send_sc_excerpt_ucfg
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_MI_excerpt
</UL>

<P><STRONG><a name="[5b2]"></a>smp____MI_PairingRandom_Receive</STRONG> (Thumb, 242 bytes, Stack size unknown bytes, securitymgr.o(i.smp____MI_PairingRandom_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp____MI_PairingRandom_Receive &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_MI_Start_Encryption_ucfg
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_MI_PairingRandom_Receive_sc_excerpt2_ucfg
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_MI_PairingRandom_Receive_sc_excerpt1_ucfg
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt
</UL>

<P><STRONG><a name="[5b4]"></a>smp____MI_PairingResponse_Receive</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, securitymgr.o(i.smp____MI_PairingResponse_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp____MI_PairingResponse_Receive &rArr; smp_pairing_failed_send &rArr; smp_pairing_2octets_packet_send &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_MI_PairingResponse_Receive_sc_excerpt_ucfg
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Pairing_Parameters_From_Peer_Packet
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Check_Incoming_Pairing_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt
</UL>

<P><STRONG><a name="[5b3]"></a>smp____MI_SecurityRequest_Receive</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, securitymgr.o(i.smp____MI_SecurityRequest_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp____MI_SecurityRequest_Receive &rArr; smp_pairing_failed_send &rArr; smp_pairing_2octets_packet_send &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt
</UL>

<P><STRONG><a name="[5ae]"></a>smp____SR_PairingConfirm_Receive</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingConfirm_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingConfirm_Receive &rArr; smp_send_packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[5af]"></a>smp____SR_PairingRandom_Receive</STRONG> (Thumb, 298 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingRandom_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingRandom_Receive &rArr; smp_pairing_failed_send &rArr; smp_pairing_2octets_packet_send &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[5ad]"></a>smp____SR_PairingRequest_Receive</STRONG> (Thumb, 434 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingRequest_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingRequest_Receive &rArr; smp_pairing_failed_send &rArr; smp_pairing_2octets_packet_send &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_continue_on_exclusive_sc_pairing_ucfg
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_to_sdb
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Pairing_Parameters_From_Peer_Packet
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Check_Incoming_Pairing_Parameters
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_Pairing_ReqResp_Packet
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_AuthReq_Field
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2a]"></a>BnrgmConfigModelHeartbeatPublication_TimerCallback</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, library.o(i.BnrgmConfigModelHeartbeatPublication_TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = BnrgmConfigModelHeartbeatPublication_TimerCallback &rArr; BnrgmConfigModelSendHeartbeat &rArr; MobleTransportSendHeartbeat &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStop
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSendHeartbeat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleConfigModelInit)
</UL>
<P><STRONG><a name="[2b]"></a>BnrgmConfigModelHeartbeatSubscription_TimerCallback</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, library.o(i.BnrgmConfigModelHeartbeatSubscription_TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BnrgmConfigModelHeartbeatSubscription_TimerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleConfigModelInit)
</UL>
<P><STRONG><a name="[1ba]"></a>BnrgmConfigModelSetHbSubscriptionPeriod</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, library.o(i.BnrgmConfigModelSetHbSubscriptionPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatSubscriptionSet
</UL>

<P><STRONG><a name="[1b5]"></a>BnrgmConfigModelValueToLog</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, library.o(i.BnrgmConfigModelValueToLog))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatSubscriptionSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatSubscriptionGet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_ProcessHeartBeatPublicationGet
</UL>

<P><STRONG><a name="[8b]"></a>BnrgmConfigModel_ProcessHeartBeatPublicationGet</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, library.o(i.BnrgmConfigModel_ProcessHeartBeatPublicationGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676 + Unknown Stack Size
<LI>Call Chain = BnrgmConfigModel_ProcessHeartBeatPublicationGet &rArr; BnrgmConfigModel_SendConfigHeartbeatPublicationStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelValueToLog
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigHeartbeatPublicationStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>BnrgmConfigModel_ProcessHeartBeatPublicationSet</STRONG> (Thumb, 246 bytes, Stack size 72 bytes, library.o(i.BnrgmConfigModel_ProcessHeartBeatPublicationSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684 + Unknown Stack Size
<LI>Call Chain = BnrgmConfigModel_ProcessHeartBeatPublicationSet &rArr; BnrgmConfigModel_SendConfigHeartbeatPublicationStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStop
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigHeartbeatPublicationStatus
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelLogToValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>BnrgmConfigModel_ProcessHeartBeatSubscriptionGet</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, library.o(i.BnrgmConfigModel_ProcessHeartBeatSubscriptionGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676 + Unknown Stack Size
<LI>Call Chain = BnrgmConfigModel_ProcessHeartBeatSubscriptionGet &rArr; BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelValueToLog
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>BnrgmConfigModel_ProcessHeartBeatSubscriptionSet</STRONG> (Thumb, 288 bytes, Stack size 64 bytes, library.o(i.BnrgmConfigModel_ProcessHeartBeatSubscriptionSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676 + Unknown Stack Size
<LI>Call Chain = BnrgmConfigModel_ProcessHeartBeatSubscriptionSet &rArr; BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelValueToLog
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSetHbSubscriptionPeriod
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStop
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStart
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtSubscriptionListAdd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelLogToValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, library.o(i.BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutLittleEndian
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtGetLpnPollTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>BnrgmConfigModel_ProcessNetworkTransmitGet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, library.o(i.BnrgmConfigModel_ProcessNetworkTransmitGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620 + Unknown Stack Size
<LI>Call Chain = BnrgmConfigModel_ProcessNetworkTransmitGet &rArr; BnrgmConfigModel_SendConfigNetworkTransmitStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigNetworkTransmitStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>BnrgmConfigModel_ProcessNetworkTransmitSet</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, library.o(i.BnrgmConfigModel_ProcessNetworkTransmitSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1628 + Unknown Stack Size
<LI>Call Chain = BnrgmConfigModel_ProcessNetworkTransmitSet &rArr; BnrgmConfigModel_SendConfigNetworkTransmitStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModel_SendConfigNetworkTransmitStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>BnrgmFrndFnClear_TimerCallback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, library.o(i.BnrgmFrndFnClear_TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = BnrgmFrndFnClear_TimerCallback &rArr; BnrgmStackSendFrndClear &rArr; BnrgmFrndFnSendFrndClear &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSendFrndClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.BnrgmFrndFn_FSM)
</UL>
<P><STRONG><a name="[1cd]"></a>BnrgmFrndFn_FSM</STRONG> (Thumb, 616 bytes, Stack size 96 bytes, library.o(i.BnrgmFrndFn_FSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 940 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStartOnce
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoSetFriendshipKeys
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoDeleteFriendshipKeys
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmLibraryFnOnFriendshipEstablished
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmLibraryFnOnFriendshipCleared
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendFriendPollResponse
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnInsertFriendUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndSubscrListRem
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndSubscrListAdd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndRequest
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndPoll
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndClear
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcess
</UL>

<P><STRONG><a name="[1f5]"></a>BnrgmFrndLpnSendFrndClear</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, library.o(i.BnrgmFrndLpnSendFrndClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BnrgmFrndLpnSendFrndClear &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetNetworkTransmitCount
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmPalCryptoDeleteFriendshipKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[1f6]"></a>BnrgmFrndLpnSendFrndPoll</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, library.o(i.BnrgmFrndLpnSendFrndPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BnrgmFrndLpnSendFrndPoll &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[1f7]"></a>BnrgmFrndLpnSendFrndRequest</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, library.o(i.BnrgmFrndLpnSendFrndRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = BnrgmFrndLpnSendFrndRequest &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[1f8]"></a>BnrgmFrndLpnSendFrndSubscrListAdd</STRONG> (Thumb, 100 bytes, Stack size 144 bytes, library.o(i.BnrgmFrndLpnSendFrndSubscrListAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = BnrgmFrndLpnSendFrndSubscrListAdd &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[1f9]"></a>BnrgmFrndLpnSendFrndSubscrListRem</STRONG> (Thumb, 100 bytes, Stack size 144 bytes, library.o(i.BnrgmFrndLpnSendFrndSubscrListRem))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = BnrgmFrndLpnSendFrndSubscrListRem &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSendControl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpn_FSM
</UL>

<P><STRONG><a name="[1ed]"></a>BnrgmFrndLpn_FSM</STRONG> (Thumb, 966 bytes, Stack size 120 bytes, library.o(i.BnrgmFrndLpn_FSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = BnrgmFrndLpn_FSM &rArr; BnrgmFrndLpnSendFrndSubscrListRem &rArr; MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_LpnFriendshipEstablishedCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndSubscrListRem
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndSubscrListAdd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndRequest
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndPoll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndClear
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmTransmitStopLpnScan
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackStartLpnScan
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackGetSubscriptionList
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmLibraryLpnOnFriendshipCleared
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSetLpState
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSetLowPowerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtTranspSegRecvd
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndUpdate
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndSubscrListConf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndRfu
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcessFrndOffer
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnProcess
</UL>

<P><STRONG><a name="[20]"></a>BnrgmHealthModelAttention_TimerCallback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, library.o(i.BnrgmHealthModelAttention_TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BnrgmHealthModelAttention_TimerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.BnrgmHealthModelSetAttentionTimer)
</UL>
<P><STRONG><a name="[21c]"></a>BnrgmHealthModelChkValidTestId</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, library.o(i.BnrgmHealthModelChkValidTestId))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultTestUnack
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultTest
</UL>

<P><STRONG><a name="[1f]"></a>BnrgmHealthModelNewPacket</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, library.o(i.BnrgmHealthModelNewPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BnrgmHealthModelNewPacket &rArr; MobleModelGetOpcodeValue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetOpcodeValue
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetOpcodeIdx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.BnrgmHealthModelInit)
</UL>
<P><STRONG><a name="[21]"></a>BnrgmHealthModelPublish_TimerCallback</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, library.o(i.BnrgmHealthModelPublish_TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1628 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModelPublish_TimerCallback &rArr; BnrgmHealthModel_SendCurrentStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendCurrentStatus
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.BnrgmHealthModelSetPublishTimer)
</UL>
<P><STRONG><a name="[20f]"></a>BnrgmHealthModelSetAttentionTimer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, library.o(i.BnrgmHealthModelSetAttentionTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BnrgmHealthModelSetAttentionTimer &rArr; MoblePalTimerStart &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStart
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessAttentionSetUnack
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessAttentionSet
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelAttentionTimerSet
</UL>

<P><STRONG><a name="[217]"></a>BnrgmHealthModelSetPublishTimer</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, library.o(i.BnrgmHealthModelSetPublishTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BnrgmHealthModelSetPublishTimer &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerSetup
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetPublicationState
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessPeriodSetUnack
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationSet
</UL>

<P><STRONG><a name="[ad]"></a>BnrgmHealthModel_ProcessAttentionGet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, library.o(i.BnrgmHealthModel_ProcessAttentionGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1604 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModel_ProcessAttentionGet &rArr; BnrgmHealthModel_SendAttentionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendAttentionStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>BnrgmHealthModel_ProcessAttentionSet</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, library.o(i.BnrgmHealthModel_ProcessAttentionSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModel_ProcessAttentionSet &rArr; BnrgmHealthModel_SendAttentionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendAttentionStatus
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetAttentionTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>BnrgmHealthModel_ProcessAttentionSetUnack</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, library.o(i.BnrgmHealthModel_ProcessAttentionSetUnack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BnrgmHealthModel_ProcessAttentionSetUnack &rArr; BnrgmHealthModelSetAttentionTimer &rArr; MoblePalTimerStart &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetAttentionTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>BnrgmHealthModel_ProcessFaultClear</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, library.o(i.BnrgmHealthModel_ProcessFaultClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModel_ProcessFaultClear &rArr; BnrgmHealthModel_SendFaultStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendFaultStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>BnrgmHealthModel_ProcessFaultClearUnack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, library.o(i.BnrgmHealthModel_ProcessFaultClearUnack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BnrgmHealthModel_ProcessFaultClearUnack &rArr; MobleInputStreamGetLittleEndian &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>BnrgmHealthModel_ProcessFaultGet</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, library.o(i.BnrgmHealthModel_ProcessFaultGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1636 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModel_ProcessFaultGet &rArr; BnrgmHealthModel_SendFaultStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendFaultStatus
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>BnrgmHealthModel_ProcessFaultTest</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, library.o(i.BnrgmHealthModel_ProcessFaultTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModel_ProcessFaultTest &rArr; BnrgmHealthModel_SendFaultStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendFaultStatus
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelChkValidTestId
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>BnrgmHealthModel_ProcessFaultTestUnack</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, library.o(i.BnrgmHealthModel_ProcessFaultTestUnack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BnrgmHealthModel_ProcessFaultTestUnack &rArr; MobleInputStreamGetLittleEndian &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelChkValidTestId
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>BnrgmHealthModel_ProcessPeriodGet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, library.o(i.BnrgmHealthModel_ProcessPeriodGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1604 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModel_ProcessPeriodGet &rArr; BnrgmHealthModel_SendPeriodStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendPeriodStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>BnrgmHealthModel_ProcessPeriodSet</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, library.o(i.BnrgmHealthModel_ProcessPeriodSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1604 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModel_ProcessPeriodSet &rArr; BnrgmHealthModel_SendPeriodStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_SendPeriodStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>BnrgmHealthModel_ProcessPeriodSetUnack</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, library.o(i.BnrgmHealthModel_ProcessPeriodSetUnack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BnrgmHealthModel_ProcessPeriodSetUnack &rArr; BnrgmHealthModelSetPublishTimer &rArr; MoblePalTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetPublishTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[21a]"></a>BnrgmHealthModel_SendAttentionStatus</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, library.o(i.BnrgmHealthModel_SendAttentionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1596 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModel_SendAttentionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessAttentionSet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessAttentionGet
</UL>

<P><STRONG><a name="[216]"></a>BnrgmHealthModel_SendCurrentStatus</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, library.o(i.BnrgmHealthModel_SendCurrentStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModel_SendCurrentStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelPublish_TimerCallback
</UL>

<P><STRONG><a name="[21b]"></a>BnrgmHealthModel_SendFaultStatus</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, library.o(i.BnrgmHealthModel_SendFaultStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModel_SendFaultStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultTest
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultGet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessFaultClear
</UL>

<P><STRONG><a name="[21d]"></a>BnrgmHealthModel_SendPeriodStatus</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, library.o(i.BnrgmHealthModel_SendPeriodStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1596 + Unknown Stack Size
<LI>Call Chain = BnrgmHealthModel_SendPeriodStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessPeriodSet
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModel_ProcessPeriodGet
</UL>

<P><STRONG><a name="[234]"></a>BnrgmProxyConfig_AddAddr_Filter</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, library.o(i.BnrgmProxyConfig_AddAddr_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = BnrgmProxyConfig_AddAddr_Filter &rArr; BnrgmProxyConfig_SendFilterStatus &rArr; BnrgmProxyConfig_SendData &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendFilterStatus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ProcessData
</UL>

<P><STRONG><a name="[23a]"></a>BnrgmProxyConfig_RemoveAddr_Filter</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, library.o(i.BnrgmProxyConfig_RemoveAddr_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = BnrgmProxyConfig_RemoveAddr_Filter &rArr; BnrgmProxyConfig_SendFilterStatus &rArr; BnrgmProxyConfig_SendData &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendFilterStatus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetBigEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ProcessData
</UL>

<P><STRONG><a name="[23c]"></a>BnrgmProxyConfig_SendData</STRONG> (Thumb, 106 bytes, Stack size 88 bytes, library.o(i.BnrgmProxyConfig_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = BnrgmProxyConfig_SendData &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptNetwork
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleLibraryGetAddress
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_KR_UseNewKeyEnc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackConsumeSeqNo
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyProtocol_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendFilterStatus
</UL>

<P><STRONG><a name="[235]"></a>BnrgmProxyConfig_SendFilterStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, library.o(i.BnrgmProxyConfig_SendFilterStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = BnrgmProxyConfig_SendFilterStatus &rArr; BnrgmProxyConfig_SendData &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_SendData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutBigEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_RemoveAddr_Filter
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_AddAddr_Filter
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmProxyConfig_ProcessData
</UL>

<P><STRONG><a name="[22]"></a>BnrgmProxy_SarTimeoutCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, library.o(i.BnrgmProxy_SarTimeoutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = BnrgmProxy_SarTimeoutCallback &rArr; MoblePalBluetoothGracefulReset &rArr; MobleBtReset &rArr; hci_reset &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothGracefulReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.BnrgmProxyProtocol_Init)
</UL>
<P><STRONG><a name="[1b3]"></a>MobleConfigModelDumpState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, library.o(i.MobleConfigModelDumpState))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelNewPacket
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSetFeatures
</UL>

<P><STRONG><a name="[3ad]"></a>MobleConfigModelGetAddressFromVirtual</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, library.o(i.MobleConfigModelGetAddressFromVirtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = MobleConfigModelGetAddressFromVirtual &rArr; MoblePalCryptoS1 &rArr; MoblePalCryptoAesCmac &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoS1
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoAesCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationVirtualAddressSet
</UL>

<P><STRONG><a name="[3b3]"></a>MobleConfigModelGetAppIdx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, library.o(i.MobleConfigModelGetAppIdx))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyUpdate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyGet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyDelete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyAdd
</UL>

<P><STRONG><a name="[29]"></a>MobleConfigModelNewPacket</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, library.o(i.MobleConfigModelNewPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MobleConfigModelNewPacket &rArr; MobleModelGetOpcodeValue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelDumpState
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetOpcodeValue
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetOpcodeIdx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleConfigModelInit)
</UL>
<P><STRONG><a name="[3d4]"></a>MobleConfigModelPutKeyIdxs</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, library.o(i.MobleConfigModelPutKeyIdxs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MobleConfigModelPutKeyIdxs
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendVendorModelAppList
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendSigModelAppList
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendNodeIdentityStatus
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendNetKeyStatus
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendKeyRefreshPhaseStatus
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppKeyStatus
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppKeyList
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyGet
</UL>

<P><STRONG><a name="[92]"></a>MobleConfigModel_ProcessAppBind</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, library.o(i.MobleConfigModel_ProcessAppBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessAppBind &rArr; MobleConfigModel_SendAppStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppStatus
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoModelAppBind
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationModelSupported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>MobleConfigModel_ProcessAppKeyAdd</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, library.o(i.MobleConfigModel_ProcessAppKeyAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessAppKeyAdd &rArr; MobleConfigModel_SendAppKeyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppKeyStatus
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetAppIdx
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetAppKey
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNetworkKey
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasAppKey
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetNetKeyIndexforAppKeyIndex
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>MobleConfigModel_ProcessAppKeyDelete</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, library.o(i.MobleConfigModel_ProcessAppKeyDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessAppKeyDelete &rArr; MobleConfigModel_SendAppKeyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppKeyStatus
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetAppIdx
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDeleteAppKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>MobleConfigModel_ProcessAppKeyGet</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, library.o(i.MobleConfigModel_ProcessAppKeyGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessAppKeyGet &rArr; MobleConfigModel_SendAppKeyList &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppKeyList
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetAppIdx
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNetworkKey
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetAppKeyIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>MobleConfigModel_ProcessAppKeyUpdate</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, library.o(i.MobleConfigModel_ProcessAppKeyUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessAppKeyUpdate &rArr; MobleConfigModel_SendAppKeyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppKeyStatus
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetAppIdx
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNewAppKey
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNewNetworkKey
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasAppKeyIndex
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasAppKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>MobleConfigModel_ProcessAppUnbind</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, library.o(i.MobleConfigModel_ProcessAppUnbind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessAppUnbind &rArr; MobleConfigModel_SendAppStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendAppStatus
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoModelAppUnBind
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationModelSupported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>MobleConfigModel_ProcessBeaconGet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, library.o(i.MobleConfigModel_ProcessBeaconGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessBeaconGet &rArr; MobleConfigModel_SendBeaconStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendBeaconStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>MobleConfigModel_ProcessBeaconSet</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, library.o(i.MobleConfigModel_ProcessBeaconSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessBeaconSet &rArr; MobleConfigModel_SendBeaconStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendBeaconStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>MobleConfigModel_ProcessDefaultTTLGet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, library.o(i.MobleConfigModel_ProcessDefaultTTLGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessDefaultTTLGet &rArr; MobleConfigModel_SendDefaultTTLStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendDefaultTTLStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>MobleConfigModel_ProcessDefaultTTLSet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, library.o(i.MobleConfigModel_ProcessDefaultTTLSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessDefaultTTLSet &rArr; MobleConfigModel_SendDefaultTTLStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendDefaultTTLStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>MobleConfigModel_ProcessDeviceCompositionDataGet</STRONG> (Thumb, 360 bytes, Stack size 392 bytes, library.o(i.MobleConfigModel_ProcessDeviceCompositionDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1964 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessDeviceCompositionDataGet &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutLittleEndian
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationGetVendorModelList
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationGetSigModelList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>MobleConfigModel_ProcessFriendGet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, library.o(i.MobleConfigModel_ProcessFriendGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessFriendGet &rArr; MobleConfigModel_SendFriendStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendFriendStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>MobleConfigModel_ProcessFriendSet</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, library.o(i.MobleConfigModel_ProcessFriendSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1636 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessFriendSet &rArr; MobleConfigModel_SendFriendStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendFriendStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSendHeartbeat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>MobleConfigModel_ProcessGattProxyGet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, library.o(i.MobleConfigModel_ProcessGattProxyGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessGattProxyGet &rArr; MobleConfigModel_SendGattProxyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendGattProxyStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>MobleConfigModel_ProcessGattProxySet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, library.o(i.MobleConfigModel_ProcessGattProxySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1636 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessGattProxySet &rArr; MobleConfigModel_SendGattProxyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendGattProxyStatus
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothGracefulReset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSendHeartbeat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>MobleConfigModel_ProcessKeyRefreshPhaseGet</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, library.o(i.MobleConfigModel_ProcessKeyRefreshPhaseGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1636 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessKeyRefreshPhaseGet &rArr; MobleConfigModel_SendKeyRefreshPhaseStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendKeyRefreshPhaseStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>MobleConfigModel_ProcessKeyRefreshPhaseSet</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, library.o(i.MobleConfigModel_ProcessKeyRefreshPhaseSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1644 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessKeyRefreshPhaseSet &rArr; MobleConfigModel_SendKeyRefreshPhaseStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendKeyRefreshPhaseStatus
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelConfigUpdateKRState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>MobleConfigModel_ProcessModelPublicationGet</STRONG> (Thumb, 320 bytes, Stack size 80 bytes, library.o(i.MobleConfigModel_ProcessModelPublicationGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1692 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessModelPublicationGet &rArr; MobleConfigModel_SendModelPublicationStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelPublicationStatus
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasAppKeyBind
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationModelSupported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>MobleConfigModel_ProcessModelPublicationSet</STRONG> (Thumb, 446 bytes, Stack size 88 bytes, library.o(i.MobleConfigModel_ProcessModelPublicationSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1700 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessModelPublicationSet &rArr; MobleConfigModel_SendModelPublicationStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmHealthModelSetPublishTimer
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelPublicationStatus
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasAppKey
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationModelSupported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>MobleConfigModel_ProcessModelPublicationVirtualAddressSet</STRONG> (Thumb, 340 bytes, Stack size 112 bytes, library.o(i.MobleConfigModel_ProcessModelPublicationVirtualAddressSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1724 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessModelPublicationVirtualAddressSet &rArr; MobleConfigModel_SendModelPublicationStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelPublicationStatus
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetAddressFromVirtual
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasAppKey
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationModelSupported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>MobleConfigModel_ProcessModelSubscriptionAdd</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, library.o(i.MobleConfigModel_ProcessModelSubscriptionAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessModelSubscriptionAdd &rArr; MobleConfigModel_SendModelSubscriptionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionAdd
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelSubscriptionStatus
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationModelSupported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>MobleConfigModel_ProcessModelSubscriptionDelete</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, library.o(i.MobleConfigModel_ProcessModelSubscriptionDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessModelSubscriptionDelete &rArr; MobleConfigModel_SendModelSubscriptionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionDelete
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelSubscriptionStatus
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationModelSupported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>MobleConfigModel_ProcessModelSubscriptionDeleteAll</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, library.o(i.MobleConfigModel_ProcessModelSubscriptionDeleteAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessModelSubscriptionDeleteAll &rArr; MobleConfigModel_SendModelSubscriptionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelSubscriptionStatus
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetRemoveAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>MobleConfigModel_ProcessModelSubscriptionOverwrite</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, library.o(i.MobleConfigModel_ProcessModelSubscriptionOverwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessModelSubscriptionOverwrite &rArr; MobleConfigModel_SendModelSubscriptionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionOverwrite
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelSubscriptionStatus
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, library.o(i.MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd &rArr; MobleConfigModel_SendModelSubscriptionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionAdd
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelSubscriptionStatus
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetAddressFromVirtual
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, library.o(i.MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete &rArr; MobleConfigModel_SendModelSubscriptionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionDelete
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelSubscriptionStatus
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetAddressFromVirtual
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationModelSupported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, library.o(i.MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite &rArr; MobleConfigModel_SendModelSubscriptionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SubscriptionOverwrite
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendModelSubscriptionStatus
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetAddressFromVirtual
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationModelSupported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>MobleConfigModel_ProcessNetKeyAdd</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, library.o(i.MobleConfigModel_ProcessNetKeyAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessNetKeyAdd &rArr; MobleConfigModel_SendNetKeyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendNetKeyStatus
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNetworkKey
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNetworkKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>MobleConfigModel_ProcessNetKeyDelete</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_ProcessNetKeyDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1652 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessNetKeyDelete &rArr; MobleConfigModel_SendNetKeyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendNetKeyStatus
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStop
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCrypto_GetNetKeyCount
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNetworkKey
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDeleteNetworkKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>MobleConfigModel_ProcessNetKeyGet</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, library.o(i.MobleConfigModel_ProcessNetKeyGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1628 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessNetKeyGet &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelPutKeyIdxs
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCrypto_GetNetKeyIndexes
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>MobleConfigModel_ProcessNetKeyUpdate</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, library.o(i.MobleConfigModel_ProcessNetKeyUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessNetKeyUpdate &rArr; MobleConfigModel_SendNetKeyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendNetKeyStatus
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNewNetworkKey
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNewNetworkKey
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNetworkKey
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtUpdateKeys
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelConfigUpdateKRState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>MobleConfigModel_ProcessNodeIdentityGet</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, library.o(i.MobleConfigModel_ProcessNodeIdentityGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessNodeIdentityGet &rArr; MobleConfigModel_SendNodeIdentityStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendNodeIdentityStatus
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNetworkKey
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetNodeIdntyState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>MobleConfigModel_ProcessNodeIdentitySet</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, library.o(i.MobleConfigModel_ProcessNodeIdentitySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1644 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessNodeIdentitySet &rArr; MobleConfigModel_SendNodeIdentityStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendNodeIdentityStatus
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoSetNodeIdntyState
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoHasNetworkKey
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmStackSetNodeIdentityState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>MobleConfigModel_ProcessNodeReset</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, library.o(i.MobleConfigModel_ProcessNodeReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1596 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessNodeReset &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluenrgMesh_UnprovisionCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalBluetoothGracefulReset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackConfigInvalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>MobleConfigModel_ProcessRelayGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, library.o(i.MobleConfigModel_ProcessRelayGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1628 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessRelayGet &rArr; MobleConfigModel_SendRelayStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendRelayStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>MobleConfigModel_ProcessRelaySet</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, library.o(i.MobleConfigModel_ProcessRelaySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1644 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessRelaySet &rArr; MobleConfigModel_SendRelayStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendRelayStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmConfigModelSendHeartbeat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>MobleConfigModel_ProcessSigModelAppGet</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, library.o(i.MobleConfigModel_ProcessSigModelAppGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessSigModelAppGet &rArr; MobleConfigModel_SendSigModelAppList &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendSigModelAppList
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCrypto_GetAppBind_SIGModel
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetSecurityKeys
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationSigModelActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>MobleConfigModel_ProcessSigModelSubscriptionGet</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, library.o(i.MobleConfigModel_ProcessSigModelSubscriptionGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessSigModelSubscriptionGet &rArr; MobleConfigModel_SendSigModelSubscriptionList &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendSigModelSubscriptionList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationSigModelActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>MobleConfigModel_ProcessVendorModelAppGet</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, library.o(i.MobleConfigModel_ProcessVendorModelAppGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessVendorModelAppGet &rArr; MobleConfigModel_SendVendorModelAppList &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendVendorModelAppList
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCrypto_GetAppBind_VendorModel
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoGetSecurityKeys
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationVendorModelActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>MobleConfigModel_ProcessVendorModelSubscriptionGet</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, library.o(i.MobleConfigModel_ProcessVendorModelSubscriptionGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_ProcessVendorModelSubscriptionGet &rArr; MobleConfigModel_SendVendorModelSubscriptionList &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_SendVendorModelSubscriptionList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleInputStreamGetLittleEndian
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationVendorModelActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(.constdata)
</UL>
<P><STRONG><a name="[3bc]"></a>MobleConfigModel_SendAppKeyList</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendAppKeyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendAppKeyList &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelPutKeyIdxs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyGet
</UL>

<P><STRONG><a name="[3b8]"></a>MobleConfigModel_SendAppKeyStatus</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendAppKeyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendAppKeyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelPutKeyIdxs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyUpdate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyDelete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppKeyAdd
</UL>

<P><STRONG><a name="[3b2]"></a>MobleConfigModel_SendAppStatus</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendAppStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendAppStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutLittleEndian
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppUnbind
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessAppBind
</UL>

<P><STRONG><a name="[3c1]"></a>MobleConfigModel_SendBeaconStatus</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendBeaconStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendBeaconStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessBeaconSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessBeaconGet
</UL>

<P><STRONG><a name="[3c2]"></a>MobleConfigModel_SendDefaultTTLStatus</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendDefaultTTLStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendDefaultTTLStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessDefaultTTLSet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessDefaultTTLGet
</UL>

<P><STRONG><a name="[3c5]"></a>MobleConfigModel_SendFriendStatus</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendFriendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendFriendStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessFriendSet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessFriendGet
</UL>

<P><STRONG><a name="[3c6]"></a>MobleConfigModel_SendGattProxyStatus</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendGattProxyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendGattProxyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessGattProxySet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessGattProxyGet
</UL>

<P><STRONG><a name="[3c7]"></a>MobleConfigModel_SendKeyRefreshPhaseStatus</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendKeyRefreshPhaseStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendKeyRefreshPhaseStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelPutKeyIdxs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessKeyRefreshPhaseSet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessKeyRefreshPhaseGet
</UL>

<P><STRONG><a name="[3c9]"></a>MobleConfigModel_SendModelPublicationStatus</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendModelPublicationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendModelPublicationStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutLittleEndian
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationVirtualAddressSet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationSet
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelPublicationGet
</UL>

<P><STRONG><a name="[3cb]"></a>MobleConfigModel_SendModelSubscriptionStatus</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendModelSubscriptionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendModelSubscriptionStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutLittleEndian
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionOverwrite
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionDeleteAll
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionDelete
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionAdd
</UL>

<P><STRONG><a name="[3d0]"></a>MobleConfigModel_SendNetKeyStatus</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendNetKeyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendNetKeyStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelPutKeyIdxs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyUpdate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyDelete
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNetKeyAdd
</UL>

<P><STRONG><a name="[3d7]"></a>MobleConfigModel_SendNodeIdentityStatus</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendNodeIdentityStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendNodeIdentityStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelPutKeyIdxs
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeIdentitySet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessNodeIdentityGet
</UL>

<P><STRONG><a name="[3db]"></a>MobleConfigModel_SendRelayStatus</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendRelayStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendRelayStatus &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessRelaySet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessRelayGet
</UL>

<P><STRONG><a name="[3dd]"></a>MobleConfigModel_SendSigModelAppList</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendSigModelAppList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendSigModelAppList &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelPutKeyIdxs
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutLittleEndian
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessSigModelAppGet
</UL>

<P><STRONG><a name="[3de]"></a>MobleConfigModel_SendSigModelSubscriptionList</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, library.o(i.MobleConfigModel_SendSigModelSubscriptionList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendSigModelSubscriptionList &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutLittleEndian
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetGet
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessSigModelSubscriptionGet
</UL>

<P><STRONG><a name="[3e0]"></a>MobleConfigModel_SendVendorModelAppList</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, library.o(i.MobleConfigModel_SendVendorModelAppList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendVendorModelAppList &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelPutKeyIdxs
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutLittleEndian
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessVendorModelAppGet
</UL>

<P><STRONG><a name="[3e1]"></a>MobleConfigModel_SendVendorModelSubscriptionList</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, library.o(i.MobleConfigModel_SendVendorModelSubscriptionList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SendVendorModelSubscriptionList &rArr; MobleModelSendPacket &rArr; MobleApplicationSendPacket &rArr; MobleTransportSendData &rArr; MobleTransSarSend &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleOutputStreamPutLittleEndian
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelSendPacket
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetGet
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessVendorModelSubscriptionGet
</UL>

<P><STRONG><a name="[3ca]"></a>MobleConfigModel_SubscriptionAdd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, library.o(i.MobleConfigModel_SubscriptionAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SubscriptionAdd &rArr; MobleConfigNetworkSave &rArr; MobleConfigSave &rArr; MoblePalNvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionAdd
</UL>

<P><STRONG><a name="[3cc]"></a>MobleConfigModel_SubscriptionDelete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, library.o(i.MobleConfigModel_SubscriptionDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SubscriptionDelete &rArr; MobleConfigNetworkSave &rArr; MobleConfigSave &rArr; MoblePalNvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionDelete
</UL>

<P><STRONG><a name="[3ce]"></a>MobleConfigModel_SubscriptionOverwrite</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, library.o(i.MobleConfigModel_SubscriptionOverwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = MobleConfigModel_SubscriptionOverwrite &rArr; MobleConfigNetworkSave &rArr; MobleConfigSave &rArr; MoblePalNvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigNetworkSave
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetInit
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleSetAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_ProcessModelSubscriptionOverwrite
</UL>

<P><STRONG><a name="[26]"></a>MobleGenericModelNewPacket</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, library.o(i.MobleGenericModelNewPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MobleGenericModelNewPacket &rArr; MobleModelGetOpcodeValue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetOpcodeValue
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMinParamLength
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMaxParamLength
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelCheckOpcodeValid
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelCheckOpCodeReliable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.GenericModel_Add_Server)
</UL>
<P><STRONG><a name="[28]"></a>MobleLightModelNewPacket</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, library.o(i.MobleLightModelNewPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MobleLightModelNewPacket &rArr; MobleModelGetOpcodeValue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetOpcodeValue
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMinParamLength
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMaxParamLength
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelCheckOpcodeValid
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelCheckOpCodeReliable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.LightModel_Add_Server)
</UL>
<P><STRONG><a name="[1de]"></a>MobleNetworkSendDataEx</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, library.o(i.MobleNetworkSendDataEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptNetwork
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_KR_UseNewKeyEnc
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleStackSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendData
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkProcessData
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendLpnMsg
</UL>

<P><STRONG><a name="[3f]"></a>MobleSensorModelNewPacket</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, library.o(i.MobleSensorModelNewPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MobleSensorModelNewPacket &rArr; MobleModelGetOpcodeValue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetOpcodeValue
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMinParamLength
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetMaxParamLength
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelCheckOpcodeValid
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelCheckOpCodeReliable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.SensorModel_Add_Server)
</UL>
<P><STRONG><a name="[480]"></a>MobleTransEraseTimer</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, library.o(i.MobleTransEraseTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MobleTransEraseTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarOnTimeout
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarOnRetransmit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarOnAckTimer
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarOnAckSentInsurance
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessSeg
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessAck
</UL>

<P><STRONG><a name="[481]"></a>MobleTransSarAssemble</STRONG> (Thumb, 644 bytes, Stack size 192 bytes, library.o(i.MobleTransSarAssemble))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = MobleTransSarAssemble &rArr; MoblePalCryptoDecryptApp &rArr; MoblePalCryptoAesCcmDecrypt &rArr; AES_CCM_Decrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendAck
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarCalcSeqAuth
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDecryptApp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_KR_UseNewKeyDec
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationProcessPacket
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtQueLpnPkt
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportRenderHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessSeg
</UL>

<P><STRONG><a name="[482]"></a>MobleTransSarCalcSeqAuth</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, library.o(i.MobleTransSarCalcSeqAuth))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessSeg
</UL>

<P><STRONG><a name="[3a]"></a>MobleTransSarOnAckSentInsurance</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, library.o(i.MobleTransSarOnAckSentInsurance))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MobleTransSarOnAckSentInsurance &rArr; MobleTransSarSendAck &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendAck
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransEraseTimer
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtGetFriendshipStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleTransSarProcessSeg)
</UL>
<P><STRONG><a name="[3b]"></a>MobleTransSarOnAckTimer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, library.o(i.MobleTransSarOnAckTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MobleTransSarOnAckTimer &rArr; MobleTransSarSendAck &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendAck
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransEraseTimer
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndMgmtGetFriendshipStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleTransSarProcessSeg)
</UL>
<P><STRONG><a name="[39]"></a>MobleTransSarOnRetransmit</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, library.o(i.MobleTransSarOnRetransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1452 + Unknown Stack Size
<LI>Call Chain = MobleTransSarOnRetransmit &rArr; MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendEx
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransEraseTimer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> library.o(i.MobleTransSarProcessAck)
<LI> library.o(i.MobleTransSarSendEx)
</UL>
<P><STRONG><a name="[3c]"></a>MobleTransSarOnTimeout</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, library.o(i.MobleTransSarOnTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MobleTransSarOnTimeout &rArr; MobleTransEraseTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransEraseTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> library.o(i.MobleTransSarProcessSeg)
</UL>
<P><STRONG><a name="[48a]"></a>MobleTransSarProcessUnseg</STRONG> (Thumb, 254 bytes, Stack size 112 bytes, library.o(i.MobleTransSarProcessUnseg))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = MobleTransSarProcessUnseg &rArr; MoblePalCryptoDecryptApp &rArr; MoblePalCryptoAesCcmDecrypt &rArr; AES_CCM_Decrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDecryptApp
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetOpcodeValue
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_KR_UseNewKeyDec
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleApplicationProcessPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportProcessData
</UL>

<P><STRONG><a name="[485]"></a>MobleTransSarSendAck</STRONG> (Thumb, 108 bytes, Stack size 96 bytes, library.o(i.MobleTransSarSendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + In Cycle
<LI>Call Chain = MobleTransSarSendAck &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htobe32
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendData
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetNetworkTransmitCount
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportRenderHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarOnAckTimer
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarOnAckSentInsurance
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarAssemble
</UL>

<P><STRONG><a name="[487]"></a>MobleTransSarSendEx</STRONG> (Thumb, 712 bytes, Stack size 152 bytes, library.o(i.MobleTransSarSendEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1412 + Unknown Stack Size
<LI>Call Chain = MobleTransSarSendEx &rArr; MobleNetworkSendData &rArr; MobleTransportProcessData &rArr; MobleTransControl_ProcessUnSegCtrlReq &rArr; BnrgmFrndMgmtProcessNewPacket &rArr; BnrgmFrndFnProcessFrndClear &rArr; BnrgmFrndFn_FSM &rArr; BnrgmFrndFnSendFriendPollResponse &rArr; BnrgmFrndFnSendLpnMsg &rArr; MobleNetworkSendDataEx &rArr; MoblePalCryptoEncryptNetwork &rArr; MoblePalCryptoAesCcmEncrypt &rArr; AES_CCM_Encrypt_Append &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerStart
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalTimerCreate
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoEncryptApp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendData
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemFree
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleMemAlloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModel_KR_UseNewKeyEnc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleConfigModelGetNetworkTransmitCount
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportRenderHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarOnRetransmit
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSend
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessAck
</UL>

<P><STRONG><a name="[1d1]"></a>MobleTransSendControl</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, library.o(i.MobleTransSendControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = MobleTransSendControl &rArr;  MobleNetworkSendData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleNetworkSendData
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportRenderHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndSubscrListRem
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndSubscrListAdd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndRequest
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndPoll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndLpnSendFrndClear
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFn_FSM
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendFrndClear
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnSendFriendPollResponse
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BnrgmFrndFnProcessFrndClear
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransportSendHeartbeat
</UL>

<P><STRONG><a name="[411]"></a>htobe16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, library.o(i.htobe16))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoParseNetHdr
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoblePalCryptoDecryptNetworkEx
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetOpcodeValue
</UL>

<P><STRONG><a name="[412]"></a>htobe32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, library.o(i.htobe32))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarSendAck
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleModelGetOpcodeValue
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MobleTransSarProcessAck
</UL>

<P><STRONG><a name="[518]"></a>fifoBuf_getFreeHeader</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, aci_events.o(i.fifoBuf_getFreeHeader))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>

<P><STRONG><a name="[27e]"></a>fifoCtrl_init</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, aci_events.o(i.fifoCtrl_init))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
</UL>

<P><STRONG><a name="[517]"></a>_load_uuid</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, bluenrg_gatt_aci.o(i._load_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _load_uuid &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[26f]"></a>Check_and_find_gatt_client</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, gatt_client.o(i.Check_and_find_gatt_client))
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
</UL>

<P><STRONG><a name="[2d3]"></a>Gatt_Check_Not_Error_Resp</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, gatt_client.o(i.Gatt_Check_Not_Error_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gatt_Check_Not_Error_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Internal_Evt_Handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[25]"></a>Gatt_Read_Charac_By_Uuid_Cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gatt_client.o(i.Gatt_Read_Charac_By_Uuid_Cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_Read_Charac_By_Uuid_Cb &rArr; Gatt_Super_Handler_Task7 &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.Gatt_Read_Charac_By_Uuid)
</UL>
<P><STRONG><a name="[2e0]"></a>Gatt_Super_Handler_Task7</STRONG> (Thumb, 392 bytes, Stack size unknown bytes, gatt_client.o(i.Gatt_Super_Handler_Task7))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_Super_Handler_Task7 &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Started_Gatt_Proc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Internal_Evt_Handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_Blob_Req_Pdu
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le2ByteToInt16
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16ToLe2Byte
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event_push
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event_push
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event_push
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event_push
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event_push
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Check_Not_Error_Resp
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid_Cb
</UL>

<P><STRONG><a name="[2ef]"></a>aci_att_read_blob_resp_event_push</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, gatt_client.o(i.aci_att_read_blob_resp_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_att_read_blob_resp_event_push &rArr; PM_Copy_Pckt_Data &rArr; Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[2ee]"></a>aci_att_read_multiple_resp_event_push</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, gatt_client.o(i.aci_att_read_multiple_resp_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_att_read_multiple_resp_event_push &rArr; PM_Copy_Pckt_Data &rArr; Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[2ed]"></a>aci_att_read_resp_event_push</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, gatt_client.o(i.aci_att_read_resp_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_att_read_resp_event_push &rArr; PM_Copy_Pckt_Data &rArr; Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[2f2]"></a>aci_gatt_disc_read_char_by_uuid_resp_event_push</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, gatt_client.o(i.aci_gatt_disc_read_char_by_uuid_resp_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_disc_read_char_by_uuid_resp_event_push &rArr; PM_Copy_Pckt_Data &rArr; Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[2d4]"></a>aci_gatt_error_resp_event_push</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, gatt_client.o(i.aci_gatt_error_resp_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_error_resp_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Check_Not_Error_Resp
</UL>

<P><STRONG><a name="[2f3]"></a>aci_gatt_proc_complete_event_push</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, gatt_client.o(i.aci_gatt_proc_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[2f1]"></a>int16ToLe2Byte</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gatt_client.o(i.int16ToLe2Byte))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[2f0]"></a>le2ByteToInt16</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gatt_client.o(i.le2ByteToInt16))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[2c0]"></a>GATT_Server_Set_Flag</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, gatt_server.o(i.GATT_Server_Set_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Complete_Handler
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
</UL>

<P><STRONG><a name="[2d5]"></a>Gatt_Flush_Pending_AclPacket_Lists</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Flush_Pending_AclPacket_Lists))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[2d6]"></a>Gatt_Reset_To_Closed_State</STRONG> (Thumb, 246 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Reset_To_Closed_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Server_Database_And_Reset_CCCD &rArr; SMP_Check_Is_Device_Bonded &rArr; SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[2e2]"></a>Gatt_Store_Server_Database_And_Reset_CCCD</STRONG> (Thumb, 352 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Store_Server_Database_And_Reset_CCCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Gatt_Store_Server_Database_And_Reset_CCCD &rArr; SMP_Check_Is_Device_Bonded &rArr; SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Is_Device_Bonded
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[2f5]"></a>Pm_Resize_Host_Acl_Pckt</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gatt_server.o(i.Pm_Resize_Host_Acl_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>

<P><STRONG><a name="[4b3]"></a>aci_gatt_indication_event_push</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, gatt_server.o(i.aci_gatt_indication_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_indication_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
</UL>

<P><STRONG><a name="[4b4]"></a>aci_gatt_notification_event_push</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, gatt_server.o(i.aci_gatt_notification_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_notification_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
</UL>

<P><STRONG><a name="[4f7]"></a>TimerCallback</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, host_timer.o(i.TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TimerCallback &rArr; GAP_LimDiscTimeoutcb_ucfg &rArr; GAP_LimDiscTimeoutcb &rArr; LL_Enable_Disable_Adv &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; isr_event_handler_scan_data_ucfg &rArr; isr_event_handler_scan_data &rArr; hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb_ucfg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb_ucfg
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Timer_cb
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Repeated_Attacks_Timer_cb
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_SigChan_Req_TimeOut_Handler
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_TimeOut_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
</UL>

<P><STRONG><a name="[327]"></a>L2C_Get_Connection_Info</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Get_Connection_Info))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Connect_Update_Req
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Signal_Handler
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[33a]"></a>L2C_Get_Connection_Info_Index</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Get_Connection_Info_Index))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[32d]"></a>L2C_Mux_Acl_Packet</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Mux_Acl_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = L2C_Mux_Acl_Packet &rArr; SM_L2CAP_Handler &rArr; smp_Keys_Distribution_Complete &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>

<P><STRONG><a name="[330]"></a>L2C_Rcv_Data</STRONG> (Thumb, 166 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Rcv_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = L2C_Rcv_Data &rArr; L2C_Mux_Acl_Packet &rArr; SM_L2CAP_Handler &rArr; smp_Keys_Distribution_Complete &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extract_Pdu_MBuff
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Compact
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Append
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_PDU_Len
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_corrupted_acl_packet
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>

<P><STRONG><a name="[339]"></a>L2C_Reset_To_Closed_State</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Reset_To_Closed_State))
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection_Info_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
</UL>

<P><STRONG><a name="[335]"></a>L2C_discard_corrupted_acl_packet</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, l2cap.o(i.L2C_discard_corrupted_acl_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_discard_corrupted_acl_packet &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[33c]"></a>aci_l2cap_connection_update_req_event_push</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, l2cap.o(i.aci_l2cap_connection_update_req_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
</UL>

<P><STRONG><a name="[278]"></a>Mem_assign</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, mem_alloc.o(i.Mem_assign))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator
</UL>

<P><STRONG><a name="[51e]"></a>adapt_slot</STRONG> (Thumb, 596 bytes, Stack size unknown bytes, multi_master_time.o(i.adapt_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = adapt_slot &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_updateSlotListEntry
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_searchBestFreeSlot
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_insertSlotListEntry
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_scan_slot
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
</UL>

<P><STRONG><a name="[520]"></a>nsar_insertSlotListEntry</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_insertSlotListEntry))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[521]"></a>nsar_searchBestFreeSlot</STRONG> (Thumb, 186 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_searchBestFreeSlot))
<BR><BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_updateBestFreeSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[592]"></a>nsar_updateBestFreeSlot</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_updateBestFreeSlot))
<BR><BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_searchBestFreeSlot
</UL>

<P><STRONG><a name="[51f]"></a>nsar_updateSlotListEntry</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_updateSlotListEntry))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[536]"></a>swap_u16</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, multi_master_time.o(i.swap_u16))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
</UL>

<P><STRONG><a name="[498]"></a>PM_Check_And_Set</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, pm.o(i.PM_Check_And_Set))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>

<P><STRONG><a name="[58f]"></a>wait_for_aes_ready</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, rom_ll_isr_postproc.o(i.wait_for_aes_ready))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
</UL>

<P><STRONG><a name="[344]"></a>LL_Set_DirectAddress</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_DirectAddress))
<BR><BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[35a]"></a>addr_u32_from_u8</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.addr_u32_from_u8))
<BR><BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_OwnAddress
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_DirectAddress
</UL>

<P><STRONG><a name="[352]"></a>int32ToLe4Byte</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.int32ToLe4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>

<P><STRONG><a name="[525]"></a>le4ByteToInt32</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.le4ByteToInt32))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>

<P><STRONG><a name="[354]"></a>convert_power</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.convert_power))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Adv_Tx_Power_Level
</UL>

<P><STRONG><a name="[5c8]"></a>swap_u16</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, routines_support.o(i.swap_u16))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
</UL>

<P><STRONG><a name="[5c7]"></a>swap_u32</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, routines_support.o(i.swap_u32))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
</UL>

<P><STRONG><a name="[5c6]"></a>swap_u8</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, routines_support.o(i.swap_u8))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
</UL>

<P><STRONG><a name="[279]"></a>Erase_Sector</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, sdb.o(i.Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = Erase_Sector &rArr; FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
</UL>

<P><STRONG><a name="[4cc]"></a>Write_Client_Data</STRONG> (Thumb, 424 bytes, Stack size unknown bytes, sdb.o(i.Write_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Write_Client_Data &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_invalidate_record
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_get_gatt_db_start_address
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Flagged
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
</UL>

<P><STRONG><a name="[504]"></a>int32ToLe4Byte</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, sdb.o(i.int32ToLe4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[4c3]"></a>sdb_delete</STRONG> (Thumb, 352 bytes, Stack size unknown bytes, sdb.o(i.sdb_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = sdb_delete &rArr; sdb_find_client_data &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_write_record
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
</UL>

<P><STRONG><a name="[4cd]"></a>sdb_find_client_data</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, sdb.o(i.sdb_find_client_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = sdb_find_client_data &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_get_gatt_db_start_address
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
</UL>

<P><STRONG><a name="[503]"></a>sdb_get_gatt_db_start_address</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, sdb.o(i.sdb_get_gatt_db_start_address))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[4c4]"></a>sdb_invalidate_record</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, sdb.o(i.sdb_invalidate_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = sdb_invalidate_record &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[4c2]"></a>sdb_read_record</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, sdb.o(i.sdb_read_record))
<BR><BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
</UL>

<P><STRONG><a name="[4c1]"></a>sdb_read_record_validity</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, sdb.o(i.sdb_read_record_validity))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Valid_Records
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
</UL>

<P><STRONG><a name="[4c5]"></a>sdb_write_record</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, sdb.o(i.sdb_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = sdb_write_record &rArr; Flash_Write_Flagged &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_With_NOP_Cycles
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Flagged
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
</UL>

<P><STRONG><a name="[4e6]"></a>sma_Calculate_Hash</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_Calculate_Hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sma_Calculate_Hash &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
</UL>

<P><STRONG><a name="[597]"></a>sma_generate_subkeys</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_generate_subkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sma_generate_subkeys &rArr; LL_Encrypt_Plain_Data_ucfg &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_left_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
</UL>

<P><STRONG><a name="[598]"></a>sma_left_shift</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_left_shift))
<BR><BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
</UL>

<P><STRONG><a name="[4e5]"></a>SM_Connection_Complete_Handler</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, smp_common.o(i.SM_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SM_Connection_Complete_Handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
</UL>

<P><STRONG><a name="[519]"></a>aci_gap_authorization_req_event_push</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, smp_common.o(i.aci_gap_authorization_req_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
</UL>

<P><STRONG><a name="[4e1]"></a>aci_gap_pairing_complete_event_push</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, smp_common.o(i.aci_gap_pairing_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Timer_cb
</UL>

<P><STRONG><a name="[4e8]"></a>smp_Keys_Distribution_Complete</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_common.o(i.smp_Keys_Distribution_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp_Keys_Distribution_Complete &rArr; smp_MI_Start_Encryption_ucfg &rArr; smp_MI_Start_Encryption &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_MI_Start_Encryption_ucfg
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
</UL>

<P><STRONG><a name="[5be]"></a>smp____Pairing_Process_Abort</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, smp_common.o(i.smp____Pairing_Process_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp____Pairing_Process_Abort &rArr; sm_RepeatedAttacks_Protection &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_update_statistics_on_pairing_complete_ucfg
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Receive
</UL>

<P><STRONG><a name="[11c]"></a>AES_general_enc</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, crypto.o(i.AES_general_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_SW_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESccmFinal
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_Encrypt_Append
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Header_Append
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Encrypt_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Encrypt_Append
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Decrypt_Append
</UL>

<P><STRONG><a name="[12e]"></a>AES_keyschedule_enc_LL</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, crypto.o(i.AES_keyschedule_enc_LL))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AES_keyschedule_enc_LL
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc
</UL>

<P><STRONG><a name="[11f]"></a>AESccmFinal</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, crypto.o(i.AESccmFinal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AESccmFinal &rArr; AES_general_enc &rArr; AES_general_SW_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Encrypt_Finish
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CCM_Decrypt_Finish
</UL>

<P><STRONG><a name="[129]"></a>AESstdInit</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, crypto.o(i.AESstdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AESstdInit &rArr; AES_keyschedule_dec &rArr; AES_keyschedule_enc &rArr; AES_keyschedule_enc_LL
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_Encrypt_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Init
</UL>

<P><STRONG><a name="[131]"></a>ATT_fill_type_val_entry</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, att.o(i.ATT_fill_type_val_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ATT_fill_type_val_entry &rArr; PM_Write_Pckt_Data &rArr; Mem_Buff_Write &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
</UL>

<P><STRONG><a name="[133]"></a>ATT_validate_prepare_req</STRONG> (Thumb, 162 bytes, Stack size unknown bytes, att.o(i.ATT_validate_prepare_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ATT_validate_prepare_req &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
</UL>

<P><STRONG><a name="[28b]"></a>Pm_Resize_Host_Acl_Pckt</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, att.o(i.Pm_Resize_Host_Acl_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
</UL>

<P><STRONG><a name="[285]"></a>aci_gatt_attribute_modified_event_push</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, att.o(i.aci_gatt_attribute_modified_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_attribute_modified_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
</UL>

<P><STRONG><a name="[4bd]"></a>aci_gatt_read_multi_permit_req_event_push</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, att.o(i.aci_gatt_read_multi_permit_req_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_read_multi_permit_req_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
</UL>

<P><STRONG><a name="[4bb]"></a>aci_gatt_read_permit_req_event_push</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, att.o(i.aci_gatt_read_permit_req_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
</UL>

<P><STRONG><a name="[505]"></a>aci_gatt_write_permit_req_event_push</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, att.o(i.aci_gatt_write_permit_req_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_write_permit_req_event_push &rArr; PM_Copy_Pckt_Data &rArr; Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
